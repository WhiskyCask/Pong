
./Debug/Pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fdee 	bl	20000be4 <main>
20000008:	e7fe      	b.n	20000008 <startup+0x8>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	".L1: B .L1\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <graphic_ctrl_bit_set>:
const uint8_t LCD_WIDTH = 128; /* Antalet pixlar på bredden */
const uint8_t LCD_HEIGHT = 64; /* Antalet pixlar på höjden */	

/* Adressera grafisk display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set(uint8_t x)
{
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	uint8_t c = GPIO_E->ODR_LOW;
2000001c:	4b0d      	ldr	r3, [pc, #52]	; (20000054 <graphic_ctrl_bit_set+0x44>)
2000001e:	681a      	ldr	r2, [r3, #0]
20000020:	210f      	movs	r1, #15
20000022:	187b      	adds	r3, r7, r1
20000024:	7d12      	ldrb	r2, [r2, #20]
20000026:	701a      	strb	r2, [r3, #0]
	c |= (x & ~B_SELECT);
20000028:	1dfb      	adds	r3, r7, #7
2000002a:	781b      	ldrb	r3, [r3, #0]
2000002c:	b25b      	sxtb	r3, r3
2000002e:	2204      	movs	r2, #4
20000030:	4393      	bics	r3, r2
20000032:	b25a      	sxtb	r2, r3
20000034:	187b      	adds	r3, r7, r1
20000036:	781b      	ldrb	r3, [r3, #0]
20000038:	b25b      	sxtb	r3, r3
2000003a:	4313      	orrs	r3, r2
2000003c:	b25a      	sxtb	r2, r3
2000003e:	187b      	adds	r3, r7, r1
20000040:	701a      	strb	r2, [r3, #0]
	GPIO_E->ODR_LOW = c;
20000042:	4b04      	ldr	r3, [pc, #16]	; (20000054 <graphic_ctrl_bit_set+0x44>)
20000044:	681b      	ldr	r3, [r3, #0]
20000046:	187a      	adds	r2, r7, r1
20000048:	7812      	ldrb	r2, [r2, #0]
2000004a:	751a      	strb	r2, [r3, #20]
}
2000004c:	46c0      	nop			; (mov r8, r8)
2000004e:	46bd      	mov	sp, r7
20000050:	b004      	add	sp, #16
20000052:	bd80      	pop	{r7, pc}
20000054:	20000d8c 	andcs	r0, r0, ip, lsl #27

20000058 <graphic_ctrl_bit_clear>:

/* Adressera grfisk display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear(uint8_t x)
{
20000058:	b580      	push	{r7, lr}
2000005a:	b084      	sub	sp, #16
2000005c:	af00      	add	r7, sp, #0
2000005e:	0002      	movs	r2, r0
20000060:	1dfb      	adds	r3, r7, #7
20000062:	701a      	strb	r2, [r3, #0]
	uint8_t c = GPIO_E->ODR_LOW;
20000064:	4b10      	ldr	r3, [pc, #64]	; (200000a8 <graphic_ctrl_bit_clear+0x50>)
20000066:	681a      	ldr	r2, [r3, #0]
20000068:	210f      	movs	r1, #15
2000006a:	187b      	adds	r3, r7, r1
2000006c:	7d12      	ldrb	r2, [r2, #20]
2000006e:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20000070:	1dfb      	adds	r3, r7, #7
20000072:	781b      	ldrb	r3, [r3, #0]
20000074:	b25b      	sxtb	r3, r3
20000076:	43db      	mvns	r3, r3
20000078:	b25b      	sxtb	r3, r3
2000007a:	187a      	adds	r2, r7, r1
2000007c:	7812      	ldrb	r2, [r2, #0]
2000007e:	b252      	sxtb	r2, r2
20000080:	4013      	ands	r3, r2
20000082:	b25a      	sxtb	r2, r3
20000084:	187b      	adds	r3, r7, r1
20000086:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000088:	187b      	adds	r3, r7, r1
2000008a:	0008      	movs	r0, r1
2000008c:	187a      	adds	r2, r7, r1
2000008e:	7812      	ldrb	r2, [r2, #0]
20000090:	2104      	movs	r1, #4
20000092:	438a      	bics	r2, r1
20000094:	701a      	strb	r2, [r3, #0]
	GPIO_E->ODR_LOW = c;
20000096:	4b04      	ldr	r3, [pc, #16]	; (200000a8 <graphic_ctrl_bit_clear+0x50>)
20000098:	681b      	ldr	r3, [r3, #0]
2000009a:	183a      	adds	r2, r7, r0
2000009c:	7812      	ldrb	r2, [r2, #0]
2000009e:	751a      	strb	r2, [r3, #20]
}
200000a0:	46c0      	nop			; (mov r8, r8)
200000a2:	46bd      	mov	sp, r7
200000a4:	b004      	add	sp, #16
200000a6:	bd80      	pop	{r7, pc}
200000a8:	20000d8c 	andcs	r0, r0, ip, lsl #27

200000ac <graphic_select_controller>:

static void graphic_select_controller(uint8_t controller)
{
200000ac:	b580      	push	{r7, lr}
200000ae:	b082      	sub	sp, #8
200000b0:	af00      	add	r7, sp, #0
200000b2:	0002      	movs	r2, r0
200000b4:	1dfb      	adds	r3, r7, #7
200000b6:	701a      	strb	r2, [r3, #0]
	switch (controller)
200000b8:	1dfb      	adds	r3, r7, #7
200000ba:	781b      	ldrb	r3, [r3, #0]
200000bc:	2b08      	cmp	r3, #8
200000be:	d00c      	beq.n	200000da <graphic_select_controller+0x2e>
200000c0:	dc02      	bgt.n	200000c8 <graphic_select_controller+0x1c>
200000c2:	2b00      	cmp	r3, #0
200000c4:	d005      	beq.n	200000d2 <graphic_select_controller+0x26>
		
		case B_CS1 | B_CS2:
			graphic_ctrl_bit_set(B_CS1 | B_CS2); /* Ettställer B_CS1 och B_CS2 */
			break;
	}
}
200000c6:	e01a      	b.n	200000fe <graphic_select_controller+0x52>
	switch (controller)
200000c8:	2b10      	cmp	r3, #16
200000ca:	d00d      	beq.n	200000e8 <graphic_select_controller+0x3c>
200000cc:	2b18      	cmp	r3, #24
200000ce:	d012      	beq.n	200000f6 <graphic_select_controller+0x4a>
}
200000d0:	e015      	b.n	200000fe <graphic_select_controller+0x52>
			graphic_ctrl_bit_clear(B_CS1 | B_CS2); /* Nollställer B_CS1 och B_CS2 */
200000d2:	2018      	movs	r0, #24
200000d4:	f7ff ffc0 	bl	20000058 <graphic_ctrl_bit_clear>
			break;
200000d8:	e011      	b.n	200000fe <graphic_select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1); /* Ettställer B_CS1 */
200000da:	2008      	movs	r0, #8
200000dc:	f7ff ff98 	bl	20000010 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); /* Nollställer B_CS2 */
200000e0:	2010      	movs	r0, #16
200000e2:	f7ff ffb9 	bl	20000058 <graphic_ctrl_bit_clear>
			break;
200000e6:	e00a      	b.n	200000fe <graphic_select_controller+0x52>
			graphic_ctrl_bit_clear(B_CS1); /* Nollställer B_CS1 */
200000e8:	2008      	movs	r0, #8
200000ea:	f7ff ffb5 	bl	20000058 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); /* Ettställer B_CS2 */
200000ee:	2010      	movs	r0, #16
200000f0:	f7ff ff8e 	bl	20000010 <graphic_ctrl_bit_set>
			break;
200000f4:	e003      	b.n	200000fe <graphic_select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1 | B_CS2); /* Ettställer B_CS1 och B_CS2 */
200000f6:	2018      	movs	r0, #24
200000f8:	f7ff ff8a 	bl	20000010 <graphic_ctrl_bit_set>
			break;
200000fc:	46c0      	nop			; (mov r8, r8)
}
200000fe:	46c0      	nop			; (mov r8, r8)
20000100:	46bd      	mov	sp, r7
20000102:	b002      	add	sp, #8
20000104:	bd80      	pop	{r7, pc}

20000106 <graphic_wait_ready>:

static void graphic_wait_ready()
{
20000106:	b580      	push	{r7, lr}
20000108:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E); /* Nollställer B_E */
2000010a:	2040      	movs	r0, #64	; 0x40
2000010c:	f7ff ffa4 	bl	20000058 <graphic_ctrl_bit_clear>
	GPIO_E->MODER = 0x00005555; /* Sätter bitar 15-8 till inport och bitar 7-0 till utport */
20000110:	4b15      	ldr	r3, [pc, #84]	; (20000168 <graphic_wait_ready+0x62>)
20000112:	681b      	ldr	r3, [r3, #0]
20000114:	4a15      	ldr	r2, [pc, #84]	; (2000016c <graphic_wait_ready+0x66>)
20000116:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS); /* Nollställer B_RS */
20000118:	2001      	movs	r0, #1
2000011a:	f7ff ff9d 	bl	20000058 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW); /* Ettställer RW */
2000011e:	2002      	movs	r0, #2
20000120:	f7ff ff76 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
20000124:	f000 fdf4 	bl	20000d10 <delay_500ns>
	/* Väntar nu på att den grafiska displayen skall blir klar */
	while(1) {
		graphic_ctrl_bit_set(B_E); /* Ettställer B_E */
20000128:	2040      	movs	r0, #64	; 0x40
2000012a:	f7ff ff71 	bl	20000010 <graphic_ctrl_bit_set>
		delay_500ns();
2000012e:	f000 fdef 	bl	20000d10 <delay_500ns>
		graphic_ctrl_bit_clear(B_E); /* Nollställer B_E */
20000132:	2040      	movs	r0, #64	; 0x40
20000134:	f7ff ff90 	bl	20000058 <graphic_ctrl_bit_clear>
		delay_500ns();
20000138:	f000 fdea 	bl	20000d10 <delay_500ns>
		if ((GPIO_E->IDR_HIGH & LCD_BUSY) != LCD_BUSY) {
2000013c:	4b0a      	ldr	r3, [pc, #40]	; (20000168 <graphic_wait_ready+0x62>)
2000013e:	681b      	ldr	r3, [r3, #0]
20000140:	7c5b      	ldrb	r3, [r3, #17]
20000142:	b2db      	uxtb	r3, r3
20000144:	001a      	movs	r2, r3
20000146:	2380      	movs	r3, #128	; 0x80
20000148:	4013      	ands	r3, r2
2000014a:	2b80      	cmp	r3, #128	; 0x80
2000014c:	d100      	bne.n	20000150 <graphic_wait_ready+0x4a>
		graphic_ctrl_bit_set(B_E); /* Ettställer B_E */
2000014e:	e7eb      	b.n	20000128 <graphic_wait_ready+0x22>
			break;
20000150:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	graphic_ctrl_bit_set(B_E); /* Ettställer B_E */
20000152:	2040      	movs	r0, #64	; 0x40
20000154:	f7ff ff5c 	bl	20000010 <graphic_ctrl_bit_set>
	GPIO_E->MODER = 0x55555555; /* Sätter samtliga bitar till utport */
20000158:	4b03      	ldr	r3, [pc, #12]	; (20000168 <graphic_wait_ready+0x62>)
2000015a:	681b      	ldr	r3, [r3, #0]
2000015c:	4a04      	ldr	r2, [pc, #16]	; (20000170 <graphic_wait_ready+0x6a>)
2000015e:	601a      	str	r2, [r3, #0]
}
20000160:	46c0      	nop			; (mov r8, r8)
20000162:	46bd      	mov	sp, r7
20000164:	bd80      	pop	{r7, pc}
20000166:	46c0      	nop			; (mov r8, r8)
20000168:	20000d8c 	andcs	r0, r0, ip, lsl #27
2000016c:	00005555 	andeq	r5, r0, r5, asr r5
20000170:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000174 <graphic_read>:

static uint8_t graphic_read(uint8_t controller)
{
20000174:	b580      	push	{r7, lr}
20000176:	b084      	sub	sp, #16
20000178:	af00      	add	r7, sp, #0
2000017a:	0002      	movs	r2, r0
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E); /* Nollställer B_E */
20000180:	2040      	movs	r0, #64	; 0x40
20000182:	f7ff ff69 	bl	20000058 <graphic_ctrl_bit_clear>
	GPIO_E->MODER = 0x00005555; /* Sätter bitar 15-8 till inport och bitar 7-0 till utport */
20000186:	4b1c      	ldr	r3, [pc, #112]	; (200001f8 <graphic_read+0x84>)
20000188:	681b      	ldr	r3, [r3, #0]
2000018a:	4a1c      	ldr	r2, [pc, #112]	; (200001fc <graphic_read+0x88>)
2000018c:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW); /* Ettställer B_RS och B_RW */
2000018e:	2003      	movs	r0, #3
20000190:	f7ff ff3e 	bl	20000010 <graphic_ctrl_bit_set>
	graphic_select_controller(controller); /* Väljer CS1, CS2, båda eller ingen */
20000194:	1dfb      	adds	r3, r7, #7
20000196:	781b      	ldrb	r3, [r3, #0]
20000198:	0018      	movs	r0, r3
2000019a:	f7ff ff87 	bl	200000ac <graphic_select_controller>
	delay_500ns();
2000019e:	f000 fdb7 	bl	20000d10 <delay_500ns>
	graphic_ctrl_bit_set(B_E); /* Ettställer B_E */
200001a2:	2040      	movs	r0, #64	; 0x40
200001a4:	f7ff ff34 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
200001a8:	f000 fdb2 	bl	20000d10 <delay_500ns>
	uint8_t rv = GPIO_E->IDR_HIGH; /* Läser av statusen */
200001ac:	4b12      	ldr	r3, [pc, #72]	; (200001f8 <graphic_read+0x84>)
200001ae:	681a      	ldr	r2, [r3, #0]
200001b0:	230f      	movs	r3, #15
200001b2:	18fb      	adds	r3, r7, r3
200001b4:	7c52      	ldrb	r2, [r2, #17]
200001b6:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E); /* Nollställer B_E */
200001b8:	2040      	movs	r0, #64	; 0x40
200001ba:	f7ff ff4d 	bl	20000058 <graphic_ctrl_bit_clear>
	GPIO_E->MODER = 0x55555555; /* Sätter samtliga bitar till utport */
200001be:	4b0e      	ldr	r3, [pc, #56]	; (200001f8 <graphic_read+0x84>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	4a0f      	ldr	r2, [pc, #60]	; (20000200 <graphic_read+0x8c>)
200001c4:	601a      	str	r2, [r3, #0]
	
	if (controller == B_CS1) {
200001c6:	1dfb      	adds	r3, r7, #7
200001c8:	781b      	ldrb	r3, [r3, #0]
200001ca:	2b08      	cmp	r3, #8
200001cc:	d104      	bne.n	200001d8 <graphic_read+0x64>
		graphic_select_controller(B_CS1); /* Väljer CS1 */
200001ce:	2008      	movs	r0, #8
200001d0:	f7ff ff6c 	bl	200000ac <graphic_select_controller>
		graphic_wait_ready(); /* Väntar på att den grafiska displayen skall blir redo */
200001d4:	f7ff ff97 	bl	20000106 <graphic_wait_ready>
	}
	if (controller == B_CS2) {
200001d8:	1dfb      	adds	r3, r7, #7
200001da:	781b      	ldrb	r3, [r3, #0]
200001dc:	2b10      	cmp	r3, #16
200001de:	d104      	bne.n	200001ea <graphic_read+0x76>
		graphic_select_controller(B_CS2);  /* Väljer CS2 */
200001e0:	2010      	movs	r0, #16
200001e2:	f7ff ff63 	bl	200000ac <graphic_select_controller>
		graphic_wait_ready(); /* Väntar på att den grafiska displayen skall blir redo */
200001e6:	f7ff ff8e 	bl	20000106 <graphic_wait_ready>
	}
	
	return rv;
200001ea:	230f      	movs	r3, #15
200001ec:	18fb      	adds	r3, r7, r3
200001ee:	781b      	ldrb	r3, [r3, #0]
}
200001f0:	0018      	movs	r0, r3
200001f2:	46bd      	mov	sp, r7
200001f4:	b004      	add	sp, #16
200001f6:	bd80      	pop	{r7, pc}
200001f8:	20000d8c 	andcs	r0, r0, ip, lsl #27
200001fc:	00005555 	andeq	r5, r0, r5, asr r5
20000200:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000204 <graphic_write>:

static void graphic_write(uint8_t value, uint8_t controller)
{
20000204:	b580      	push	{r7, lr}
20000206:	b082      	sub	sp, #8
20000208:	af00      	add	r7, sp, #0
2000020a:	0002      	movs	r2, r0
2000020c:	1dfb      	adds	r3, r7, #7
2000020e:	701a      	strb	r2, [r3, #0]
20000210:	1dbb      	adds	r3, r7, #6
20000212:	1c0a      	adds	r2, r1, #0
20000214:	701a      	strb	r2, [r3, #0]
	GPIO_E->ODR_HIGH = value; /* Skriver till dataregistret */
20000216:	4b1b      	ldr	r3, [pc, #108]	; (20000284 <graphic_write+0x80>)
20000218:	681b      	ldr	r3, [r3, #0]
2000021a:	1dfa      	adds	r2, r7, #7
2000021c:	7812      	ldrb	r2, [r2, #0]
2000021e:	755a      	strb	r2, [r3, #21]
	graphic_select_controller(controller); /* Väljer CS1, CS2, båda eller ingen */
20000220:	1dbb      	adds	r3, r7, #6
20000222:	781b      	ldrb	r3, [r3, #0]
20000224:	0018      	movs	r0, r3
20000226:	f7ff ff41 	bl	200000ac <graphic_select_controller>
	delay_500ns();
2000022a:	f000 fd71 	bl	20000d10 <delay_500ns>
	graphic_ctrl_bit_set(B_E); /* Ettställer B_E */
2000022e:	2040      	movs	r0, #64	; 0x40
20000230:	f7ff feee 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
20000234:	f000 fd6c 	bl	20000d10 <delay_500ns>
	graphic_ctrl_bit_clear(B_E); /* Nollställer B_E */
20000238:	2040      	movs	r0, #64	; 0x40
2000023a:	f7ff ff0d 	bl	20000058 <graphic_ctrl_bit_clear>
	
	if (controller & B_CS1) {
2000023e:	1dbb      	adds	r3, r7, #6
20000240:	781b      	ldrb	r3, [r3, #0]
20000242:	2208      	movs	r2, #8
20000244:	4013      	ands	r3, r2
20000246:	d004      	beq.n	20000252 <graphic_write+0x4e>
		graphic_select_controller(B_CS1); /* Väljer CS1 */
20000248:	2008      	movs	r0, #8
2000024a:	f7ff ff2f 	bl	200000ac <graphic_select_controller>
		graphic_wait_ready(); /* Väntar på att den grafiska displayen skall blir redo */
2000024e:	f7ff ff5a 	bl	20000106 <graphic_wait_ready>
	}
	if (controller & B_CS2) {
20000252:	1dbb      	adds	r3, r7, #6
20000254:	781b      	ldrb	r3, [r3, #0]
20000256:	2210      	movs	r2, #16
20000258:	4013      	ands	r3, r2
2000025a:	d004      	beq.n	20000266 <graphic_write+0x62>
		graphic_select_controller(B_CS2);  /* Väljer CS2 */
2000025c:	2010      	movs	r0, #16
2000025e:	f7ff ff25 	bl	200000ac <graphic_select_controller>
		graphic_wait_ready(); /* Väntar på att den grafiska displayen skall blir redo */
20000262:	f7ff ff50 	bl	20000106 <graphic_wait_ready>
	}
	
	GPIO_E->ODR_HIGH = 0; /* Nollställer dataregistret */
20000266:	4b07      	ldr	r3, [pc, #28]	; (20000284 <graphic_write+0x80>)
20000268:	681b      	ldr	r3, [r3, #0]
2000026a:	2200      	movs	r2, #0
2000026c:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E); /* Ettställer B_E */
2000026e:	2040      	movs	r0, #64	; 0x40
20000270:	f7ff fece 	bl	20000010 <graphic_ctrl_bit_set>
	graphic_select_controller(0); /* Deaktiverar båda CS-signalerna */
20000274:	2000      	movs	r0, #0
20000276:	f7ff ff19 	bl	200000ac <graphic_select_controller>
}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	46bd      	mov	sp, r7
2000027e:	b002      	add	sp, #8
20000280:	bd80      	pop	{r7, pc}
20000282:	46c0      	nop			; (mov r8, r8)
20000284:	20000d8c 	andcs	r0, r0, ip, lsl #27

20000288 <graphic_write_command>:

static void graphic_write_command(uint8_t command, uint8_t controller)
{
20000288:	b580      	push	{r7, lr}
2000028a:	b082      	sub	sp, #8
2000028c:	af00      	add	r7, sp, #0
2000028e:	0002      	movs	r2, r0
20000290:	1dfb      	adds	r3, r7, #7
20000292:	701a      	strb	r2, [r3, #0]
20000294:	1dbb      	adds	r3, r7, #6
20000296:	1c0a      	adds	r2, r1, #0
20000298:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E); /* Nollställer B_E */
2000029a:	2040      	movs	r0, #64	; 0x40
2000029c:	f7ff fedc 	bl	20000058 <graphic_ctrl_bit_clear>
	graphic_select_controller(controller); /* Väljer CS1, CS2, båda eller ingen */
200002a0:	1dbb      	adds	r3, r7, #6
200002a2:	781b      	ldrb	r3, [r3, #0]
200002a4:	0018      	movs	r0, r3
200002a6:	f7ff ff01 	bl	200000ac <graphic_select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW); /* Nollställer B_RS och B_RW */
200002aa:	2003      	movs	r0, #3
200002ac:	f7ff fed4 	bl	20000058 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200002b0:	1dbb      	adds	r3, r7, #6
200002b2:	781a      	ldrb	r2, [r3, #0]
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	781b      	ldrb	r3, [r3, #0]
200002b8:	0011      	movs	r1, r2
200002ba:	0018      	movs	r0, r3
200002bc:	f7ff ffa2 	bl	20000204 <graphic_write>
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}

200002c8 <graphic_write_data>:

static void graphic_write_data(uint8_t data, uint8_t controller)
{
200002c8:	b580      	push	{r7, lr}
200002ca:	b082      	sub	sp, #8
200002cc:	af00      	add	r7, sp, #0
200002ce:	0002      	movs	r2, r0
200002d0:	1dfb      	adds	r3, r7, #7
200002d2:	701a      	strb	r2, [r3, #0]
200002d4:	1dbb      	adds	r3, r7, #6
200002d6:	1c0a      	adds	r2, r1, #0
200002d8:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E); /* Nollställer B_E */
200002da:	2040      	movs	r0, #64	; 0x40
200002dc:	f7ff febc 	bl	20000058 <graphic_ctrl_bit_clear>
	graphic_select_controller(controller); /* Väljer CS1, CS2, båda eller ingen */
200002e0:	1dbb      	adds	r3, r7, #6
200002e2:	781b      	ldrb	r3, [r3, #0]
200002e4:	0018      	movs	r0, r3
200002e6:	f7ff fee1 	bl	200000ac <graphic_select_controller>
	graphic_ctrl_bit_set(B_RS); /* Ettställer B_RS */
200002ea:	2001      	movs	r0, #1
200002ec:	f7ff fe90 	bl	20000010 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW); /* Nollställer RW */
200002f0:	2002      	movs	r0, #2
200002f2:	f7ff feb1 	bl	20000058 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200002f6:	1dbb      	adds	r3, r7, #6
200002f8:	781a      	ldrb	r2, [r3, #0]
200002fa:	1dfb      	adds	r3, r7, #7
200002fc:	781b      	ldrb	r3, [r3, #0]
200002fe:	0011      	movs	r1, r2
20000300:	0018      	movs	r0, r3
20000302:	f7ff ff7f 	bl	20000204 <graphic_write>
}
20000306:	46c0      	nop			; (mov r8, r8)
20000308:	46bd      	mov	sp, r7
2000030a:	b002      	add	sp, #8
2000030c:	bd80      	pop	{r7, pc}

2000030e <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller)
{
2000030e:	b580      	push	{r7, lr}
20000310:	b082      	sub	sp, #8
20000312:	af00      	add	r7, sp, #0
20000314:	0002      	movs	r2, r0
20000316:	1dfb      	adds	r3, r7, #7
20000318:	701a      	strb	r2, [r3, #0]
	/* En läsning måste göras två gånger för att displayen skall returnera korret data */
	(void) graphic_read(controller); /* Returnerar nonsens */
2000031a:	1dfb      	adds	r3, r7, #7
2000031c:	781b      	ldrb	r3, [r3, #0]
2000031e:	0018      	movs	r0, r3
20000320:	f7ff ff28 	bl	20000174 <graphic_read>
	return graphic_read(controller); /* Returnerar korrekt data */
20000324:	1dfb      	adds	r3, r7, #7
20000326:	781b      	ldrb	r3, [r3, #0]
20000328:	0018      	movs	r0, r3
2000032a:	f7ff ff23 	bl	20000174 <graphic_read>
2000032e:	0003      	movs	r3, r0
}
20000330:	0018      	movs	r0, r3
20000332:	46bd      	mov	sp, r7
20000334:	b002      	add	sp, #8
20000336:	bd80      	pop	{r7, pc}

20000338 <graphic_clear_screen>:

void graphic_clear_screen()
{
20000338:	b580      	push	{r7, lr}
2000033a:	b082      	sub	sp, #8
2000033c:	af00      	add	r7, sp, #0
	for (uint8_t page = 0; page < LCD_PAGES; page++) {
2000033e:	1dfb      	adds	r3, r7, #7
20000340:	2200      	movs	r2, #0
20000342:	701a      	strb	r2, [r3, #0]
20000344:	e024      	b.n	20000390 <graphic_clear_screen+0x58>
		
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000346:	1dfb      	adds	r3, r7, #7
20000348:	781b      	ldrb	r3, [r3, #0]
2000034a:	2248      	movs	r2, #72	; 0x48
2000034c:	4252      	negs	r2, r2
2000034e:	4313      	orrs	r3, r2
20000350:	b2db      	uxtb	r3, r3
20000352:	2118      	movs	r1, #24
20000354:	0018      	movs	r0, r3
20000356:	f7ff ff97 	bl	20000288 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000035a:	2118      	movs	r1, #24
2000035c:	2040      	movs	r0, #64	; 0x40
2000035e:	f7ff ff93 	bl	20000288 <graphic_write_command>
		
		for (uint8_t add = 0; add < LCD_ADDS; add++) {
20000362:	1dbb      	adds	r3, r7, #6
20000364:	2200      	movs	r2, #0
20000366:	701a      	strb	r2, [r3, #0]
20000368:	e008      	b.n	2000037c <graphic_clear_screen+0x44>
			/*
			#ifndef SIMULATOR
				graphic_write_command(LCD_SET_ADD | add, B_CS1 | B_CS2);
			#endif
			*/
			graphic_write_data(0, B_CS1 | B_CS2);
2000036a:	2118      	movs	r1, #24
2000036c:	2000      	movs	r0, #0
2000036e:	f7ff ffab 	bl	200002c8 <graphic_write_data>
		for (uint8_t add = 0; add < LCD_ADDS; add++) {
20000372:	1dbb      	adds	r3, r7, #6
20000374:	781a      	ldrb	r2, [r3, #0]
20000376:	1dbb      	adds	r3, r7, #6
20000378:	3201      	adds	r2, #1
2000037a:	701a      	strb	r2, [r3, #0]
2000037c:	2240      	movs	r2, #64	; 0x40
2000037e:	1dbb      	adds	r3, r7, #6
20000380:	781b      	ldrb	r3, [r3, #0]
20000382:	4293      	cmp	r3, r2
20000384:	d3f1      	bcc.n	2000036a <graphic_clear_screen+0x32>
	for (uint8_t page = 0; page < LCD_PAGES; page++) {
20000386:	1dfb      	adds	r3, r7, #7
20000388:	781a      	ldrb	r2, [r3, #0]
2000038a:	1dfb      	adds	r3, r7, #7
2000038c:	3201      	adds	r2, #1
2000038e:	701a      	strb	r2, [r3, #0]
20000390:	2208      	movs	r2, #8
20000392:	1dfb      	adds	r3, r7, #7
20000394:	781b      	ldrb	r3, [r3, #0]
20000396:	4293      	cmp	r3, r2
20000398:	d3d5      	bcc.n	20000346 <graphic_clear_screen+0xe>
	
		}
	}
}
2000039a:	46c0      	nop			; (mov r8, r8)
2000039c:	46bd      	mov	sp, r7
2000039e:	b002      	add	sp, #8
200003a0:	bd80      	pop	{r7, pc}

200003a2 <graphic_initialise>:

void graphic_initialise()
{
200003a2:	b580      	push	{r7, lr}
200003a4:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E); /* Ettställer B_E */
200003a6:	2040      	movs	r0, #64	; 0x40
200003a8:	f7ff fe32 	bl	20000010 <graphic_ctrl_bit_set>
	delay_mikro(10);
200003ac:	200a      	movs	r0, #10
200003ae:	f000 fcb4 	bl	20000d1a <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RESET); /* Nollställer B_CS1, B_CS2 och B_RESET */
200003b2:	2038      	movs	r0, #56	; 0x38
200003b4:	f7ff fe50 	bl	20000058 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E); /* Nollställer B_E */
200003b8:	2040      	movs	r0, #64	; 0x40
200003ba:	f7ff fe4d 	bl	20000058 <graphic_ctrl_bit_clear>
	delay_milli(30);
200003be:	201e      	movs	r0, #30
200003c0:	f000 fcbe 	bl	20000d40 <delay_milli>
	graphic_ctrl_bit_set(B_RESET); /* Ettställer B_RESET */
200003c4:	2020      	movs	r0, #32
200003c6:	f7ff fe23 	bl	20000010 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200003ca:	2118      	movs	r1, #24
200003cc:	203e      	movs	r0, #62	; 0x3e
200003ce:	f7ff ff5b 	bl	20000288 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2); /* Toggla display */
200003d2:	2118      	movs	r1, #24
200003d4:	203f      	movs	r0, #63	; 0x3f
200003d6:	f7ff ff57 	bl	20000288 <graphic_write_command>
	graphic_write_command(LCD_DISPLAY_START, B_CS1 | B_CS2); /* start = 0 */
200003da:	2118      	movs	r1, #24
200003dc:	20c0      	movs	r0, #192	; 0xc0
200003de:	f7ff ff53 	bl	20000288 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2); /* add = 0 */
200003e2:	2118      	movs	r1, #24
200003e4:	2040      	movs	r0, #64	; 0x40
200003e6:	f7ff ff4f 	bl	20000288 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2); /* page = 0 */
200003ea:	2118      	movs	r1, #24
200003ec:	20b8      	movs	r0, #184	; 0xb8
200003ee:	f7ff ff4b 	bl	20000288 <graphic_write_command>
	
	graphic_select_controller(0); /* Deaktiverar båda CS-signalerna */
200003f2:	2000      	movs	r0, #0
200003f4:	f7ff fe5a 	bl	200000ac <graphic_select_controller>
}
200003f8:	46c0      	nop			; (mov r8, r8)
200003fa:	46bd      	mov	sp, r7
200003fc:	bd80      	pop	{r7, pc}

200003fe <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set)
{
200003fe:	b5f0      	push	{r4, r5, r6, r7, lr}
20000400:	b085      	sub	sp, #20
20000402:	af00      	add	r7, sp, #0
20000404:	0004      	movs	r4, r0
20000406:	0008      	movs	r0, r1
20000408:	0011      	movs	r1, r2
2000040a:	1dfb      	adds	r3, r7, #7
2000040c:	1c22      	adds	r2, r4, #0
2000040e:	701a      	strb	r2, [r3, #0]
20000410:	1dbb      	adds	r3, r7, #6
20000412:	1c02      	adds	r2, r0, #0
20000414:	701a      	strb	r2, [r3, #0]
20000416:	1d7b      	adds	r3, r7, #5
20000418:	1c0a      	adds	r2, r1, #0
2000041a:	701a      	strb	r2, [r3, #0]
	if ((x >= LCD_WIDTH && y >= LCD_HEIGHT)) {
2000041c:	2280      	movs	r2, #128	; 0x80
2000041e:	1dfb      	adds	r3, r7, #7
20000420:	781b      	ldrb	r3, [r3, #0]
20000422:	4293      	cmp	r3, r2
20000424:	d305      	bcc.n	20000432 <pixel+0x34>
20000426:	2240      	movs	r2, #64	; 0x40
20000428:	1dbb      	adds	r3, r7, #6
2000042a:	781b      	ldrb	r3, [r3, #0]
2000042c:	4293      	cmp	r3, r2
2000042e:	d300      	bcc.n	20000432 <pixel+0x34>
20000430:	e08f      	b.n	20000552 <pixel+0x154>
		return;
	}
	/* Skapa en bitmask för y-koordinaten */
	uint8_t page = (y - 1) / 8;
20000432:	1dbb      	adds	r3, r7, #6
20000434:	781b      	ldrb	r3, [r3, #0]
20000436:	3b01      	subs	r3, #1
20000438:	2b00      	cmp	r3, #0
2000043a:	da00      	bge.n	2000043e <pixel+0x40>
2000043c:	3307      	adds	r3, #7
2000043e:	10db      	asrs	r3, r3, #3
20000440:	001a      	movs	r2, r3
20000442:	230c      	movs	r3, #12
20000444:	18fb      	adds	r3, r7, r3
20000446:	701a      	strb	r2, [r3, #0]
	uint8_t mask = 1 << ((y - 1) & 7); /* & 7 är ekvivalnet med % 8 */
20000448:	1dbb      	adds	r3, r7, #6
2000044a:	781b      	ldrb	r3, [r3, #0]
2000044c:	3b01      	subs	r3, #1
2000044e:	2207      	movs	r2, #7
20000450:	4013      	ands	r3, r2
20000452:	2201      	movs	r2, #1
20000454:	409a      	lsls	r2, r3
20000456:	230f      	movs	r3, #15
20000458:	18fb      	adds	r3, r7, r3
2000045a:	701a      	strb	r2, [r3, #0]
	if (!set) {
2000045c:	1d7b      	adds	r3, r7, #5
2000045e:	781b      	ldrb	r3, [r3, #0]
20000460:	2b00      	cmp	r3, #0
20000462:	d105      	bne.n	20000470 <pixel+0x72>
		mask = ~mask;
20000464:	220f      	movs	r2, #15
20000466:	18bb      	adds	r3, r7, r2
20000468:	18ba      	adds	r2, r7, r2
2000046a:	7812      	ldrb	r2, [r2, #0]
2000046c:	43d2      	mvns	r2, r2
2000046e:	701a      	strb	r2, [r3, #0]
	}
	/* Bestäm fysiska koordinater och välj styrkrets */
	uint8_t controller;
	uint8_t x_fysisk;
	
	if (x < LCD_WIDTH / 2) {
20000470:	2380      	movs	r3, #128	; 0x80
20000472:	085b      	lsrs	r3, r3, #1
20000474:	b2db      	uxtb	r3, r3
20000476:	1dfa      	adds	r2, r7, #7
20000478:	7812      	ldrb	r2, [r2, #0]
2000047a:	429a      	cmp	r2, r3
2000047c:	d20a      	bcs.n	20000494 <pixel+0x96>
		controller = B_CS1;
2000047e:	230e      	movs	r3, #14
20000480:	18fb      	adds	r3, r7, r3
20000482:	2208      	movs	r2, #8
20000484:	701a      	strb	r2, [r3, #0]
		x_fysisk = x - 1;
20000486:	230d      	movs	r3, #13
20000488:	18fb      	adds	r3, r7, r3
2000048a:	1dfa      	adds	r2, r7, #7
2000048c:	7812      	ldrb	r2, [r2, #0]
2000048e:	3a01      	subs	r2, #1
20000490:	701a      	strb	r2, [r3, #0]
20000492:	e00e      	b.n	200004b2 <pixel+0xb4>
	}
	else {
		controller = B_CS2;
20000494:	230e      	movs	r3, #14
20000496:	18fb      	adds	r3, r7, r3
20000498:	2210      	movs	r2, #16
2000049a:	701a      	strb	r2, [r3, #0]
		x_fysisk = x - (LCD_WIDTH / 2 + 1);
2000049c:	2380      	movs	r3, #128	; 0x80
2000049e:	085b      	lsrs	r3, r3, #1
200004a0:	b2db      	uxtb	r3, r3
200004a2:	1dfa      	adds	r2, r7, #7
200004a4:	7812      	ldrb	r2, [r2, #0]
200004a6:	1ad3      	subs	r3, r2, r3
200004a8:	b2da      	uxtb	r2, r3
200004aa:	230d      	movs	r3, #13
200004ac:	18fb      	adds	r3, r7, r3
200004ae:	3a01      	subs	r2, #1
200004b0:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
200004b2:	260d      	movs	r6, #13
200004b4:	19bb      	adds	r3, r7, r6
200004b6:	781b      	ldrb	r3, [r3, #0]
200004b8:	2240      	movs	r2, #64	; 0x40
200004ba:	4313      	orrs	r3, r2
200004bc:	b2da      	uxtb	r2, r3
200004be:	250e      	movs	r5, #14
200004c0:	197b      	adds	r3, r7, r5
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	0019      	movs	r1, r3
200004c6:	0010      	movs	r0, r2
200004c8:	f7ff fede 	bl	20000288 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | page, controller);
200004cc:	230c      	movs	r3, #12
200004ce:	18fb      	adds	r3, r7, r3
200004d0:	781b      	ldrb	r3, [r3, #0]
200004d2:	2248      	movs	r2, #72	; 0x48
200004d4:	4252      	negs	r2, r2
200004d6:	4313      	orrs	r3, r2
200004d8:	b2da      	uxtb	r2, r3
200004da:	197b      	adds	r3, r7, r5
200004dc:	781b      	ldrb	r3, [r3, #0]
200004de:	0019      	movs	r1, r3
200004e0:	0010      	movs	r0, r2
200004e2:	f7ff fed1 	bl	20000288 <graphic_write_command>
	uint8_t temp = graphic_read_data(controller);
200004e6:	230b      	movs	r3, #11
200004e8:	18fc      	adds	r4, r7, r3
200004ea:	197b      	adds	r3, r7, r5
200004ec:	781b      	ldrb	r3, [r3, #0]
200004ee:	0018      	movs	r0, r3
200004f0:	f7ff ff0d 	bl	2000030e <graphic_read_data>
200004f4:	0003      	movs	r3, r0
200004f6:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
200004f8:	19bb      	adds	r3, r7, r6
200004fa:	781b      	ldrb	r3, [r3, #0]
200004fc:	2240      	movs	r2, #64	; 0x40
200004fe:	4313      	orrs	r3, r2
20000500:	b2da      	uxtb	r2, r3
20000502:	197b      	adds	r3, r7, r5
20000504:	781b      	ldrb	r3, [r3, #0]
20000506:	0019      	movs	r1, r3
20000508:	0010      	movs	r0, r2
2000050a:	f7ff febd 	bl	20000288 <graphic_write_command>
	
	if (!set) {
2000050e:	1d7b      	adds	r3, r7, #5
20000510:	781b      	ldrb	r3, [r3, #0]
20000512:	2b00      	cmp	r3, #0
20000514:	d109      	bne.n	2000052a <pixel+0x12c>
		mask &= temp;
20000516:	220f      	movs	r2, #15
20000518:	18bb      	adds	r3, r7, r2
2000051a:	18ba      	adds	r2, r7, r2
2000051c:	210b      	movs	r1, #11
2000051e:	1879      	adds	r1, r7, r1
20000520:	7812      	ldrb	r2, [r2, #0]
20000522:	7809      	ldrb	r1, [r1, #0]
20000524:	400a      	ands	r2, r1
20000526:	701a      	strb	r2, [r3, #0]
20000528:	e008      	b.n	2000053c <pixel+0x13e>
	}
	else {
		mask |= temp;
2000052a:	220f      	movs	r2, #15
2000052c:	18bb      	adds	r3, r7, r2
2000052e:	18b9      	adds	r1, r7, r2
20000530:	220b      	movs	r2, #11
20000532:	18ba      	adds	r2, r7, r2
20000534:	7809      	ldrb	r1, [r1, #0]
20000536:	7812      	ldrb	r2, [r2, #0]
20000538:	430a      	orrs	r2, r1
2000053a:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
2000053c:	230e      	movs	r3, #14
2000053e:	18fb      	adds	r3, r7, r3
20000540:	781a      	ldrb	r2, [r3, #0]
20000542:	230f      	movs	r3, #15
20000544:	18fb      	adds	r3, r7, r3
20000546:	781b      	ldrb	r3, [r3, #0]
20000548:	0011      	movs	r1, r2
2000054a:	0018      	movs	r0, r3
2000054c:	f7ff febc 	bl	200002c8 <graphic_write_data>
20000550:	e000      	b.n	20000554 <pixel+0x156>
		return;
20000552:	46c0      	nop			; (mov r8, r8)
	
20000554:	46bd      	mov	sp, r7
20000556:	b005      	add	sp, #20
20000558:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000055a:	46c0      	nop			; (mov r8, r8)

2000055c <draw_object>:
	}
};


void draw_object(Object * object)
{
2000055c:	b590      	push	{r4, r7, lr}
2000055e:	b085      	sub	sp, #20
20000560:	af00      	add	r7, sp, #0
20000562:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < object->geometry->num_points; i++) {
20000564:	230f      	movs	r3, #15
20000566:	18fb      	adds	r3, r7, r3
20000568:	2200      	movs	r2, #0
2000056a:	701a      	strb	r2, [r3, #0]
2000056c:	e027      	b.n	200005be <draw_object+0x62>
		pixel(object->geometry->points[i].x + object->pos_x, object->geometry->points[i].y + object->pos_y, 1);
2000056e:	687b      	ldr	r3, [r7, #4]
20000570:	681a      	ldr	r2, [r3, #0]
20000572:	210f      	movs	r1, #15
20000574:	187b      	adds	r3, r7, r1
20000576:	781b      	ldrb	r3, [r3, #0]
20000578:	005b      	lsls	r3, r3, #1
2000057a:	18d3      	adds	r3, r2, r3
2000057c:	3303      	adds	r3, #3
2000057e:	781a      	ldrb	r2, [r3, #0]
20000580:	687b      	ldr	r3, [r7, #4]
20000582:	791b      	ldrb	r3, [r3, #4]
20000584:	b25b      	sxtb	r3, r3
20000586:	b2db      	uxtb	r3, r3
20000588:	18d3      	adds	r3, r2, r3
2000058a:	b2d8      	uxtb	r0, r3
2000058c:	687b      	ldr	r3, [r7, #4]
2000058e:	681a      	ldr	r2, [r3, #0]
20000590:	000c      	movs	r4, r1
20000592:	187b      	adds	r3, r7, r1
20000594:	781b      	ldrb	r3, [r3, #0]
20000596:	005b      	lsls	r3, r3, #1
20000598:	18d3      	adds	r3, r2, r3
2000059a:	3304      	adds	r3, #4
2000059c:	781a      	ldrb	r2, [r3, #0]
2000059e:	687b      	ldr	r3, [r7, #4]
200005a0:	795b      	ldrb	r3, [r3, #5]
200005a2:	b25b      	sxtb	r3, r3
200005a4:	b2db      	uxtb	r3, r3
200005a6:	18d3      	adds	r3, r2, r3
200005a8:	b2db      	uxtb	r3, r3
200005aa:	2201      	movs	r2, #1
200005ac:	0019      	movs	r1, r3
200005ae:	f7ff ff26 	bl	200003fe <pixel>
	for (uint8_t i = 0; i < object->geometry->num_points; i++) {
200005b2:	0021      	movs	r1, r4
200005b4:	187b      	adds	r3, r7, r1
200005b6:	781a      	ldrb	r2, [r3, #0]
200005b8:	187b      	adds	r3, r7, r1
200005ba:	3201      	adds	r2, #1
200005bc:	701a      	strb	r2, [r3, #0]
200005be:	687b      	ldr	r3, [r7, #4]
200005c0:	681b      	ldr	r3, [r3, #0]
200005c2:	781b      	ldrb	r3, [r3, #0]
200005c4:	220f      	movs	r2, #15
200005c6:	18ba      	adds	r2, r7, r2
200005c8:	7812      	ldrb	r2, [r2, #0]
200005ca:	429a      	cmp	r2, r3
200005cc:	d3cf      	bcc.n	2000056e <draw_object+0x12>
	}
}
200005ce:	46c0      	nop			; (mov r8, r8)
200005d0:	46bd      	mov	sp, r7
200005d2:	b005      	add	sp, #20
200005d4:	bd90      	pop	{r4, r7, pc}

200005d6 <clear_object>:

void clear_object(Object * object)
{
200005d6:	b590      	push	{r4, r7, lr}
200005d8:	b085      	sub	sp, #20
200005da:	af00      	add	r7, sp, #0
200005dc:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < object->geometry->num_points; i++) {
200005de:	230f      	movs	r3, #15
200005e0:	18fb      	adds	r3, r7, r3
200005e2:	2200      	movs	r2, #0
200005e4:	701a      	strb	r2, [r3, #0]
200005e6:	e027      	b.n	20000638 <clear_object+0x62>
		pixel(object->geometry->points[i].x + object->pos_x, object->geometry->points[i].y + object->pos_y, 0);
200005e8:	687b      	ldr	r3, [r7, #4]
200005ea:	681a      	ldr	r2, [r3, #0]
200005ec:	210f      	movs	r1, #15
200005ee:	187b      	adds	r3, r7, r1
200005f0:	781b      	ldrb	r3, [r3, #0]
200005f2:	005b      	lsls	r3, r3, #1
200005f4:	18d3      	adds	r3, r2, r3
200005f6:	3303      	adds	r3, #3
200005f8:	781a      	ldrb	r2, [r3, #0]
200005fa:	687b      	ldr	r3, [r7, #4]
200005fc:	791b      	ldrb	r3, [r3, #4]
200005fe:	b25b      	sxtb	r3, r3
20000600:	b2db      	uxtb	r3, r3
20000602:	18d3      	adds	r3, r2, r3
20000604:	b2d8      	uxtb	r0, r3
20000606:	687b      	ldr	r3, [r7, #4]
20000608:	681a      	ldr	r2, [r3, #0]
2000060a:	000c      	movs	r4, r1
2000060c:	187b      	adds	r3, r7, r1
2000060e:	781b      	ldrb	r3, [r3, #0]
20000610:	005b      	lsls	r3, r3, #1
20000612:	18d3      	adds	r3, r2, r3
20000614:	3304      	adds	r3, #4
20000616:	781a      	ldrb	r2, [r3, #0]
20000618:	687b      	ldr	r3, [r7, #4]
2000061a:	795b      	ldrb	r3, [r3, #5]
2000061c:	b25b      	sxtb	r3, r3
2000061e:	b2db      	uxtb	r3, r3
20000620:	18d3      	adds	r3, r2, r3
20000622:	b2db      	uxtb	r3, r3
20000624:	2200      	movs	r2, #0
20000626:	0019      	movs	r1, r3
20000628:	f7ff fee9 	bl	200003fe <pixel>
	for (uint8_t i = 0; i < object->geometry->num_points; i++) {
2000062c:	0021      	movs	r1, r4
2000062e:	187b      	adds	r3, r7, r1
20000630:	781a      	ldrb	r2, [r3, #0]
20000632:	187b      	adds	r3, r7, r1
20000634:	3201      	adds	r2, #1
20000636:	701a      	strb	r2, [r3, #0]
20000638:	687b      	ldr	r3, [r7, #4]
2000063a:	681b      	ldr	r3, [r3, #0]
2000063c:	781b      	ldrb	r3, [r3, #0]
2000063e:	220f      	movs	r2, #15
20000640:	18ba      	adds	r2, r7, r2
20000642:	7812      	ldrb	r2, [r2, #0]
20000644:	429a      	cmp	r2, r3
20000646:	d3cf      	bcc.n	200005e8 <clear_object+0x12>
	}
}
20000648:	46c0      	nop			; (mov r8, r8)
2000064a:	46bd      	mov	sp, r7
2000064c:	b005      	add	sp, #20
2000064e:	bd90      	pop	{r4, r7, pc}

20000650 <move_object>:

void move_object(Object * object) {
20000650:	b580      	push	{r7, lr}
20000652:	b082      	sub	sp, #8
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
	
	clear_object(object);
20000658:	687b      	ldr	r3, [r7, #4]
2000065a:	0018      	movs	r0, r3
2000065c:	f7ff ffbb 	bl	200005d6 <clear_object>
	
	object->pos_x += object->vel_x;
20000660:	687b      	ldr	r3, [r7, #4]
20000662:	791b      	ldrb	r3, [r3, #4]
20000664:	b25b      	sxtb	r3, r3
20000666:	b2da      	uxtb	r2, r3
20000668:	687b      	ldr	r3, [r7, #4]
2000066a:	799b      	ldrb	r3, [r3, #6]
2000066c:	b25b      	sxtb	r3, r3
2000066e:	b2db      	uxtb	r3, r3
20000670:	18d3      	adds	r3, r2, r3
20000672:	b2db      	uxtb	r3, r3
20000674:	b25a      	sxtb	r2, r3
20000676:	687b      	ldr	r3, [r7, #4]
20000678:	711a      	strb	r2, [r3, #4]
	object->pos_y += object->vel_y;
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	795b      	ldrb	r3, [r3, #5]
2000067e:	b25b      	sxtb	r3, r3
20000680:	b2da      	uxtb	r2, r3
20000682:	687b      	ldr	r3, [r7, #4]
20000684:	79db      	ldrb	r3, [r3, #7]
20000686:	b25b      	sxtb	r3, r3
20000688:	b2db      	uxtb	r3, r3
2000068a:	18d3      	adds	r3, r2, r3
2000068c:	b2db      	uxtb	r3, r3
2000068e:	b25a      	sxtb	r2, r3
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	715a      	strb	r2, [r3, #5]
	
	/* Om objektet i fråga är påväg över någon kant, skifta riktning */
	if (!(0 <= object->pos_x && object->pos_x + object->geometry->width <= LCD_WIDTH)) {
20000694:	687b      	ldr	r3, [r7, #4]
20000696:	791b      	ldrb	r3, [r3, #4]
20000698:	b25b      	sxtb	r3, r3
2000069a:	2b00      	cmp	r3, #0
2000069c:	db0b      	blt.n	200006b6 <move_object+0x66>
2000069e:	687b      	ldr	r3, [r7, #4]
200006a0:	791b      	ldrb	r3, [r3, #4]
200006a2:	b25b      	sxtb	r3, r3
200006a4:	001a      	movs	r2, r3
200006a6:	687b      	ldr	r3, [r7, #4]
200006a8:	681b      	ldr	r3, [r3, #0]
200006aa:	785b      	ldrb	r3, [r3, #1]
200006ac:	18d3      	adds	r3, r2, r3
200006ae:	4a17      	ldr	r2, [pc, #92]	; (2000070c <move_object+0xbc>)
200006b0:	7812      	ldrb	r2, [r2, #0]
200006b2:	4293      	cmp	r3, r2
200006b4:	dd08      	ble.n	200006c8 <move_object+0x78>
		object->vel_x *= -1;
200006b6:	687b      	ldr	r3, [r7, #4]
200006b8:	799b      	ldrb	r3, [r3, #6]
200006ba:	b25b      	sxtb	r3, r3
200006bc:	b2db      	uxtb	r3, r3
200006be:	425b      	negs	r3, r3
200006c0:	b2db      	uxtb	r3, r3
200006c2:	b25a      	sxtb	r2, r3
200006c4:	687b      	ldr	r3, [r7, #4]
200006c6:	719a      	strb	r2, [r3, #6]
	}
	
	if (!(0 <= object->pos_y && object->pos_y + object->geometry->height <= LCD_HEIGHT)) {
200006c8:	687b      	ldr	r3, [r7, #4]
200006ca:	795b      	ldrb	r3, [r3, #5]
200006cc:	b25b      	sxtb	r3, r3
200006ce:	2b00      	cmp	r3, #0
200006d0:	db0b      	blt.n	200006ea <move_object+0x9a>
200006d2:	687b      	ldr	r3, [r7, #4]
200006d4:	795b      	ldrb	r3, [r3, #5]
200006d6:	b25b      	sxtb	r3, r3
200006d8:	001a      	movs	r2, r3
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	681b      	ldr	r3, [r3, #0]
200006de:	789b      	ldrb	r3, [r3, #2]
200006e0:	18d3      	adds	r3, r2, r3
200006e2:	4a0b      	ldr	r2, [pc, #44]	; (20000710 <move_object+0xc0>)
200006e4:	7812      	ldrb	r2, [r2, #0]
200006e6:	4293      	cmp	r3, r2
200006e8:	dd08      	ble.n	200006fc <move_object+0xac>
		object->vel_y *= -1;
200006ea:	687b      	ldr	r3, [r7, #4]
200006ec:	79db      	ldrb	r3, [r3, #7]
200006ee:	b25b      	sxtb	r3, r3
200006f0:	b2db      	uxtb	r3, r3
200006f2:	425b      	negs	r3, r3
200006f4:	b2db      	uxtb	r3, r3
200006f6:	b25a      	sxtb	r2, r3
200006f8:	687b      	ldr	r3, [r7, #4]
200006fa:	71da      	strb	r2, [r3, #7]
	}
	
	draw_object(object);
200006fc:	687b      	ldr	r3, [r7, #4]
200006fe:	0018      	movs	r0, r3
20000700:	f7ff ff2c 	bl	2000055c <draw_object>
	
}
20000704:	46c0      	nop			; (mov r8, r8)
20000706:	46bd      	mov	sp, r7
20000708:	b002      	add	sp, #8
2000070a:	bd80      	pop	{r7, pc}
2000070c:	20000d5a 	andcs	r0, r0, sl, asr sp
20000710:	20000d5b 	andcs	r0, r0, fp, asr sp

20000714 <set_object_vel>:

void set_object_vel(Object * object, int8_t vel_x, int8_t vel_y)
{
20000714:	b580      	push	{r7, lr}
20000716:	b082      	sub	sp, #8
20000718:	af00      	add	r7, sp, #0
2000071a:	6078      	str	r0, [r7, #4]
2000071c:	0008      	movs	r0, r1
2000071e:	0011      	movs	r1, r2
20000720:	1cfb      	adds	r3, r7, #3
20000722:	1c02      	adds	r2, r0, #0
20000724:	701a      	strb	r2, [r3, #0]
20000726:	1cbb      	adds	r3, r7, #2
20000728:	1c0a      	adds	r2, r1, #0
2000072a:	701a      	strb	r2, [r3, #0]
	object->vel_x = vel_x;
2000072c:	687b      	ldr	r3, [r7, #4]
2000072e:	1cfa      	adds	r2, r7, #3
20000730:	7812      	ldrb	r2, [r2, #0]
20000732:	719a      	strb	r2, [r3, #6]
	object->vel_y = vel_y;
20000734:	687b      	ldr	r3, [r7, #4]
20000736:	1cba      	adds	r2, r7, #2
20000738:	7812      	ldrb	r2, [r2, #0]
2000073a:	71da      	strb	r2, [r3, #7]
}
2000073c:	46c0      	nop			; (mov r8, r8)
2000073e:	46bd      	mov	sp, r7
20000740:	b002      	add	sp, #8
20000742:	bd80      	pop	{r7, pc}

20000744 <create_ball>:

Object create_ball(int8_t pos_x, int8_t pos_y, int8_t vel_x, int8_t vel_y) {
20000744:	b590      	push	{r4, r7, lr}
20000746:	b083      	sub	sp, #12
20000748:	af00      	add	r7, sp, #0
2000074a:	6078      	str	r0, [r7, #4]
2000074c:	000c      	movs	r4, r1
2000074e:	0010      	movs	r0, r2
20000750:	0019      	movs	r1, r3
20000752:	1cfb      	adds	r3, r7, #3
20000754:	1c22      	adds	r2, r4, #0
20000756:	701a      	strb	r2, [r3, #0]
20000758:	1cbb      	adds	r3, r7, #2
2000075a:	1c02      	adds	r2, r0, #0
2000075c:	701a      	strb	r2, [r3, #0]
2000075e:	1c7b      	adds	r3, r7, #1
20000760:	1c0a      	adds	r2, r1, #0
20000762:	701a      	strb	r2, [r3, #0]
	return (Object) {
20000764:	687b      	ldr	r3, [r7, #4]
20000766:	4a11      	ldr	r2, [pc, #68]	; (200007ac <create_ball+0x68>)
20000768:	601a      	str	r2, [r3, #0]
2000076a:	687b      	ldr	r3, [r7, #4]
2000076c:	1cfa      	adds	r2, r7, #3
2000076e:	7812      	ldrb	r2, [r2, #0]
20000770:	711a      	strb	r2, [r3, #4]
20000772:	687b      	ldr	r3, [r7, #4]
20000774:	1cba      	adds	r2, r7, #2
20000776:	7812      	ldrb	r2, [r2, #0]
20000778:	715a      	strb	r2, [r3, #5]
2000077a:	687b      	ldr	r3, [r7, #4]
2000077c:	1c7a      	adds	r2, r7, #1
2000077e:	7812      	ldrb	r2, [r2, #0]
20000780:	719a      	strb	r2, [r3, #6]
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	2218      	movs	r2, #24
20000786:	18ba      	adds	r2, r7, r2
20000788:	7812      	ldrb	r2, [r2, #0]
2000078a:	71da      	strb	r2, [r3, #7]
2000078c:	687b      	ldr	r3, [r7, #4]
2000078e:	4a08      	ldr	r2, [pc, #32]	; (200007b0 <create_ball+0x6c>)
20000790:	609a      	str	r2, [r3, #8]
20000792:	687b      	ldr	r3, [r7, #4]
20000794:	4a07      	ldr	r2, [pc, #28]	; (200007b4 <create_ball+0x70>)
20000796:	60da      	str	r2, [r3, #12]
20000798:	687b      	ldr	r3, [r7, #4]
2000079a:	4a07      	ldr	r2, [pc, #28]	; (200007b8 <create_ball+0x74>)
2000079c:	611a      	str	r2, [r3, #16]
2000079e:	687b      	ldr	r3, [r7, #4]
200007a0:	4a06      	ldr	r2, [pc, #24]	; (200007bc <create_ball+0x78>)
200007a2:	615a      	str	r2, [r3, #20]
	draw_object,
	clear_object,
	move_object,
	set_object_vel
	};
}
200007a4:	6878      	ldr	r0, [r7, #4]
200007a6:	46bd      	mov	sp, r7
200007a8:	b003      	add	sp, #12
200007aa:	bd90      	pop	{r4, r7, pc}
200007ac:	20000d5c 	andcs	r0, r0, ip, asr sp
200007b0:	2000055d 	andcs	r0, r0, sp, asr r5
200007b4:	200005d7 	ldrdcs	r0, [r0], -r7
200007b8:	20000651 	andcs	r0, r0, r1, asr r6
200007bc:	20000715 	andcs	r0, r0, r5, lsl r7

200007c0 <ascii_ctrl_bit_set>:
	
};

/* Adressera ASCII-display och ettställ de bitar som är 1 i x */
static void ascii_ctrl_bit_set(uint8_t x) 
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b084      	sub	sp, #16
200007c4:	af00      	add	r7, sp, #0
200007c6:	0002      	movs	r2, r0
200007c8:	1dfb      	adds	r3, r7, #7
200007ca:	701a      	strb	r2, [r3, #0]
	uint8_t c = GPIO_E->ODR_LOW;
200007cc:	4b0c      	ldr	r3, [pc, #48]	; (20000800 <ascii_ctrl_bit_set+0x40>)
200007ce:	681a      	ldr	r2, [r3, #0]
200007d0:	200f      	movs	r0, #15
200007d2:	183b      	adds	r3, r7, r0
200007d4:	7d12      	ldrb	r2, [r2, #20]
200007d6:	701a      	strb	r2, [r3, #0]
	c |= B_SELECT | x;
200007d8:	1dfa      	adds	r2, r7, #7
200007da:	183b      	adds	r3, r7, r0
200007dc:	7812      	ldrb	r2, [r2, #0]
200007de:	781b      	ldrb	r3, [r3, #0]
200007e0:	4313      	orrs	r3, r2
200007e2:	b2da      	uxtb	r2, r3
200007e4:	183b      	adds	r3, r7, r0
200007e6:	2104      	movs	r1, #4
200007e8:	430a      	orrs	r2, r1
200007ea:	701a      	strb	r2, [r3, #0]
	GPIO_E->ODR_LOW = c;
200007ec:	4b04      	ldr	r3, [pc, #16]	; (20000800 <ascii_ctrl_bit_set+0x40>)
200007ee:	681b      	ldr	r3, [r3, #0]
200007f0:	183a      	adds	r2, r7, r0
200007f2:	7812      	ldrb	r2, [r2, #0]
200007f4:	751a      	strb	r2, [r3, #20]
}
200007f6:	46c0      	nop			; (mov r8, r8)
200007f8:	46bd      	mov	sp, r7
200007fa:	b004      	add	sp, #16
200007fc:	bd80      	pop	{r7, pc}
200007fe:	46c0      	nop			; (mov r8, r8)
20000800:	20000d8c 	andcs	r0, r0, ip, lsl #27

20000804 <ascii_ctrl_bit_clear>:

/* Adressera ASCII-display och nollställ de bitar som är 1 i x */
static void ascii_ctrl_bit_clear(uint8_t x)
{
20000804:	b580      	push	{r7, lr}
20000806:	b084      	sub	sp, #16
20000808:	af00      	add	r7, sp, #0
2000080a:	0002      	movs	r2, r0
2000080c:	1dfb      	adds	r3, r7, #7
2000080e:	701a      	strb	r2, [r3, #0]
	uint8_t c = GPIO_E->ODR_LOW;
20000810:	4b0e      	ldr	r3, [pc, #56]	; (2000084c <ascii_ctrl_bit_clear+0x48>)
20000812:	681a      	ldr	r2, [r3, #0]
20000814:	210f      	movs	r1, #15
20000816:	187b      	adds	r3, r7, r1
20000818:	7d12      	ldrb	r2, [r2, #20]
2000081a:	701a      	strb	r2, [r3, #0]
	c &= (B_SELECT | ~x);
2000081c:	1dfb      	adds	r3, r7, #7
2000081e:	781b      	ldrb	r3, [r3, #0]
20000820:	b25b      	sxtb	r3, r3
20000822:	43db      	mvns	r3, r3
20000824:	b25b      	sxtb	r3, r3
20000826:	2204      	movs	r2, #4
20000828:	4313      	orrs	r3, r2
2000082a:	b25b      	sxtb	r3, r3
2000082c:	187a      	adds	r2, r7, r1
2000082e:	7812      	ldrb	r2, [r2, #0]
20000830:	b252      	sxtb	r2, r2
20000832:	4013      	ands	r3, r2
20000834:	b25a      	sxtb	r2, r3
20000836:	187b      	adds	r3, r7, r1
20000838:	701a      	strb	r2, [r3, #0]
	GPIO_E->ODR_LOW = c;
2000083a:	4b04      	ldr	r3, [pc, #16]	; (2000084c <ascii_ctrl_bit_clear+0x48>)
2000083c:	681b      	ldr	r3, [r3, #0]
2000083e:	187a      	adds	r2, r7, r1
20000840:	7812      	ldrb	r2, [r2, #0]
20000842:	751a      	strb	r2, [r3, #20]
}
20000844:	46c0      	nop			; (mov r8, r8)
20000846:	46bd      	mov	sp, r7
20000848:	b004      	add	sp, #16
2000084a:	bd80      	pop	{r7, pc}
2000084c:	20000d8c 	andcs	r0, r0, ip, lsl #27

20000850 <ascii_write_controller>:

static void ascii_write_controller(uint8_t c)
{
20000850:	b580      	push	{r7, lr}
20000852:	b082      	sub	sp, #8
20000854:	af00      	add	r7, sp, #0
20000856:	0002      	movs	r2, r0
20000858:	1dfb      	adds	r3, r7, #7
2000085a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E); /* Ettställer B_E */
2000085c:	2040      	movs	r0, #64	; 0x40
2000085e:	f7ff ffaf 	bl	200007c0 <ascii_ctrl_bit_set>
	GPIO_E->ODR_HIGH = c;
20000862:	4b07      	ldr	r3, [pc, #28]	; (20000880 <ascii_write_controller+0x30>)
20000864:	681b      	ldr	r3, [r3, #0]
20000866:	1dfa      	adds	r2, r7, #7
20000868:	7812      	ldrb	r2, [r2, #0]
2000086a:	755a      	strb	r2, [r3, #21]
	delay_250ns();
2000086c:	f000 fa32 	bl	20000cd4 <delay_250ns>
	ascii_ctrl_bit_clear(B_E); /* Nollställer B_E */
20000870:	2040      	movs	r0, #64	; 0x40
20000872:	f7ff ffc7 	bl	20000804 <ascii_ctrl_bit_clear>
}
20000876:	46c0      	nop			; (mov r8, r8)
20000878:	46bd      	mov	sp, r7
2000087a:	b002      	add	sp, #8
2000087c:	bd80      	pop	{r7, pc}
2000087e:	46c0      	nop			; (mov r8, r8)
20000880:	20000d8c 	andcs	r0, r0, ip, lsl #27

20000884 <ascii_read_controller>:

static uint8_t ascii_read_controller()
{
20000884:	b580      	push	{r7, lr}
20000886:	b082      	sub	sp, #8
20000888:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E); /* Ettställer B_E */
2000088a:	2040      	movs	r0, #64	; 0x40
2000088c:	f7ff ff98 	bl	200007c0 <ascii_ctrl_bit_set>
	delay_250ns();
20000890:	f000 fa20 	bl	20000cd4 <delay_250ns>
	delay_250ns();
20000894:	f000 fa1e 	bl	20000cd4 <delay_250ns>
	uint8_t c = GPIO_E->IDR_HIGH;
20000898:	4b06      	ldr	r3, [pc, #24]	; (200008b4 <ascii_read_controller+0x30>)
2000089a:	681a      	ldr	r2, [r3, #0]
2000089c:	1dfb      	adds	r3, r7, #7
2000089e:	7c52      	ldrb	r2, [r2, #17]
200008a0:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E); /* Nollställer B_E */
200008a2:	2040      	movs	r0, #64	; 0x40
200008a4:	f7ff ffae 	bl	20000804 <ascii_ctrl_bit_clear>
	return c;
200008a8:	1dfb      	adds	r3, r7, #7
200008aa:	781b      	ldrb	r3, [r3, #0]
}
200008ac:	0018      	movs	r0, r3
200008ae:	46bd      	mov	sp, r7
200008b0:	b002      	add	sp, #8
200008b2:	bd80      	pop	{r7, pc}
200008b4:	20000d8c 	andcs	r0, r0, ip, lsl #27

200008b8 <ascii_read_status>:

static uint8_t ascii_read_status()
{
200008b8:	b590      	push	{r4, r7, lr}
200008ba:	b083      	sub	sp, #12
200008bc:	af00      	add	r7, sp, #0
	GPIO_E->MODER = 0x00005555; /* Sätter E15-8 till inport och E7-1 till utport */
200008be:	4b0c      	ldr	r3, [pc, #48]	; (200008f0 <ascii_read_status+0x38>)
200008c0:	681b      	ldr	r3, [r3, #0]
200008c2:	4a0c      	ldr	r2, [pc, #48]	; (200008f4 <ascii_read_status+0x3c>)
200008c4:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS); /* Nollställer B_RS */
200008c6:	2001      	movs	r0, #1
200008c8:	f7ff ff9c 	bl	20000804 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW); /* Ettställer B_RW */
200008cc:	2002      	movs	r0, #2
200008ce:	f7ff ff77 	bl	200007c0 <ascii_ctrl_bit_set>
	uint8_t c = ascii_read_controller();
200008d2:	1dfc      	adds	r4, r7, #7
200008d4:	f7ff ffd6 	bl	20000884 <ascii_read_controller>
200008d8:	0003      	movs	r3, r0
200008da:	7023      	strb	r3, [r4, #0]
	GPIO_E->MODER = 0x55555555; /* Sätter hela Port E till utport */
200008dc:	4b04      	ldr	r3, [pc, #16]	; (200008f0 <ascii_read_status+0x38>)
200008de:	681b      	ldr	r3, [r3, #0]
200008e0:	4a05      	ldr	r2, [pc, #20]	; (200008f8 <ascii_read_status+0x40>)
200008e2:	601a      	str	r2, [r3, #0]
	return c;
200008e4:	1dfb      	adds	r3, r7, #7
200008e6:	781b      	ldrb	r3, [r3, #0]
}
200008e8:	0018      	movs	r0, r3
200008ea:	46bd      	mov	sp, r7
200008ec:	b003      	add	sp, #12
200008ee:	bd90      	pop	{r4, r7, pc}
200008f0:	20000d8c 	andcs	r0, r0, ip, lsl #27
200008f4:	00005555 	andeq	r5, r0, r5, asr r5
200008f8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200008fc <ascii_read_data>:

static uint8_t ascii_read_data()
{
200008fc:	b590      	push	{r4, r7, lr}
200008fe:	b083      	sub	sp, #12
20000900:	af00      	add	r7, sp, #0
	GPIO_E->MODER = 0x00005555; /* Sätter E15-8 till inport och E7-1 till utport */
20000902:	4b0c      	ldr	r3, [pc, #48]	; (20000934 <ascii_read_data+0x38>)
20000904:	681b      	ldr	r3, [r3, #0]
20000906:	4a0c      	ldr	r2, [pc, #48]	; (20000938 <ascii_read_data+0x3c>)
20000908:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS); /* Ettställer B_RS */
2000090a:	2001      	movs	r0, #1
2000090c:	f7ff ff58 	bl	200007c0 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW); /* Ettställer B_RW */
20000910:	2002      	movs	r0, #2
20000912:	f7ff ff55 	bl	200007c0 <ascii_ctrl_bit_set>
	uint8_t c = ascii_read_controller();
20000916:	1dfc      	adds	r4, r7, #7
20000918:	f7ff ffb4 	bl	20000884 <ascii_read_controller>
2000091c:	0003      	movs	r3, r0
2000091e:	7023      	strb	r3, [r4, #0]
	GPIO_E->MODER = 0x55555555; /* Sätter hela Port E till utport */
20000920:	4b04      	ldr	r3, [pc, #16]	; (20000934 <ascii_read_data+0x38>)
20000922:	681b      	ldr	r3, [r3, #0]
20000924:	4a05      	ldr	r2, [pc, #20]	; (2000093c <ascii_read_data+0x40>)
20000926:	601a      	str	r2, [r3, #0]
	return c;
20000928:	1dfb      	adds	r3, r7, #7
2000092a:	781b      	ldrb	r3, [r3, #0]
}
2000092c:	0018      	movs	r0, r3
2000092e:	46bd      	mov	sp, r7
20000930:	b003      	add	sp, #12
20000932:	bd90      	pop	{r4, r7, pc}
20000934:	20000d8c 	andcs	r0, r0, ip, lsl #27
20000938:	00005555 	andeq	r5, r0, r5, asr r5
2000093c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000940 <ascii_write_cmd>:

static void ascii_write_cmd(uint8_t c)
{
20000940:	b580      	push	{r7, lr}
20000942:	b082      	sub	sp, #8
20000944:	af00      	add	r7, sp, #0
20000946:	0002      	movs	r2, r0
20000948:	1dfb      	adds	r3, r7, #7
2000094a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS); /* Nollställer B_RS */
2000094c:	2001      	movs	r0, #1
2000094e:	f7ff ff59 	bl	20000804 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW); /* Nollställer B_RW */
20000952:	2002      	movs	r0, #2
20000954:	f7ff ff56 	bl	20000804 <ascii_ctrl_bit_clear>
	ascii_write_controller(c);
20000958:	1dfb      	adds	r3, r7, #7
2000095a:	781b      	ldrb	r3, [r3, #0]
2000095c:	0018      	movs	r0, r3
2000095e:	f7ff ff77 	bl	20000850 <ascii_write_controller>
}
20000962:	46c0      	nop			; (mov r8, r8)
20000964:	46bd      	mov	sp, r7
20000966:	b002      	add	sp, #8
20000968:	bd80      	pop	{r7, pc}

2000096a <ascii_write_data>:

static void ascii_write_data(uint8_t c)
{
2000096a:	b580      	push	{r7, lr}
2000096c:	b082      	sub	sp, #8
2000096e:	af00      	add	r7, sp, #0
20000970:	0002      	movs	r2, r0
20000972:	1dfb      	adds	r3, r7, #7
20000974:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS); /* Ettställer B_RS */
20000976:	2001      	movs	r0, #1
20000978:	f7ff ff22 	bl	200007c0 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW); /* Nollställer B_RW */
2000097c:	2002      	movs	r0, #2
2000097e:	f7ff ff41 	bl	20000804 <ascii_ctrl_bit_clear>
	ascii_write_controller(c);
20000982:	1dfb      	adds	r3, r7, #7
20000984:	781b      	ldrb	r3, [r3, #0]
20000986:	0018      	movs	r0, r3
20000988:	f7ff ff62 	bl	20000850 <ascii_write_controller>
}
2000098c:	46c0      	nop			; (mov r8, r8)
2000098e:	46bd      	mov	sp, r7
20000990:	b002      	add	sp, #8
20000992:	bd80      	pop	{r7, pc}

20000994 <ascii_command>:

static void ascii_command(uint8_t c)
{
20000994:	b580      	push	{r7, lr}
20000996:	b082      	sub	sp, #8
20000998:	af00      	add	r7, sp, #0
2000099a:	0002      	movs	r2, r0
2000099c:	1dfb      	adds	r3, r7, #7
2000099e:	701a      	strb	r2, [r3, #0]
	while ((ascii_read_status() & ASCII_BUSY) == ASCII_BUSY) {
200009a0:	46c0      	nop			; (mov r8, r8)
200009a2:	f7ff ff89 	bl	200008b8 <ascii_read_status>
200009a6:	0003      	movs	r3, r0
200009a8:	001a      	movs	r2, r3
200009aa:	2380      	movs	r3, #128	; 0x80
200009ac:	4013      	ands	r3, r2
200009ae:	2b80      	cmp	r3, #128	; 0x80
200009b0:	d0f7      	beq.n	200009a2 <ascii_command+0xe>
		/*  Vänta tills statusflaggan blir noll */
	}
	delay_mikro(8); /* Latenstid för kommando */
200009b2:	2008      	movs	r0, #8
200009b4:	f000 f9b1 	bl	20000d1a <delay_mikro>
	ascii_write_cmd(c);
200009b8:	1dfb      	adds	r3, r7, #7
200009ba:	781b      	ldrb	r3, [r3, #0]
200009bc:	0018      	movs	r0, r3
200009be:	f7ff ffbf 	bl	20000940 <ascii_write_cmd>
}
200009c2:	46c0      	nop			; (mov r8, r8)
200009c4:	46bd      	mov	sp, r7
200009c6:	b002      	add	sp, #8
200009c8:	bd80      	pop	{r7, pc}

200009ca <ascii_write_char>:

void ascii_write_char(uint8_t c)
{
200009ca:	b580      	push	{r7, lr}
200009cc:	b082      	sub	sp, #8
200009ce:	af00      	add	r7, sp, #0
200009d0:	0002      	movs	r2, r0
200009d2:	1dfb      	adds	r3, r7, #7
200009d4:	701a      	strb	r2, [r3, #0]
	while ((ascii_read_status() & 0x80) == 0x80) {
200009d6:	46c0      	nop			; (mov r8, r8)
200009d8:	f7ff ff6e 	bl	200008b8 <ascii_read_status>
200009dc:	0003      	movs	r3, r0
200009de:	001a      	movs	r2, r3
200009e0:	2380      	movs	r3, #128	; 0x80
200009e2:	4013      	ands	r3, r2
200009e4:	2b80      	cmp	r3, #128	; 0x80
200009e6:	d0f7      	beq.n	200009d8 <ascii_write_char+0xe>
		/*  Vänta tills statusflaggan blir noll */
	}
	delay_mikro(8);
200009e8:	2008      	movs	r0, #8
200009ea:	f000 f996 	bl	20000d1a <delay_mikro>
	ascii_write_data(c);
200009ee:	1dfb      	adds	r3, r7, #7
200009f0:	781b      	ldrb	r3, [r3, #0]
200009f2:	0018      	movs	r0, r3
200009f4:	f7ff ffb9 	bl	2000096a <ascii_write_data>
	delay_mikro(43); /* Fördröj instruktionsspecifik fördröjning */
200009f8:	202b      	movs	r0, #43	; 0x2b
200009fa:	f000 f98e 	bl	20000d1a <delay_mikro>
}
200009fe:	46c0      	nop			; (mov r8, r8)
20000a00:	46bd      	mov	sp, r7
20000a02:	b002      	add	sp, #8
20000a04:	bd80      	pop	{r7, pc}

20000a06 <ascii_gotoxy>:

void ascii_gotoxy(uint8_t row, uint8_t col)
{
20000a06:	b580      	push	{r7, lr}
20000a08:	b084      	sub	sp, #16
20000a0a:	af00      	add	r7, sp, #0
20000a0c:	0002      	movs	r2, r0
20000a0e:	1dfb      	adds	r3, r7, #7
20000a10:	701a      	strb	r2, [r3, #0]
20000a12:	1dbb      	adds	r3, r7, #6
20000a14:	1c0a      	adds	r2, r1, #0
20000a16:	701a      	strb	r2, [r3, #0]
	uint8_t address = row - 1;
20000a18:	230f      	movs	r3, #15
20000a1a:	18fb      	adds	r3, r7, r3
20000a1c:	1dfa      	adds	r2, r7, #7
20000a1e:	7812      	ldrb	r2, [r2, #0]
20000a20:	3a01      	subs	r2, #1
20000a22:	701a      	strb	r2, [r3, #0]
	if (col == 2) {
20000a24:	1dbb      	adds	r3, r7, #6
20000a26:	781b      	ldrb	r3, [r3, #0]
20000a28:	2b02      	cmp	r3, #2
20000a2a:	d105      	bne.n	20000a38 <ascii_gotoxy+0x32>
		address += 0x40; /* Eftersom det ryms 64 bytes på första raden */
20000a2c:	220f      	movs	r2, #15
20000a2e:	18bb      	adds	r3, r7, r2
20000a30:	18ba      	adds	r2, r7, r2
20000a32:	7812      	ldrb	r2, [r2, #0]
20000a34:	3240      	adds	r2, #64	; 0x40
20000a36:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
20000a38:	230f      	movs	r3, #15
20000a3a:	18fb      	adds	r3, r7, r3
20000a3c:	781b      	ldrb	r3, [r3, #0]
20000a3e:	2280      	movs	r2, #128	; 0x80
20000a40:	4252      	negs	r2, r2
20000a42:	4313      	orrs	r3, r2
20000a44:	b2db      	uxtb	r3, r3
20000a46:	0018      	movs	r0, r3
20000a48:	f7ff ff7a 	bl	20000940 <ascii_write_cmd>
}
20000a4c:	46c0      	nop			; (mov r8, r8)
20000a4e:	46bd      	mov	sp, r7
20000a50:	b004      	add	sp, #16
20000a52:	bd80      	pop	{r7, pc}

20000a54 <ascii_initialise>:

void ascii_initialise()
{
20000a54:	b580      	push	{r7, lr}
20000a56:	af00      	add	r7, sp, #0
	ascii_command(ASCII_FUNCTION_SET); /* Function Set, 2 rader och 5x8 punkter */
20000a58:	2038      	movs	r0, #56	; 0x38
20000a5a:	f7ff ff9b 	bl	20000994 <ascii_command>
	delay_mikro(39); /* Fördröj instruktionsspecifik fördröjning */
20000a5e:	2027      	movs	r0, #39	; 0x27
20000a60:	f000 f95b 	bl	20000d1a <delay_mikro>
	ascii_command(ASCII_DISPLAY_CTRL); /* Display Control, tänd display, tänd markör, makrören blinkar inte */
20000a64:	200e      	movs	r0, #14
20000a66:	f7ff ff95 	bl	20000994 <ascii_command>
	delay_mikro(39); /* Fördröj instruktionsspecifik fördröjning */
20000a6a:	2027      	movs	r0, #39	; 0x27
20000a6c:	f000 f955 	bl	20000d1a <delay_mikro>
	ascii_command(ASCII_CLEAR_DISPLAY); /* Clear Display */
20000a70:	2001      	movs	r0, #1
20000a72:	f7ff ff8f 	bl	20000994 <ascii_command>
	delay_milli(2); /* Fördröj instruktionsspecifik fördröjning, istället för 1.53 millisekunder */
20000a76:	2002      	movs	r0, #2
20000a78:	f000 f962 	bl	20000d40 <delay_milli>
	ascii_command(ASCII_ENTRY_MODE_SET); /* Entry Mode Set, "increment-mode" och ingen skift av adressbufferten */
20000a7c:	2006      	movs	r0, #6
20000a7e:	f7ff ff89 	bl	20000994 <ascii_command>
	delay_mikro(39); /* Fördröj instruktionsspecifik fördröjning */
20000a82:	2027      	movs	r0, #39	; 0x27
20000a84:	f000 f949 	bl	20000d1a <delay_mikro>
20000a88:	46c0      	nop			; (mov r8, r8)
20000a8a:	46bd      	mov	sp, r7
20000a8c:	bd80      	pop	{r7, pc}
20000a8e:	46c0      	nop			; (mov r8, r8)

20000a90 <keyboard_activate>:
	0xE, 0, 0xF, 0xD
};

/* Hjälprutiner */
static void keyboard_activate(uint8_t row)
{
20000a90:	b580      	push	{r7, lr}
20000a92:	b082      	sub	sp, #8
20000a94:	af00      	add	r7, sp, #0
20000a96:	0002      	movs	r2, r0
20000a98:	1dfb      	adds	r3, r7, #7
20000a9a:	701a      	strb	r2, [r3, #0]
	switch (row)
20000a9c:	1dfb      	adds	r3, r7, #7
20000a9e:	781b      	ldrb	r3, [r3, #0]
20000aa0:	2b02      	cmp	r3, #2
20000aa2:	d00d      	beq.n	20000ac0 <keyboard_activate+0x30>
20000aa4:	dc02      	bgt.n	20000aac <keyboard_activate+0x1c>
20000aa6:	2b01      	cmp	r3, #1
20000aa8:	d005      	beq.n	20000ab6 <keyboard_activate+0x26>
20000aaa:	e018      	b.n	20000ade <keyboard_activate+0x4e>
20000aac:	2b03      	cmp	r3, #3
20000aae:	d00c      	beq.n	20000aca <keyboard_activate+0x3a>
20000ab0:	2b04      	cmp	r3, #4
20000ab2:	d00f      	beq.n	20000ad4 <keyboard_activate+0x44>
20000ab4:	e013      	b.n	20000ade <keyboard_activate+0x4e>
	{
		case 1:
			GPIO_D->ODR_HIGH = 0x10;
20000ab6:	4b0e      	ldr	r3, [pc, #56]	; (20000af0 <keyboard_activate+0x60>)
20000ab8:	681b      	ldr	r3, [r3, #0]
20000aba:	2210      	movs	r2, #16
20000abc:	755a      	strb	r2, [r3, #21]
			break;
20000abe:	e012      	b.n	20000ae6 <keyboard_activate+0x56>
			
		case 2:
			GPIO_D->ODR_HIGH = 0x20;
20000ac0:	4b0b      	ldr	r3, [pc, #44]	; (20000af0 <keyboard_activate+0x60>)
20000ac2:	681b      	ldr	r3, [r3, #0]
20000ac4:	2220      	movs	r2, #32
20000ac6:	755a      	strb	r2, [r3, #21]
			break;
20000ac8:	e00d      	b.n	20000ae6 <keyboard_activate+0x56>
			
		case 3:
			GPIO_D->ODR_HIGH = 0x40;
20000aca:	4b09      	ldr	r3, [pc, #36]	; (20000af0 <keyboard_activate+0x60>)
20000acc:	681b      	ldr	r3, [r3, #0]
20000ace:	2240      	movs	r2, #64	; 0x40
20000ad0:	755a      	strb	r2, [r3, #21]
			break;
20000ad2:	e008      	b.n	20000ae6 <keyboard_activate+0x56>
			
		case 4:
			GPIO_D->ODR_HIGH = 0x80;
20000ad4:	4b06      	ldr	r3, [pc, #24]	; (20000af0 <keyboard_activate+0x60>)
20000ad6:	681b      	ldr	r3, [r3, #0]
20000ad8:	2280      	movs	r2, #128	; 0x80
20000ada:	755a      	strb	r2, [r3, #21]
			break;
20000adc:	e003      	b.n	20000ae6 <keyboard_activate+0x56>
			
		default:
			GPIO_D->ODR_HIGH = 0;
20000ade:	4b04      	ldr	r3, [pc, #16]	; (20000af0 <keyboard_activate+0x60>)
20000ae0:	681b      	ldr	r3, [r3, #0]
20000ae2:	2200      	movs	r2, #0
20000ae4:	755a      	strb	r2, [r3, #21]
	}
}
20000ae6:	46c0      	nop			; (mov r8, r8)
20000ae8:	46bd      	mov	sp, r7
20000aea:	b002      	add	sp, #8
20000aec:	bd80      	pop	{r7, pc}
20000aee:	46c0      	nop			; (mov r8, r8)
20000af0:	20000d88 	andcs	r0, r0, r8, lsl #27

20000af4 <keyboard_get_col>:

static uint8_t keyboard_get_col()
{
20000af4:	b580      	push	{r7, lr}
20000af6:	b082      	sub	sp, #8
20000af8:	af00      	add	r7, sp, #0
	uint8_t c = GPIO_D->IDR_HIGH;
20000afa:	4b13      	ldr	r3, [pc, #76]	; (20000b48 <keyboard_get_col+0x54>)
20000afc:	681a      	ldr	r2, [r3, #0]
20000afe:	1dfb      	adds	r3, r7, #7
20000b00:	7c52      	ldrb	r2, [r2, #17]
20000b02:	701a      	strb	r2, [r3, #0]
	if (c & 8)
20000b04:	1dfb      	adds	r3, r7, #7
20000b06:	781b      	ldrb	r3, [r3, #0]
20000b08:	2208      	movs	r2, #8
20000b0a:	4013      	ands	r3, r2
20000b0c:	d001      	beq.n	20000b12 <keyboard_get_col+0x1e>
		return 4;
20000b0e:	2304      	movs	r3, #4
20000b10:	e015      	b.n	20000b3e <keyboard_get_col+0x4a>
	if (c & 4)
20000b12:	1dfb      	adds	r3, r7, #7
20000b14:	781b      	ldrb	r3, [r3, #0]
20000b16:	2204      	movs	r2, #4
20000b18:	4013      	ands	r3, r2
20000b1a:	d001      	beq.n	20000b20 <keyboard_get_col+0x2c>
		return 3;
20000b1c:	2303      	movs	r3, #3
20000b1e:	e00e      	b.n	20000b3e <keyboard_get_col+0x4a>
	if (c & 2)
20000b20:	1dfb      	adds	r3, r7, #7
20000b22:	781b      	ldrb	r3, [r3, #0]
20000b24:	2202      	movs	r2, #2
20000b26:	4013      	ands	r3, r2
20000b28:	d001      	beq.n	20000b2e <keyboard_get_col+0x3a>
		return 2;
20000b2a:	2302      	movs	r3, #2
20000b2c:	e007      	b.n	20000b3e <keyboard_get_col+0x4a>
	if (c & 1)
20000b2e:	1dfb      	adds	r3, r7, #7
20000b30:	781b      	ldrb	r3, [r3, #0]
20000b32:	2201      	movs	r2, #1
20000b34:	4013      	ands	r3, r2
20000b36:	d001      	beq.n	20000b3c <keyboard_get_col+0x48>
		return 1;
20000b38:	2301      	movs	r3, #1
20000b3a:	e000      	b.n	20000b3e <keyboard_get_col+0x4a>
	return 0;
20000b3c:	2300      	movs	r3, #0
}
20000b3e:	0018      	movs	r0, r3
20000b40:	46bd      	mov	sp, r7
20000b42:	b002      	add	sp, #8
20000b44:	bd80      	pop	{r7, pc}
20000b46:	46c0      	nop			; (mov r8, r8)
20000b48:	20000d88 	andcs	r0, r0, r8, lsl #27

20000b4c <keyb>:

uint8_t keyb()
{
20000b4c:	b590      	push	{r4, r7, lr}
20000b4e:	b083      	sub	sp, #12
20000b50:	af00      	add	r7, sp, #0
	uint8_t row, col;
	for (row = 1; row <= ROWS; row++)
20000b52:	1dfb      	adds	r3, r7, #7
20000b54:	2201      	movs	r2, #1
20000b56:	701a      	strb	r2, [r3, #0]
20000b58:	e020      	b.n	20000b9c <keyb+0x50>
	{
		keyboard_activate(row);
20000b5a:	1dfb      	adds	r3, r7, #7
20000b5c:	781b      	ldrb	r3, [r3, #0]
20000b5e:	0018      	movs	r0, r3
20000b60:	f7ff ff96 	bl	20000a90 <keyboard_activate>
		col = keyboard_get_col();
20000b64:	1dbc      	adds	r4, r7, #6
20000b66:	f7ff ffc5 	bl	20000af4 <keyboard_get_col>
20000b6a:	0003      	movs	r3, r0
20000b6c:	7023      	strb	r3, [r4, #0]
		if (col) {
20000b6e:	1dbb      	adds	r3, r7, #6
20000b70:	781b      	ldrb	r3, [r3, #0]
20000b72:	2b00      	cmp	r3, #0
20000b74:	d00d      	beq.n	20000b92 <keyb+0x46>
			keyboard_activate(0);
20000b76:	2000      	movs	r0, #0
20000b78:	f7ff ff8a 	bl	20000a90 <keyboard_activate>
			return key[COLS * (row - 1) + (col - 1)];
20000b7c:	1dfb      	adds	r3, r7, #7
20000b7e:	781b      	ldrb	r3, [r3, #0]
20000b80:	3b01      	subs	r3, #1
20000b82:	009a      	lsls	r2, r3, #2
20000b84:	1dbb      	adds	r3, r7, #6
20000b86:	781b      	ldrb	r3, [r3, #0]
20000b88:	3b01      	subs	r3, #1
20000b8a:	18d3      	adds	r3, r2, r3
20000b8c:	4a09      	ldr	r2, [pc, #36]	; (20000bb4 <keyb+0x68>)
20000b8e:	5cd3      	ldrb	r3, [r2, r3]
20000b90:	e00c      	b.n	20000bac <keyb+0x60>
	for (row = 1; row <= ROWS; row++)
20000b92:	1dfb      	adds	r3, r7, #7
20000b94:	781a      	ldrb	r2, [r3, #0]
20000b96:	1dfb      	adds	r3, r7, #7
20000b98:	3201      	adds	r2, #1
20000b9a:	701a      	strb	r2, [r3, #0]
20000b9c:	1dfb      	adds	r3, r7, #7
20000b9e:	781b      	ldrb	r3, [r3, #0]
20000ba0:	2b04      	cmp	r3, #4
20000ba2:	d9da      	bls.n	20000b5a <keyb+0xe>
		}
	}
	keyboard_activate(0);
20000ba4:	2000      	movs	r0, #0
20000ba6:	f7ff ff73 	bl	20000a90 <keyboard_activate>
	return 0xFF;
20000baa:	23ff      	movs	r3, #255	; 0xff
20000bac:	0018      	movs	r0, r3
20000bae:	46bd      	mov	sp, r7
20000bb0:	b003      	add	sp, #12
20000bb2:	bd90      	pop	{r4, r7, pc}
20000bb4:	20000d90 	mulcs	r0, r0, sp

20000bb8 <init_app>:

void init_app()
{
20000bb8:	b580      	push	{r7, lr}
20000bba:	af00      	add	r7, sp, #0
	GPIO_D->MODER = 0x55005500; /* Ansluter en keypad till PortD0-7 och en annan till PortD8-15 */
20000bbc:	4b05      	ldr	r3, [pc, #20]	; (20000bd4 <init_app+0x1c>)
20000bbe:	681b      	ldr	r3, [r3, #0]
20000bc0:	4a05      	ldr	r2, [pc, #20]	; (20000bd8 <init_app+0x20>)
20000bc2:	601a      	str	r2, [r3, #0]
	GPIO_E->MODER = 0x55555555; /* Sätter hela Port E till utport */
20000bc4:	4b05      	ldr	r3, [pc, #20]	; (20000bdc <init_app+0x24>)
20000bc6:	681b      	ldr	r3, [r3, #0]
20000bc8:	4a05      	ldr	r2, [pc, #20]	; (20000be0 <init_app+0x28>)
20000bca:	601a      	str	r2, [r3, #0]
}
20000bcc:	46c0      	nop			; (mov r8, r8)
20000bce:	46bd      	mov	sp, r7
20000bd0:	bd80      	pop	{r7, pc}
20000bd2:	46c0      	nop			; (mov r8, r8)
20000bd4:	20000d88 	andcs	r0, r0, r8, lsl #27
20000bd8:	55005500 	strpl	r5, [r0, #-1280]	; 0xfffffb00
20000bdc:	20000d8c 	andcs	r0, r0, ip, lsl #27
20000be0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000be4 <main>:

int main(void)
{
20000be4:	b5b0      	push	{r4, r5, r7, lr}
20000be6:	b08a      	sub	sp, #40	; 0x28
20000be8:	af02      	add	r7, sp, #8
	init_app();
20000bea:	f7ff ffe5 	bl	20000bb8 <init_app>
	ascii_initialise();
20000bee:	f7ff ff31 	bl	20000a54 <ascii_initialise>
	graphic_initialise();
20000bf2:	f7ff fbd6 	bl	200003a2 <graphic_initialise>
	#ifndef SIMULATOR
		graphic_clear_screen();
	#endif
	
	Object ball = create_ball(0, 0, 0, 0);
20000bf6:	1d38      	adds	r0, r7, #4
20000bf8:	2300      	movs	r3, #0
20000bfa:	9300      	str	r3, [sp, #0]
20000bfc:	2300      	movs	r3, #0
20000bfe:	2200      	movs	r2, #0
20000c00:	2100      	movs	r1, #0
20000c02:	f7ff fd9f 	bl	20000744 <create_ball>
	uint8_t k;
	while(1) {
		ball.move(&ball);
20000c06:	1d3b      	adds	r3, r7, #4
20000c08:	691b      	ldr	r3, [r3, #16]
20000c0a:	1d3a      	adds	r2, r7, #4
20000c0c:	0010      	movs	r0, r2
20000c0e:	4798      	blx	r3
		delay_milli(40); /* 25 bilder per sekund */
20000c10:	2028      	movs	r0, #40	; 0x28
20000c12:	f000 f895 	bl	20000d40 <delay_milli>
		k = keyb();
20000c16:	251f      	movs	r5, #31
20000c18:	197c      	adds	r4, r7, r5
20000c1a:	f7ff ff97 	bl	20000b4c <keyb>
20000c1e:	0003      	movs	r3, r0
20000c20:	7023      	strb	r3, [r4, #0]
		switch(k) {
20000c22:	197b      	adds	r3, r7, r5
20000c24:	781b      	ldrb	r3, [r3, #0]
20000c26:	2b09      	cmp	r3, #9
20000c28:	d84a      	bhi.n	20000cc0 <main+0xdc>
20000c2a:	009a      	lsls	r2, r3, #2
20000c2c:	4b28      	ldr	r3, [pc, #160]	; (20000cd0 <main+0xec>)
20000c2e:	18d3      	adds	r3, r2, r3
20000c30:	681b      	ldr	r3, [r3, #0]
20000c32:	469f      	mov	pc, r3
			
			case 1:
				ball.set_vel(&ball, -2, -2);
20000c34:	1d3b      	adds	r3, r7, #4
20000c36:	695b      	ldr	r3, [r3, #20]
20000c38:	2202      	movs	r2, #2
20000c3a:	4254      	negs	r4, r2
20000c3c:	2202      	movs	r2, #2
20000c3e:	4251      	negs	r1, r2
20000c40:	1d38      	adds	r0, r7, #4
20000c42:	0022      	movs	r2, r4
20000c44:	4798      	blx	r3
				break;
20000c46:	e041      	b.n	20000ccc <main+0xe8>
			
			case 2:
				ball.set_vel(&ball, 0, -4);
20000c48:	1d3b      	adds	r3, r7, #4
20000c4a:	695b      	ldr	r3, [r3, #20]
20000c4c:	2204      	movs	r2, #4
20000c4e:	4252      	negs	r2, r2
20000c50:	1d38      	adds	r0, r7, #4
20000c52:	2100      	movs	r1, #0
20000c54:	4798      	blx	r3
				break;
20000c56:	e039      	b.n	20000ccc <main+0xe8>
				
			case 3:
				ball.set_vel(&ball, 2, -2);
20000c58:	1d3b      	adds	r3, r7, #4
20000c5a:	695b      	ldr	r3, [r3, #20]
20000c5c:	2202      	movs	r2, #2
20000c5e:	4252      	negs	r2, r2
20000c60:	1d38      	adds	r0, r7, #4
20000c62:	2102      	movs	r1, #2
20000c64:	4798      	blx	r3
				break;
20000c66:	e031      	b.n	20000ccc <main+0xe8>
				
			case 4:
				ball.set_vel(&ball, -4, 0);
20000c68:	1d3b      	adds	r3, r7, #4
20000c6a:	695b      	ldr	r3, [r3, #20]
20000c6c:	2204      	movs	r2, #4
20000c6e:	4251      	negs	r1, r2
20000c70:	1d38      	adds	r0, r7, #4
20000c72:	2200      	movs	r2, #0
20000c74:	4798      	blx	r3
				break;
20000c76:	e029      	b.n	20000ccc <main+0xe8>
				
			case 5:
				ball.set_vel(&ball, 0, 0);
20000c78:	1d3b      	adds	r3, r7, #4
20000c7a:	695b      	ldr	r3, [r3, #20]
20000c7c:	1d38      	adds	r0, r7, #4
20000c7e:	2200      	movs	r2, #0
20000c80:	2100      	movs	r1, #0
20000c82:	4798      	blx	r3
				break;
20000c84:	e022      	b.n	20000ccc <main+0xe8>
				
			case 6:
				ball.set_vel(&ball, 4, 0);
20000c86:	1d3b      	adds	r3, r7, #4
20000c88:	695b      	ldr	r3, [r3, #20]
20000c8a:	1d38      	adds	r0, r7, #4
20000c8c:	2200      	movs	r2, #0
20000c8e:	2104      	movs	r1, #4
20000c90:	4798      	blx	r3
				break;
20000c92:	e01b      	b.n	20000ccc <main+0xe8>
				
			case 7:
				ball.set_vel(&ball, -2, 2);
20000c94:	1d3b      	adds	r3, r7, #4
20000c96:	695b      	ldr	r3, [r3, #20]
20000c98:	2202      	movs	r2, #2
20000c9a:	4251      	negs	r1, r2
20000c9c:	1d38      	adds	r0, r7, #4
20000c9e:	2202      	movs	r2, #2
20000ca0:	4798      	blx	r3
				break;
20000ca2:	e013      	b.n	20000ccc <main+0xe8>
				
			case 8:
				ball.set_vel(&ball, 0, 4);
20000ca4:	1d3b      	adds	r3, r7, #4
20000ca6:	695b      	ldr	r3, [r3, #20]
20000ca8:	1d38      	adds	r0, r7, #4
20000caa:	2204      	movs	r2, #4
20000cac:	2100      	movs	r1, #0
20000cae:	4798      	blx	r3
				break;
20000cb0:	e00c      	b.n	20000ccc <main+0xe8>
				
			case 9:
				ball.set_vel(&ball, 2, 2);
20000cb2:	1d3b      	adds	r3, r7, #4
20000cb4:	695b      	ldr	r3, [r3, #20]
20000cb6:	1d38      	adds	r0, r7, #4
20000cb8:	2202      	movs	r2, #2
20000cba:	2102      	movs	r1, #2
20000cbc:	4798      	blx	r3
				break;
20000cbe:	e005      	b.n	20000ccc <main+0xe8>
			
			default:
				/* Om ingen knapp är nedtryckt, nollställ hastigheten */
				ball.set_vel(&ball, 0, 0);
20000cc0:	1d3b      	adds	r3, r7, #4
20000cc2:	695b      	ldr	r3, [r3, #20]
20000cc4:	1d38      	adds	r0, r7, #4
20000cc6:	2200      	movs	r2, #0
20000cc8:	2100      	movs	r1, #0
20000cca:	4798      	blx	r3
		ball.move(&ball);
20000ccc:	e79b      	b.n	20000c06 <main+0x22>
20000cce:	46c0      	nop			; (mov r8, r8)
20000cd0:	20000da0 	andcs	r0, r0, r0, lsr #27

20000cd4 <delay_250ns>:
};

static volatile struct _STK * const STK = (struct _STK *) 0xE000E010;

void delay_250ns()
{
20000cd4:	b580      	push	{r7, lr}
20000cd6:	af00      	add	r7, sp, #0
	STK->CTRL = 0;
20000cd8:	4b0c      	ldr	r3, [pc, #48]	; (20000d0c <delay_250ns+0x38>)
20000cda:	2200      	movs	r2, #0
20000cdc:	601a      	str	r2, [r3, #0]
	STK->LOAD = 168 / 4 - 1;
20000cde:	4b0b      	ldr	r3, [pc, #44]	; (20000d0c <delay_250ns+0x38>)
20000ce0:	2229      	movs	r2, #41	; 0x29
20000ce2:	605a      	str	r2, [r3, #4]
	STK->VAL = 0;
20000ce4:	4b09      	ldr	r3, [pc, #36]	; (20000d0c <delay_250ns+0x38>)
20000ce6:	2200      	movs	r2, #0
20000ce8:	609a      	str	r2, [r3, #8]
	STK->CTRL = 5;
20000cea:	4b08      	ldr	r3, [pc, #32]	; (20000d0c <delay_250ns+0x38>)
20000cec:	2205      	movs	r2, #5
20000cee:	601a      	str	r2, [r3, #0]
	
	while (!(STK->CTRL & 0x10000)) {
20000cf0:	46c0      	nop			; (mov r8, r8)
20000cf2:	4b06      	ldr	r3, [pc, #24]	; (20000d0c <delay_250ns+0x38>)
20000cf4:	681a      	ldr	r2, [r3, #0]
20000cf6:	2380      	movs	r3, #128	; 0x80
20000cf8:	025b      	lsls	r3, r3, #9
20000cfa:	4013      	ands	r3, r2
20000cfc:	d0f9      	beq.n	20000cf2 <delay_250ns+0x1e>
		/* Vänta tills bit 16 (COUNTFLAG) ettställs */
	}
	STK->CTRL = 0;
20000cfe:	4b03      	ldr	r3, [pc, #12]	; (20000d0c <delay_250ns+0x38>)
20000d00:	2200      	movs	r2, #0
20000d02:	601a      	str	r2, [r3, #0]
}
20000d04:	46c0      	nop			; (mov r8, r8)
20000d06:	46bd      	mov	sp, r7
20000d08:	bd80      	pop	{r7, pc}
20000d0a:	46c0      	nop			; (mov r8, r8)
20000d0c:	e000e010 	and	lr, r0, r0, lsl r0

20000d10 <delay_500ns>:

void delay_500ns()
{
20000d10:	b580      	push	{r7, lr}
20000d12:	af00      	add	r7, sp, #0
	#ifndef SIMULATOR
		delay_250ns();
		delay_250ns();
	#endif
}
20000d14:	46c0      	nop			; (mov r8, r8)
20000d16:	46bd      	mov	sp, r7
20000d18:	bd80      	pop	{r7, pc}

20000d1a <delay_mikro>:

void delay_mikro(uint32_t us)
{
20000d1a:	b580      	push	{r7, lr}
20000d1c:	b082      	sub	sp, #8
20000d1e:	af00      	add	r7, sp, #0
20000d20:	6078      	str	r0, [r7, #4]
	while (us > 0) {
20000d22:	e006      	b.n	20000d32 <delay_mikro+0x18>
		delay_500ns();
20000d24:	f7ff fff4 	bl	20000d10 <delay_500ns>
		delay_500ns();
20000d28:	f7ff fff2 	bl	20000d10 <delay_500ns>
		us--;
20000d2c:	687b      	ldr	r3, [r7, #4]
20000d2e:	3b01      	subs	r3, #1
20000d30:	607b      	str	r3, [r7, #4]
	while (us > 0) {
20000d32:	687b      	ldr	r3, [r7, #4]
20000d34:	2b00      	cmp	r3, #0
20000d36:	d1f5      	bne.n	20000d24 <delay_mikro+0xa>
	}
}
20000d38:	46c0      	nop			; (mov r8, r8)
20000d3a:	46bd      	mov	sp, r7
20000d3c:	b002      	add	sp, #8
20000d3e:	bd80      	pop	{r7, pc}

20000d40 <delay_milli>:

void delay_milli(uint32_t ms)
{
20000d40:	b580      	push	{r7, lr}
20000d42:	b082      	sub	sp, #8
20000d44:	af00      	add	r7, sp, #0
20000d46:	6078      	str	r0, [r7, #4]
	
	#ifdef SIMULATOR
		delay_mikro(ms); /* Kompenserar tidsfördröjningen för simulatorn */
20000d48:	687b      	ldr	r3, [r7, #4]
20000d4a:	0018      	movs	r0, r3
20000d4c:	f7ff ffe5 	bl	20000d1a <delay_mikro>
	#else
		delay_mikro(1000 * ms);
	#endif
20000d50:	46c0      	nop			; (mov r8, r8)
20000d52:	46bd      	mov	sp, r7
20000d54:	b002      	add	sp, #8
20000d56:	bd80      	pop	{r7, pc}

20000d58 <LCD_PAGES>:
20000d58:	 	addmi	r4, r0, r8

20000d59 <LCD_ADDS>:
20000d59:	 	mcrreq	0, 4, r8, r0, cr0

20000d5a <LCD_WIDTH>:
20000d5a:	 	streq	r4, [ip], #-128	; 0xffffff80

20000d5b <LCD_HEIGHT>:
20000d5b:	 	streq	r0, [r4], #-3136	; 0xfffff3c0

20000d5c <geometry_ball>:
20000d5c:	0004040c 	andeq	r0, r4, ip, lsl #8
20000d60:	01020001 	tsteq	r2, r1
20000d64:	01010100 	mrseq	r0, (UNDEF: 17)
20000d68:	02030102 	andeq	r0, r3, #-2147483648	; 0x80000000
20000d6c:	02010200 	andeq	r0, r1, #0, 4
20000d70:	03030202 	movweq	r0, #12802	; 0x3202
20000d74:	00020301 	andeq	r0, r2, r1, lsl #6
	...

20000d88 <GPIO_D>:
20000d88:	40020c00 	andmi	r0, r2, r0, lsl #24

20000d8c <GPIO_E>:
20000d8c:	40021000 	andmi	r1, r2, r0

20000d90 <key>:
20000d90:	0a030201 	beq	200c159c <STK+0xc07d4>
20000d94:	0b060504 	bleq	201821ac <STK+0x1813e4>
20000d98:	0c090807 	stceq	8, cr0, [r9], {7}
20000d9c:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000d6c <geometry_ball+0x10>
20000da0:	20000cc0 	andcs	r0, r0, r0, asr #25
20000da4:	20000c34 	andcs	r0, r0, r4, lsr ip
20000da8:	20000c48 	andcs	r0, r0, r8, asr #24
20000dac:	20000c58 	andcs	r0, r0, r8, asr ip
20000db0:	20000c68 	andcs	r0, r0, r8, ror #24
20000db4:	20000c78 	andcs	r0, r0, r8, ror ip
20000db8:	20000c86 	andcs	r0, r0, r6, lsl #25
20000dbc:	20000c94 	mulcs	r0, r4, ip
20000dc0:	20000ca4 	andcs	r0, r0, r4, lsr #25
20000dc4:	20000cb2 			; <UNDEFINED> instruction: 0x20000cb2

20000dc8 <STK>:
20000dc8:	e000e010 	and	lr, r0, r0, lsl r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000478 	andeq	r0, r0, r8, ror r4
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000017c 	andeq	r0, r0, ip, ror r1
      10:	0000c50c 	andeq	ip, r0, ip, lsl #10
      14:	00015600 	andeq	r5, r1, r0, lsl #12
      18:	00001000 	andeq	r1, r0, r0
      1c:	00054a20 	andeq	r4, r5, r0, lsr #20
      20:	00000000 	andeq	r0, r0, r0
      24:	01740200 	cmneq	r4, r0, lsl #4
      28:	0b020000 	bleq	80030 <startup-0x1ff7ffd0>
      2c:	00000035 	andeq	r0, r0, r5, lsr r0
      30:	00002503 	andeq	r2, r0, r3, lsl #10
      34:	08010400 	stmdaeq	r1, {sl}
      38:	00000084 	andeq	r0, r0, r4, lsl #1
      3c:	b2070204 	andlt	r0, r7, #4, 4	; 0x40000000
      40:	02000000 	andeq	r0, r0, #0
      44:	0000026e 	andeq	r0, r0, lr, ror #4
      48:	004e0d02 	subeq	r0, lr, r2, lsl #26
      4c:	04040000 	streq	r0, [r4], #-0
      50:	0000a507 	andeq	sl, r0, r7, lsl #10
      54:	07040400 	streq	r0, [r4, -r0, lsl #8]
      58:	000000a0 	andeq	r0, r0, r0, lsr #1
      5c:	86060104 	strhi	r0, [r6], -r4, lsl #2
      60:	04000000 	streq	r0, [r0], #-0
      64:	02130502 	andseq	r0, r3, #8388608	; 0x800000
      68:	04050000 	streq	r0, [r5], #-0
      6c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      70:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      74:	00000277 	andeq	r0, r0, r7, ror r2
      78:	16030206 	strne	r0, [r3], -r6, lsl #4
      7c:	00000099 	muleq	r0, r9, r0
      80:	00002e07 	andeq	r2, r0, r7, lsl #28
      84:	25180300 	ldrcs	r0, [r8, #-768]	; 0xfffffd00
      88:	00000000 	andeq	r0, r0, r0
      8c:	0000fa07 	andeq	pc, r0, r7, lsl #20
      90:	25190300 	ldrcs	r0, [r9, #-768]	; 0xfffffd00
      94:	01000000 	mrseq	r0, (UNDEF: 0)
      98:	03040800 	movweq	r0, #18432	; 0x4800
      9c:	0000b213 	andeq	fp, r0, r3, lsl r2
      a0:	44490900 	strbmi	r0, [r9], #-2304	; 0xfffff700
      a4:	15030052 	strne	r0, [r3, #-82]	; 0xffffffae
      a8:	00000043 	andeq	r0, r0, r3, asr #32
      ac:	0000780a 	andeq	r7, r0, sl, lsl #16
      b0:	02060000 	andeq	r0, r6, #0
      b4:	00d32003 	sbcseq	r2, r3, r3
      b8:	b9070000 	stmdblt	r7, {}	; <UNPREDICTABLE>
      bc:	03000001 	movweq	r0, #1
      c0:	00002522 	andeq	r2, r0, r2, lsr #10
      c4:	97070000 	strls	r0, [r7, -r0]
      c8:	03000000 	movweq	r0, #0
      cc:	00002523 	andeq	r2, r0, r3, lsr #10
      d0:	08000100 	stmdaeq	r0, {r8}
      d4:	ec1d0304 	ldc	3, cr0, [sp], {4}
      d8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      dc:	0052444f 	subseq	r4, r2, pc, asr #8
      e0:	00431f03 	subeq	r1, r3, r3, lsl #30
      e4:	b20a0000 	andlt	r0, sl, #0
      e8:	00000000 	andeq	r0, r0, r0
      ec:	0000000b 	andeq	r0, r0, fp
      f0:	0d031800 	stceq	8, cr1, [r3, #-0]
      f4:	00000135 	andeq	r0, r0, r5, lsr r1
      f8:	00004307 	andeq	r4, r0, r7, lsl #6
      fc:	430f0300 	movwmi	r0, #62208	; 0xf300
     100:	00000000 	andeq	r0, r0, r0
     104:	00007007 	andeq	r7, r0, r7
     108:	43100300 	tstmi	r0, #0, 6
     10c:	04000000 	streq	r0, [r0], #-0
     110:	00001a07 	andeq	r1, r0, r7, lsl #20
     114:	43110300 	tstmi	r1, #0, 6
     118:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     11c:	0001c807 	andeq	ip, r1, r7, lsl #16
     120:	43120300 	tstmi	r2, #0, 6
     124:	0c000000 	stceq	0, cr0, [r0], {-0}
     128:	0000990c 	andeq	r9, r0, ip, lsl #18
     12c:	d30c1000 	movwle	r1, #49152	; 0xc000
     130:	14000000 	strne	r0, [r0], #-0
     134:	00010200 	andeq	r0, r1, r0, lsl #4
     138:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
     13c:	000000ec 	andeq	r0, r0, ip, ror #1
     140:	0001350d 	andeq	r3, r1, sp, lsl #10
     144:	01c10e00 	biceq	r0, r1, r0, lsl #28
     148:	2a030000 	bcs	c0150 <startup-0x1ff3feb0>
     14c:	00000156 	andeq	r0, r0, r6, asr r1
     150:	0140040f 	cmpeq	r0, pc, lsl #8
     154:	50030000 	andpl	r0, r3, r0
     158:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     15c:	00000280 	andeq	r0, r0, r0, lsl #5
     160:	01562b03 	cmpeq	r6, r3, lsl #22
     164:	ed0e0000 	stc	0, cr0, [lr, #-0]
     168:	04000001 	streq	r0, [r0], #-1
     16c:	0000300d 	andeq	r3, r0, sp
     170:	02510e00 	subseq	r0, r1, #0, 28
     174:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     178:	00000030 	andeq	r0, r0, r0, lsr r0
     17c:	35010710 	strcc	r0, [r1, #-1808]	; 0xfffff8f0
     180:	01000000 	mrseq	r0, (UNDEF: 0)
     184:	0001b408 	andeq	fp, r1, r8, lsl #8
     188:	5f421100 	svcpl	0x00421100
     18c:	12400045 	subne	r0, r0, #69	; 0x45
     190:	0000014e 	andeq	r0, r0, lr, asr #2
     194:	00f41220 	rscseq	r1, r4, r0, lsr #4
     198:	12100000 	andsne	r0, r0, #0
     19c:	0000000f 	andeq	r0, r0, pc
     1a0:	01ce1208 	biceq	r1, lr, r8, lsl #4
     1a4:	12040000 	andne	r0, r4, #0
     1a8:	00000092 	muleq	r0, r2, r0
     1ac:	01031202 	tsteq	r3, r2, lsl #4
     1b0:	00010000 	andeq	r0, r1, r0
     1b4:	35010710 	strcc	r0, [r1, #-1808]	; 0xfffff8f0
     1b8:	01000000 	mrseq	r0, (UNDEF: 0)
     1bc:	0001e614 	andeq	lr, r1, r4, lsl r6
     1c0:	003c1200 	eorseq	r1, ip, r0, lsl #4
     1c4:	123f0000 	eorsne	r0, pc, #0
     1c8:	000001e0 	andeq	r0, r0, r0, ror #3
     1cc:	0022123e 	eoreq	r1, r2, lr, lsr r2
     1d0:	12400000 	subne	r0, r0, #0
     1d4:	00000077 	andeq	r0, r0, r7, ror r0
     1d8:	025c12b8 	subseq	r1, ip, #184, 4	; 0x8000000b
     1dc:	12c00000 	sbcne	r0, r0, #0
     1e0:	0000020a 	andeq	r0, r0, sl, lsl #4
     1e4:	49130080 	ldmdbmi	r3, {r7}
     1e8:	01000000 	mrseq	r0, (UNDEF: 0)
     1ec:	0000301f 	andeq	r3, r0, pc, lsl r0
     1f0:	58030500 	stmdapl	r3, {r8, sl}
     1f4:	1320000d 			; <UNDEFINED> instruction: 0x1320000d
     1f8:	000001d7 	ldrdeq	r0, [r0], -r7
     1fc:	00302001 	eorseq	r2, r0, r1
     200:	03050000 	movweq	r0, #20480	; 0x5000
     204:	20000d59 	andcs	r0, r0, r9, asr sp
     208:	00016614 	andeq	r6, r1, r4, lsl r6
     20c:	05210100 	streq	r0, [r1, #-256]!	; 0xffffff00
     210:	000d5a03 	andeq	r5, sp, r3, lsl #20
     214:	01711420 	cmneq	r1, r0, lsr #8
     218:	22010000 	andcs	r0, r1, #0
     21c:	0d5b0305 	ldcleq	3, cr0, [fp, #-20]	; 0xffffffec
     220:	6a152000 	bvs	548228 <startup-0x1fab7dd8>
     224:	01000000 	mrseq	r0, (UNDEF: 0)
     228:	0003fecf 	andeq	pc, r3, pc, asr #29
     22c:	00015c20 	andeq	r5, r1, r0, lsr #24
     230:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
     234:	16000002 	strne	r0, [r0], -r2
     238:	cf010078 	svcgt	0x00010078
     23c:	00000025 	andeq	r0, r0, r5, lsr #32
     240:	165f9102 	ldrbne	r9, [pc], -r2, lsl #2
     244:	cf010079 	svcgt	0x00010079
     248:	00000025 	andeq	r0, r0, r5, lsr #32
     24c:	165e9102 	ldrbne	r9, [lr], -r2, lsl #2
     250:	00746573 	rsbseq	r6, r4, r3, ror r5
     254:	0025cf01 	eoreq	ip, r5, r1, lsl #30
     258:	91020000 	mrsls	r0, (UNDEF: 2)
     25c:	0065175d 	rsbeq	r1, r5, sp, asr r7
     260:	d5010000 	strle	r0, [r1, #-0]
     264:	00000025 	andeq	r0, r0, r5, lsr #32
     268:	17649102 	strbne	r9, [r4, -r2, lsl #2]!
     26c:	000001e8 	andeq	r0, r0, r8, ror #3
     270:	0025d601 	eoreq	sp, r5, r1, lsl #12
     274:	91020000 	mrsls	r0, (UNDEF: 2)
     278:	042e1767 	strteq	r1, [lr], #-1895	; 0xfffff899
     27c:	db010000 	blle	40284 <startup-0x1ffbfd7c>
     280:	00000025 	andeq	r0, r0, r5, lsr #32
     284:	17669102 	strbne	r9, [r6, -r2, lsl #2]!
     288:	00000006 	andeq	r0, r0, r6
     28c:	0025dc01 	eoreq	sp, r5, r1, lsl #24
     290:	91020000 	mrsls	r0, (UNDEF: 2)
     294:	00151765 	andseq	r1, r5, r5, ror #14
     298:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
     29c:	00000025 	andeq	r0, r0, r5, lsr #32
     2a0:	00639102 	rsbeq	r9, r3, r2, lsl #2
     2a4:	00023e18 	andeq	r3, r2, r8, lsl lr
     2a8:	a2be0100 	adcsge	r0, lr, #0, 2
     2ac:	5c200003 	stcpl	0, cr0, [r0], #-12
     2b0:	01000000 	mrseq	r0, (UNDEF: 0)
     2b4:	02aa199c 	adceq	r1, sl, #156, 18	; 0x270000
     2b8:	ab010000 	blge	402c0 <startup-0x1ffbfd40>
     2bc:	20000338 	andcs	r0, r0, r8, lsr r3
     2c0:	0000006a 	andeq	r0, r0, sl, rrx
     2c4:	02fb9c01 	rscseq	r9, fp, #256	; 0x100
     2c8:	3e1a0000 	cdpcc	0, 1, cr0, cr10, cr0, {0}
     2cc:	5c200003 	stcpl	0, cr0, [r0], #-12
     2d0:	17000000 	strne	r0, [r0, -r0]
     2d4:	00000065 	andeq	r0, r0, r5, rrx
     2d8:	0025ad01 	eoreq	sl, r5, r1, lsl #26
     2dc:	91020000 	mrsls	r0, (UNDEF: 2)
     2e0:	03621a77 	cmneq	r2, #487424	; 0x77000
     2e4:	00242000 	eoreq	r2, r4, r0
     2e8:	611b0000 	tstvs	fp, r0
     2ec:	01006464 	tsteq	r0, r4, ror #8
     2f0:	000025b2 			; <UNDEFINED> instruction: 0x000025b2
     2f4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     2f8:	1c000000 	stcne	0, cr0, [r0], {-0}
     2fc:	00000053 	andeq	r0, r0, r3, asr r0
     300:	0025a401 	eoreq	sl, r5, r1, lsl #8
     304:	030e0000 	movweq	r0, #57344	; 0xe000
     308:	002a2000 	eoreq	r2, sl, r0
     30c:	9c010000 	stcls	0, cr0, [r1], {-0}
     310:	00000323 	andeq	r0, r0, r3, lsr #6
     314:	00042e1d 	andeq	r2, r4, sp, lsl lr
     318:	25a40100 	strcs	r0, [r4, #256]!	; 0x100
     31c:	02000000 	andeq	r0, r0, #0
     320:	1e007791 	mcrne	7, 0, r7, cr0, cr1, {4}
     324:	000001f7 	strdeq	r0, [r0], -r7
     328:	02c89b01 	sbceq	r9, r8, #1024	; 0x400
     32c:	00462000 	subeq	r2, r6, r0
     330:	9c010000 	stcls	0, cr0, [r1], {-0}
     334:	00000355 	andeq	r0, r0, r5, asr r3
     338:	0000601d 	andeq	r6, r0, sp, lsl r0
     33c:	259b0100 	ldrcs	r0, [fp, #256]	; 0x100
     340:	02000000 	andeq	r0, r0, #0
     344:	2e1d7791 	mrccs	7, 0, r7, cr13, cr1, {4}
     348:	01000004 	tsteq	r0, r4
     34c:	0000259b 	muleq	r0, fp, r5
     350:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     354:	02941e00 	addseq	r1, r4, #0, 28
     358:	93010000 	movwls	r0, #4096	; 0x1000
     35c:	20000288 	andcs	r0, r0, r8, lsl #5
     360:	00000040 	andeq	r0, r0, r0, asr #32
     364:	03879c01 	orreq	r9, r7, #256	; 0x100
     368:	a21d0000 	andsge	r0, sp, #0
     36c:	01000002 	tsteq	r0, r2
     370:	00002593 	muleq	r0, r3, r5
     374:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     378:	00042e1d 	andeq	r2, r4, sp, lsl lr
     37c:	25930100 	ldrcs	r0, [r3, #256]	; 0x100
     380:	02000000 	andeq	r0, r0, #0
     384:	1e007691 	mcrne	6, 0, r7, cr0, cr1, {4}
     388:	0000021d 	andeq	r0, r0, sp, lsl r2
     38c:	02047c01 	andeq	r7, r4, #256	; 0x100
     390:	00842000 	addeq	r2, r4, r0
     394:	9c010000 	stcls	0, cr0, [r1], {-0}
     398:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
     39c:	0000361d 	andeq	r3, r0, sp, lsl r6
     3a0:	257c0100 	ldrbcs	r0, [ip, #-256]!	; 0xffffff00
     3a4:	02000000 	andeq	r0, r0, #0
     3a8:	2e1d7791 	mrccs	7, 0, r7, cr13, cr1, {4}
     3ac:	01000004 	tsteq	r0, r4
     3b0:	0000257c 	andeq	r2, r0, ip, ror r5
     3b4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     3b8:	02871c00 	addeq	r1, r7, #0, 24
     3bc:	63010000 	movwvs	r0, #4096	; 0x1000
     3c0:	00000025 	andeq	r0, r0, r5, lsr #32
     3c4:	20000174 	andcs	r0, r0, r4, ror r1
     3c8:	00000090 	muleq	r0, r0, r0
     3cc:	03ee9c01 	mvneq	r9, #256	; 0x100
     3d0:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     3d4:	01000004 	tsteq	r0, r4
     3d8:	00002563 	andeq	r2, r0, r3, ror #10
     3dc:	6f910200 	svcvs	0x00910200
     3e0:	0076721b 	rsbseq	r7, r6, fp, lsl r2
     3e4:	00256c01 	eoreq	r6, r5, r1, lsl #24
     3e8:	91020000 	mrsls	r0, (UNDEF: 2)
     3ec:	2b1f0077 	blcs	7c05d0 <startup-0x1f83fa30>
     3f0:	01000002 	tsteq	r0, r2
     3f4:	0001064d 	andeq	r0, r1, sp, asr #12
     3f8:	00006e20 	andeq	r6, r0, r0, lsr #28
     3fc:	1e9c0100 	fmlnee	f0, f4, f0
     400:	00000108 	andeq	r0, r0, r8, lsl #2
     404:	00ac3501 	adceq	r3, ip, r1, lsl #10
     408:	005a2000 	subseq	r2, sl, r0
     40c:	9c010000 	stcls	0, cr0, [r1], {-0}
     410:	00000423 	andeq	r0, r0, r3, lsr #8
     414:	00042e1d 	andeq	r2, r4, sp, lsl lr
     418:	25350100 	ldrcs	r0, [r5, #-256]!	; 0xffffff00
     41c:	02000000 	andeq	r0, r0, #0
     420:	20007791 	mulcs	r0, r1, r7
     424:	00000122 	andeq	r0, r0, r2, lsr #2
     428:	00582d01 	subseq	r2, r8, r1, lsl #26
     42c:	00542000 	subseq	r2, r4, r0
     430:	9c010000 	stcls	0, cr0, [r1], {-0}
     434:	00000451 	andeq	r0, r0, r1, asr r4
     438:	01007816 	tsteq	r0, r6, lsl r8
     43c:	0000252d 	andeq	r2, r0, sp, lsr #10
     440:	6f910200 	svcvs	0x00910200
     444:	0100631b 	tsteq	r0, fp, lsl r3
     448:	0000252f 	andeq	r2, r0, pc, lsr #10
     44c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     450:	01392100 	teqeq	r9, r0, lsl #2
     454:	25010000 	strcs	r0, [r1, #-0]
     458:	20000010 	andcs	r0, r0, r0, lsl r0
     45c:	00000048 	andeq	r0, r0, r8, asr #32
     460:	78169c01 	ldmdavc	r6, {r0, sl, fp, ip, pc}
     464:	25250100 	strcs	r0, [r5, #-256]!	; 0xffffff00
     468:	02000000 	andeq	r0, r0, #0
     46c:	631b6f91 	tstvs	fp, #580	; 0x244
     470:	25270100 	strcs	r0, [r7, #-256]!	; 0xffffff00
     474:	02000000 	andeq	r0, r0, #0
     478:	00007791 	muleq	r0, r1, r7
     47c:	000003fe 	strdeq	r0, [r0], -lr
     480:	01f60004 	mvnseq	r0, r4
     484:	01040000 	mrseq	r0, (UNDEF: 4)
     488:	0000017c 	andeq	r0, r0, ip, ror r1
     48c:	00033c0c 	andeq	r3, r3, ip, lsl #24
     490:	00015600 	andeq	r5, r1, r0, lsl #12
     494:	00055c00 	andeq	r5, r5, r0, lsl #24
     498:	00026420 	andeq	r6, r2, r0, lsr #8
     49c:	00014c00 	andeq	r4, r1, r0, lsl #24
     4a0:	01740200 	cmneq	r4, r0, lsl #4
     4a4:	0b020000 	bleq	804ac <startup-0x1ff7fb54>
     4a8:	00000035 	andeq	r0, r0, r5, lsr r0
     4ac:	00002503 	andeq	r2, r0, r3, lsl #10
     4b0:	08010400 	stmdaeq	r1, {sl}
     4b4:	00000084 	andeq	r0, r0, r4, lsl #1
     4b8:	b2070204 	andlt	r0, r7, #4, 4	; 0x40000000
     4bc:	02000000 	andeq	r0, r0, #0
     4c0:	0000026e 	andeq	r0, r0, lr, ror #4
     4c4:	004e0d02 	subeq	r0, lr, r2, lsl #26
     4c8:	04040000 	streq	r0, [r4], #-0
     4cc:	0000a507 	andeq	sl, r0, r7, lsl #10
     4d0:	07040400 	streq	r0, [r4, -r0, lsl #8]
     4d4:	000000a0 	andeq	r0, r0, r0, lsr #1
     4d8:	00017502 	andeq	r7, r1, r2, lsl #10
     4dc:	67100200 	ldrvs	r0, [r0, -r0, lsl #4]
     4e0:	04000000 	streq	r0, [r0], #-0
     4e4:	00860601 	addeq	r0, r6, r1, lsl #12
     4e8:	02040000 	andeq	r0, r4, #0
     4ec:	00021305 	andeq	r1, r2, r5, lsl #6
     4f0:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
     4f4:	00746e69 	rsbseq	r6, r4, r9, ror #28
     4f8:	77050404 	strvc	r0, [r5, -r4, lsl #8]
     4fc:	06000002 	streq	r0, [r0], -r2
     500:	a00d0302 	andge	r0, sp, r2, lsl #6
     504:	07000000 	streq	r0, [r0, -r0]
     508:	0f030078 	svceq	0x00030078
     50c:	00000025 	andeq	r0, r0, r5, lsr #32
     510:	00790700 	rsbseq	r0, r9, r0, lsl #14
     514:	00251003 	eoreq	r1, r5, r3
     518:	00010000 	andeq	r0, r1, r0
     51c:	0002e602 	andeq	lr, r2, r2, lsl #12
     520:	83120300 	tsthi	r2, #0, 6
     524:	06000000 	streq	r0, [r0], -r0
     528:	e414032b 	ldr	r0, [r4], #-811	; 0xfffffcd5
     52c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     530:	000002d3 	ldrdeq	r0, [r0], -r3
     534:	00251603 	eoreq	r1, r5, r3, lsl #12
     538:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     53c:	00000377 	andeq	r0, r0, r7, ror r3
     540:	00251703 	eoreq	r1, r5, r3, lsl #14
     544:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     548:	000002ec 	andeq	r0, r0, ip, ror #5
     54c:	00251803 	eoreq	r1, r5, r3, lsl #16
     550:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     554:	000002d7 	ldrdeq	r0, [r0], -r7
     558:	00e41903 	rsceq	r1, r4, r3, lsl #18
     55c:	00030000 	andeq	r0, r3, r0
     560:	0000a009 	andeq	sl, r0, r9
     564:	0000f400 	andeq	pc, r0, r0, lsl #8
     568:	004e0a00 	subeq	r0, lr, r0, lsl #20
     56c:	00130000 	andseq	r0, r3, r0
     570:	0002f302 	andeq	pc, r2, r2, lsl #6
     574:	ab1b0300 	blge	6c117c <startup-0x1f93ee84>
     578:	03000000 	movweq	r0, #0
     57c:	000000f4 	strdeq	r0, [r0], -r4
     580:	0003350b 	andeq	r3, r3, fp, lsl #10
     584:	1d031800 	stcne	8, cr1, [r3, #-0]
     588:	0000017d 	andeq	r0, r0, sp, ror r1
     58c:	0002c408 	andeq	ip, r2, r8, lsl #8
     590:	7d1f0300 	ldcvc	3, cr0, [pc, #-0]	; 598 <startup-0x1ffffa68>
     594:	00000001 	andeq	r0, r0, r1
     598:	0002cd08 	andeq	ip, r2, r8, lsl #26
     59c:	5c200300 	stcpl	3, cr0, [r0], #-0
     5a0:	04000000 	streq	r0, [r0], #-0
     5a4:	00036308 	andeq	r6, r3, r8, lsl #6
     5a8:	5c210300 	stcpl	3, cr0, [r1], #-0
     5ac:	05000000 	streq	r0, [r0, #-0]
     5b0:	00030b08 	andeq	r0, r3, r8, lsl #22
     5b4:	5c220300 	stcpl	3, cr0, [r2], #-0
     5b8:	06000000 	streq	r0, [r0], -r0
     5bc:	00031108 	andeq	r1, r3, r8, lsl #2
     5c0:	5c230300 	stcpl	3, cr0, [r3], #-0
     5c4:	07000000 	streq	r0, [r0, -r0]
     5c8:	0002bf08 	andeq	fp, r2, r8, lsl #30
     5cc:	94240300 	strtls	r0, [r4], #-768	; 0xfffffd00
     5d0:	08000001 	stmdaeq	r0, {r0}
     5d4:	00013308 	andeq	r3, r1, r8, lsl #6
     5d8:	94250300 	strtls	r0, [r5], #-768	; 0xfffffd00
     5dc:	0c000001 	stceq	0, cr0, [r0], {1}
     5e0:	00031708 	andeq	r1, r3, r8, lsl #14
     5e4:	94260300 	strtls	r0, [r6], #-768	; 0xfffffd00
     5e8:	10000001 	andne	r0, r0, r1
     5ec:	0002de08 	andeq	sp, r2, r8, lsl #28
     5f0:	af270300 	svcge	0x00270300
     5f4:	14000001 	strne	r0, [r0], #-1
     5f8:	f4040c00 			; <UNDEFINED> instruction: 0xf4040c00
     5fc:	0d000000 	stceq	0, cr0, [r0, #-0]
     600:	0000018e 	andeq	r0, r0, lr, lsl #3
     604:	00018e0e 	andeq	r8, r1, lr, lsl #28
     608:	040c0000 	streq	r0, [ip], #-0
     60c:	00000104 	andeq	r0, r0, r4, lsl #2
     610:	0183040c 	orreq	r0, r3, ip, lsl #8
     614:	af0d0000 	svcge	0x000d0000
     618:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     61c:	0000018e 	andeq	r0, r0, lr, lsl #3
     620:	00005c0e 	andeq	r5, r0, lr, lsl #24
     624:	005c0e00 	subseq	r0, ip, r0, lsl #28
     628:	0c000000 	stceq	0, cr0, [r0], {-0}
     62c:	00019a04 	andeq	r9, r1, r4, lsl #20
     630:	03350200 	teqeq	r5, #0, 4
     634:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
     638:	00000104 	andeq	r0, r0, r4, lsl #2
     63c:	16040206 	strne	r0, [r4], -r6, lsl #4
     640:	000001e1 	andeq	r0, r0, r1, ror #3
     644:	00002e08 	andeq	r2, r0, r8, lsl #28
     648:	25180400 	ldrcs	r0, [r8, #-1024]	; 0xfffffc00
     64c:	00000000 	andeq	r0, r0, r0
     650:	0000fa08 	andeq	pc, r0, r8, lsl #20
     654:	25190400 	ldrcs	r0, [r9, #-1024]	; 0xfffffc00
     658:	01000000 	mrseq	r0, (UNDEF: 0)
     65c:	04040f00 	streq	r0, [r4], #-3840	; 0xfffff100
     660:	0001fa13 	andeq	pc, r1, r3, lsl sl	; <UNPREDICTABLE>
     664:	44491000 	strbmi	r1, [r9], #-0
     668:	15040052 	strne	r0, [r4, #-82]	; 0xffffffae
     66c:	00000043 	andeq	r0, r0, r3, asr #32
     670:	0001c011 	andeq	ip, r1, r1, lsl r0
     674:	02060000 	andeq	r0, r6, #0
     678:	021b2004 	andseq	r2, fp, #4
     67c:	b9080000 	stmdblt	r8, {}	; <UNPREDICTABLE>
     680:	04000001 	streq	r0, [r0], #-1
     684:	00002522 	andeq	r2, r0, r2, lsr #10
     688:	97080000 	strls	r0, [r8, -r0]
     68c:	04000000 	streq	r0, [r0], #-0
     690:	00002523 	andeq	r2, r0, r3, lsr #10
     694:	0f000100 	svceq	0x00000100
     698:	341d0404 	ldrcc	r0, [sp], #-1028	; 0xfffffbfc
     69c:	10000002 	andne	r0, r0, r2
     6a0:	0052444f 	subseq	r4, r2, pc, asr #8
     6a4:	00431f04 	subeq	r1, r3, r4, lsl #30
     6a8:	fa110000 	blx	4406b0 <startup-0x1fbbf950>
     6ac:	00000001 	andeq	r0, r0, r1
     6b0:	0000000b 	andeq	r0, r0, fp
     6b4:	0d041800 	stceq	8, cr1, [r4, #-0]
     6b8:	0000027d 	andeq	r0, r0, sp, ror r2
     6bc:	00004308 	andeq	r4, r0, r8, lsl #6
     6c0:	430f0400 	movwmi	r0, #62464	; 0xf400
     6c4:	00000000 	andeq	r0, r0, r0
     6c8:	00007008 	andeq	r7, r0, r8
     6cc:	43100400 	tstmi	r0, #0, 8
     6d0:	04000000 	streq	r0, [r0], #-0
     6d4:	00001a08 	andeq	r1, r0, r8, lsl #20
     6d8:	43110400 	tstmi	r1, #0, 8
     6dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     6e0:	0001c808 	andeq	ip, r1, r8, lsl #16
     6e4:	43120400 	tstmi	r2, #0, 8
     6e8:	0c000000 	stceq	0, cr0, [r0], {-0}
     6ec:	0001e112 	andeq	lr, r1, r2, lsl r1
     6f0:	1b121000 	blne	4846f8 <startup-0x1fb7b908>
     6f4:	14000002 	strne	r0, [r0], #-2
     6f8:	00010200 	andeq	r0, r1, r0, lsl #4
     6fc:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
     700:	00000234 	andeq	r0, r0, r4, lsr r2
     704:	00027d13 	andeq	r7, r2, r3, lsl sp
     708:	01c11400 	biceq	r1, r1, r0, lsl #8
     70c:	2a040000 	bcs	100714 <startup-0x1feff8ec>
     710:	0000029e 	muleq	r0, lr, r2
     714:	0288040c 	addeq	r0, r8, #12, 8	; 0xc000000
     718:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
     71c:	14000002 	strne	r0, [r0], #-2
     720:	00000280 	andeq	r0, r0, r0, lsl #5
     724:	029e2b04 	addseq	r2, lr, #4, 22	; 0x1000
     728:	ed140000 	ldc	0, cr0, [r4, #-0]
     72c:	05000001 	streq	r0, [r0, #-1]
     730:	0000300d 	andeq	r3, r0, sp
     734:	02511400 	subseq	r1, r1, #0, 8
     738:	0e050000 	cdpeq	0, 0, cr0, cr5, cr0, {0}
     73c:	00000030 	andeq	r0, r0, r0, lsr r0
     740:	00036915 	andeq	r6, r3, r5, lsl r9
     744:	ff0a0100 			; <UNDEFINED> instruction: 0xff0a0100
     748:	05000000 	streq	r0, [r0, #-0]
     74c:	000d5c03 	andeq	r5, sp, r3, lsl #24
     750:	03291620 			; <UNDEFINED> instruction: 0x03291620
     754:	3b010000 	blcc	4075c <startup-0x1ffbf8a4>
     758:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     75c:	20000744 	andcs	r0, r0, r4, asr #14
     760:	0000007c 	andeq	r0, r0, ip, ror r0
     764:	03279c01 			; <UNDEFINED> instruction: 0x03279c01
     768:	cd170000 	ldcgt	0, cr0, [r7, #-0]
     76c:	01000002 	tsteq	r0, r2
     770:	00005c3b 	andeq	r5, r0, fp, lsr ip
     774:	6b910200 	blvs	fe440f7c <STK+0xde4401b4>
     778:	00036317 	andeq	r6, r3, r7, lsl r3
     77c:	5c3b0100 	ldfpls	f0, [fp], #-0
     780:	02000000 	andeq	r0, r0, #0
     784:	0b176a91 	bleq	5db1d0 <startup-0x1fa24e30>
     788:	01000003 	tsteq	r0, r3
     78c:	00005c3b 	andeq	r5, r0, fp, lsr ip
     790:	69910200 	ldmibvs	r1, {r9}
     794:	00031117 	andeq	r1, r3, r7, lsl r1
     798:	5c3b0100 	ldfpls	f0, [fp], #-0
     79c:	02000000 	andeq	r0, r0, #0
     7a0:	18000091 	stmdane	r0, {r0, r4, r7}
     7a4:	000002fc 	strdeq	r0, [r0], -ip
     7a8:	07143501 	ldreq	r3, [r4, -r1, lsl #10]
     7ac:	00302000 	eorseq	r2, r0, r0
     7b0:	9c010000 	stcls	0, cr0, [r1], {-0}
     7b4:	00000367 	andeq	r0, r0, r7, ror #6
     7b8:	00038e17 	andeq	r8, r3, r7, lsl lr
     7bc:	67350100 	ldrvs	r0, [r5, -r0, lsl #2]!
     7c0:	02000003 	andeq	r0, r0, #3
     7c4:	0b177491 	bleq	5dda10 <startup-0x1fa225f0>
     7c8:	01000003 	tsteq	r0, r3
     7cc:	00005c35 	andeq	r5, r0, r5, lsr ip
     7d0:	73910200 	orrsvc	r0, r1, #0, 4
     7d4:	00031117 	andeq	r1, r3, r7, lsl r1
     7d8:	5c350100 	ldfpls	f0, [r5], #-0
     7dc:	02000000 	andeq	r0, r0, #0
     7e0:	0c007291 	sfmeq	f7, 4, [r0], {145}	; 0x91
     7e4:	0001b504 	andeq	fp, r1, r4, lsl #10
     7e8:	03891900 	orreq	r1, r9, #0, 18
     7ec:	21010000 	mrscs	r0, (UNDEF: 1)
     7f0:	20000650 	andcs	r0, r0, r0, asr r6
     7f4:	000000c4 	andeq	r0, r0, r4, asr #1
     7f8:	03919c01 	orrseq	r9, r1, #256	; 0x100
     7fc:	8e170000 	cdphi	0, 1, cr0, cr7, cr0, {0}
     800:	01000003 	tsteq	r0, r3
     804:	00036721 	andeq	r6, r3, r1, lsr #14
     808:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     80c:	031c1900 	tsteq	ip, #0, 18
     810:	1a010000 	bne	40818 <startup-0x1ffbf7e8>
     814:	200005d6 	ldrdcs	r0, [r0], -r6
     818:	0000007a 	andeq	r0, r0, sl, ror r0
     81c:	03cb9c01 	biceq	r9, fp, #256	; 0x100
     820:	8e170000 	cdphi	0, 1, cr0, cr7, cr0, {0}
     824:	01000003 	tsteq	r0, r3
     828:	0003671a 	andeq	r6, r3, sl, lsl r7
     82c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     830:	0005de1a 	andeq	sp, r5, sl, lsl lr
     834:	00006a20 	andeq	r6, r0, r0, lsr #20
     838:	00691b00 	rsbeq	r1, r9, r0, lsl #22
     83c:	00251c01 	eoreq	r1, r5, r1, lsl #24
     840:	91020000 	mrsls	r0, (UNDEF: 2)
     844:	1c00006f 	stcne	0, cr0, [r0], {111}	; 0x6f
     848:	0000037d 	andeq	r0, r0, sp, ror r3
     84c:	055c1301 	ldrbeq	r1, [ip, #-769]	; 0xfffffcff
     850:	007a2000 	rsbseq	r2, sl, r0
     854:	9c010000 	stcls	0, cr0, [r1], {-0}
     858:	00038e17 	andeq	r8, r3, r7, lsl lr
     85c:	67130100 	ldrvs	r0, [r3, -r0, lsl #2]
     860:	02000003 	andeq	r0, r0, #3
     864:	641a6491 	ldrvs	r6, [sl], #-1169	; 0xfffffb6f
     868:	6a200005 	bvs	800884 <startup-0x1f7ff77c>
     86c:	1b000000 	blne	874 <startup-0x1ffff78c>
     870:	15010069 	strne	r0, [r1, #-105]	; 0xffffff97
     874:	00000025 	andeq	r0, r0, r5, lsr #32
     878:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     87c:	01700000 	cmneq	r0, r0
     880:	00040000 	andeq	r0, r4, r0
     884:	0000037b 	andeq	r0, r0, fp, ror r3
     888:	017c0104 	cmneq	ip, r4, lsl #2
     88c:	950c0000 	strls	r0, [ip, #-0]
     890:	56000003 	strpl	r0, [r0], -r3
     894:	2b000001 	blcs	8a0 <startup-0x1ffff760>
     898:	02000002 	andeq	r0, r0, #2
     89c:	00000174 	andeq	r0, r0, r4, ror r1
     8a0:	00280b01 	eoreq	r0, r8, r1, lsl #22
     8a4:	01030000 	mrseq	r0, (UNDEF: 3)
     8a8:	00008408 	andeq	r8, r0, r8, lsl #8
     8ac:	07020300 	streq	r0, [r2, -r0, lsl #6]
     8b0:	000000b2 	strheq	r0, [r0], -r2
     8b4:	00026e02 	andeq	r6, r2, r2, lsl #28
     8b8:	410d0100 	mrsmi	r0, (UNDEF: 29)
     8bc:	03000000 	movweq	r0, #0
     8c0:	00a50704 	adceq	r0, r5, r4, lsl #14
     8c4:	04030000 	streq	r0, [r3], #-0
     8c8:	0000a007 	andeq	sl, r0, r7
     8cc:	06010300 	streq	r0, [r1], -r0, lsl #6
     8d0:	00000086 	andeq	r0, r0, r6, lsl #1
     8d4:	13050203 	movwne	r0, #20995	; 0x5203
     8d8:	04000002 	streq	r0, [r0], #-2
     8dc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     8e0:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     8e4:	00027705 	andeq	r7, r2, r5, lsl #14
     8e8:	02020500 	andeq	r0, r2, #0, 10
     8ec:	00008c16 	andeq	r8, r0, r6, lsl ip
     8f0:	002e0600 	eoreq	r0, lr, r0, lsl #12
     8f4:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     8f8:	0000001d 	andeq	r0, r0, sp, lsl r0
     8fc:	00fa0600 	rscseq	r0, sl, r0, lsl #12
     900:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     904:	0000001d 	andeq	r0, r0, sp, lsl r0
     908:	04070001 	streq	r0, [r7], #-1
     90c:	00a51302 	adceq	r1, r5, r2, lsl #6
     910:	49080000 	stmdbmi	r8, {}	; <UNPREDICTABLE>
     914:	02005244 	andeq	r5, r0, #68, 4	; 0x40000004
     918:	00003615 	andeq	r3, r0, r5, lsl r6
     91c:	006b0900 	rsbeq	r0, fp, r0, lsl #18
     920:	05000000 	streq	r0, [r0, #-0]
     924:	c6200202 	strtgt	r0, [r0], -r2, lsl #4
     928:	06000000 	streq	r0, [r0], -r0
     92c:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
     930:	001d2202 	andseq	r2, sp, r2, lsl #4
     934:	06000000 	streq	r0, [r0], -r0
     938:	00000097 	muleq	r0, r7, r0
     93c:	001d2302 	andseq	r2, sp, r2, lsl #6
     940:	00010000 	andeq	r0, r1, r0
     944:	1d020407 	cfstrsne	mvf0, [r2, #-28]	; 0xffffffe4
     948:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     94c:	52444f08 	subpl	r4, r4, #8, 30
     950:	361f0200 	ldrcc	r0, [pc], -r0, lsl #4
     954:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     958:	000000a5 	andeq	r0, r0, r5, lsr #1
     95c:	00000a00 	andeq	r0, r0, r0, lsl #20
     960:	02180000 	andseq	r0, r8, #0
     964:	0001280d 	andeq	r2, r1, sp, lsl #16
     968:	00430600 	subeq	r0, r3, r0, lsl #12
     96c:	0f020000 	svceq	0x00020000
     970:	00000036 	andeq	r0, r0, r6, lsr r0
     974:	00700600 	rsbseq	r0, r0, r0, lsl #12
     978:	10020000 	andne	r0, r2, r0
     97c:	00000036 	andeq	r0, r0, r6, lsr r0
     980:	001a0604 	andseq	r0, sl, r4, lsl #12
     984:	11020000 	mrsne	r0, (UNDEF: 2)
     988:	00000036 	andeq	r0, r0, r6, lsr r0
     98c:	01c80608 	biceq	r0, r8, r8, lsl #12
     990:	12020000 	andne	r0, r2, #0
     994:	00000036 	andeq	r0, r0, r6, lsr r0
     998:	008c0b0c 	addeq	r0, ip, ip, lsl #22
     99c:	0b100000 	bleq	4009a4 <startup-0x1fbff65c>
     9a0:	000000c6 	andeq	r0, r0, r6, asr #1
     9a4:	01020014 	tsteq	r2, r4, lsl r0
     9a8:	02000000 	andeq	r0, r0, #0
     9ac:	0000df28 	andeq	sp, r0, r8, lsr #30
     9b0:	01280c00 			; <UNDEFINED> instruction: 0x01280c00
     9b4:	c10d0000 	mrsgt	r0, (UNDEF: 13)
     9b8:	02000001 	andeq	r0, r0, #1
     9bc:	0001492a 	andeq	r4, r1, sl, lsr #18
     9c0:	33040e00 	movwcc	r0, #19968	; 0x4e00
     9c4:	0f000001 	svceq	0x00000001
     9c8:	00000143 	andeq	r0, r0, r3, asr #2
     9cc:	0002800d 	andeq	r8, r2, sp
     9d0:	492b0200 	stmdbmi	fp!, {r9}
     9d4:	10000001 	andne	r0, r0, r1
     9d8:	00000138 	andeq	r0, r0, r8, lsr r1
     9dc:	03050803 	movweq	r0, #22531	; 0x5803
     9e0:	20000d88 	andcs	r0, r0, r8, lsl #27
     9e4:	00014e10 	andeq	r4, r1, r0, lsl lr
     9e8:	05090300 	streq	r0, [r9, #-768]	; 0xfffffd00
     9ec:	000d8c03 	andeq	r8, sp, r3, lsl #24
     9f0:	03870020 	orreq	r0, r7, #32
     9f4:	00040000 	andeq	r0, r4, r0
     9f8:	00000438 	andeq	r0, r0, r8, lsr r4
     9fc:	017c0104 	cmneq	ip, r4, lsl #2
     a00:	4c0c0000 	stcmi	0, cr0, [ip], {-0}
     a04:	56000004 	strpl	r0, [r0], -r4
     a08:	c0000001 	andgt	r0, r0, r1
     a0c:	ce200007 	cdpgt	0, 2, cr0, cr0, cr7, {0}
     a10:	8e000002 	cdphi	0, 0, cr0, cr0, cr2, {0}
     a14:	02000002 	andeq	r0, r0, #2
     a18:	00000174 	andeq	r0, r0, r4, ror r1
     a1c:	00300b02 	eorseq	r0, r0, r2, lsl #22
     a20:	01030000 	mrseq	r0, (UNDEF: 3)
     a24:	00008408 	andeq	r8, r0, r8, lsl #8
     a28:	07020300 	streq	r0, [r2, -r0, lsl #6]
     a2c:	000000b2 	strheq	r0, [r0], -r2
     a30:	00026e02 	andeq	r6, r2, r2, lsl #28
     a34:	490d0200 	stmdbmi	sp, {r9}
     a38:	03000000 	movweq	r0, #0
     a3c:	00a50704 	adceq	r0, r5, r4, lsl #14
     a40:	04030000 	streq	r0, [r3], #-0
     a44:	0000a007 	andeq	sl, r0, r7
     a48:	06010300 	streq	r0, [r1], -r0, lsl #6
     a4c:	00000086 	andeq	r0, r0, r6, lsl #1
     a50:	13050203 	movwne	r0, #20995	; 0x5203
     a54:	04000002 	streq	r0, [r0], #-2
     a58:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     a5c:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     a60:	00027705 	andeq	r7, r2, r5, lsl #14
     a64:	03020500 	movweq	r0, #9472	; 0x2500
     a68:	00009416 	andeq	r9, r0, r6, lsl r4
     a6c:	002e0600 	eoreq	r0, lr, r0, lsl #12
     a70:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
     a74:	00000025 	andeq	r0, r0, r5, lsr #32
     a78:	00fa0600 	rscseq	r0, sl, r0, lsl #12
     a7c:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
     a80:	00000025 	andeq	r0, r0, r5, lsr #32
     a84:	04070001 	streq	r0, [r7], #-1
     a88:	00ad1303 	adceq	r1, sp, r3, lsl #6
     a8c:	49080000 	stmdbmi	r8, {}	; <UNPREDICTABLE>
     a90:	03005244 	movweq	r5, #580	; 0x244
     a94:	00003e15 	andeq	r3, r0, r5, lsl lr
     a98:	00730900 	rsbseq	r0, r3, r0, lsl #18
     a9c:	05000000 	streq	r0, [r0, #-0]
     aa0:	ce200302 	cdpgt	3, 2, cr0, cr0, cr2, {0}
     aa4:	06000000 	streq	r0, [r0], -r0
     aa8:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
     aac:	00252203 	eoreq	r2, r5, r3, lsl #4
     ab0:	06000000 	streq	r0, [r0], -r0
     ab4:	00000097 	muleq	r0, r7, r0
     ab8:	00252303 	eoreq	r2, r5, r3, lsl #6
     abc:	00010000 	andeq	r0, r1, r0
     ac0:	1d030407 	cfstrsne	mvf0, [r3, #-28]	; 0xffffffe4
     ac4:	000000e7 	andeq	r0, r0, r7, ror #1
     ac8:	52444f08 	subpl	r4, r4, #8, 30
     acc:	3e1f0300 	cdpcc	3, 1, cr0, cr15, cr0, {0}
     ad0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     ad4:	000000ad 	andeq	r0, r0, sp, lsr #1
     ad8:	00000a00 	andeq	r0, r0, r0, lsl #20
     adc:	03180000 	tsteq	r8, #0
     ae0:	0001300d 	andeq	r3, r1, sp
     ae4:	00430600 	subeq	r0, r3, r0, lsl #12
     ae8:	0f030000 	svceq	0x00030000
     aec:	0000003e 	andeq	r0, r0, lr, lsr r0
     af0:	00700600 	rsbseq	r0, r0, r0, lsl #12
     af4:	10030000 	andne	r0, r3, r0
     af8:	0000003e 	andeq	r0, r0, lr, lsr r0
     afc:	001a0604 	andseq	r0, sl, r4, lsl #12
     b00:	11030000 	mrsne	r0, (UNDEF: 3)
     b04:	0000003e 	andeq	r0, r0, lr, lsr r0
     b08:	01c80608 	biceq	r0, r8, r8, lsl #12
     b0c:	12030000 	andne	r0, r3, #0
     b10:	0000003e 	andeq	r0, r0, lr, lsr r0
     b14:	00940b0c 	addseq	r0, r4, ip, lsl #22
     b18:	0b100000 	bleq	400b20 <startup-0x1fbff4e0>
     b1c:	000000ce 	andeq	r0, r0, lr, asr #1
     b20:	01020014 	tsteq	r2, r4, lsl r0
     b24:	03000000 	movweq	r0, #0
     b28:	0000e728 	andeq	lr, r0, r8, lsr #14
     b2c:	01300c00 	teqeq	r0, r0, lsl #24
     b30:	c10d0000 	mrsgt	r0, (UNDEF: 13)
     b34:	03000001 	movweq	r0, #1
     b38:	0001512a 	andeq	r5, r1, sl, lsr #2
     b3c:	3b040e00 	blcc	104344 <startup-0x1fefbcbc>
     b40:	0f000001 	svceq	0x00000001
     b44:	0000014b 	andeq	r0, r0, fp, asr #2
     b48:	0002800d 	andeq	r8, r2, sp
     b4c:	512b0300 			; <UNDEFINED> instruction: 0x512b0300
     b50:	10000001 	andne	r0, r0, r1
     b54:	00300107 	eorseq	r0, r0, r7, lsl #2
     b58:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     b5c:	00000199 	muleq	r0, r9, r1
     b60:	455f4211 	ldrbmi	r4, [pc, #-529]	; 957 <startup-0x1ffff6a9>
     b64:	4e124000 	cdpmi	0, 1, cr4, cr2, cr0, {0}
     b68:	20000001 	andcs	r0, r0, r1
     b6c:	0000f412 	andeq	pc, r0, r2, lsl r4	; <UNPREDICTABLE>
     b70:	0f121000 	svceq	0x00121000
     b74:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b78:	0001ce12 	andeq	ip, r1, r2, lsl lr
     b7c:	92120400 	andsls	r0, r2, #0, 8
     b80:	02000000 	andeq	r0, r0, #0
     b84:	00010312 	andeq	r0, r1, r2, lsl r3
     b88:	10000100 	andne	r0, r0, r0, lsl #2
     b8c:	00300107 	eorseq	r0, r0, r7, lsl #2
     b90:	14010000 	strne	r0, [r1], #-0
     b94:	000001c5 	andeq	r0, r0, r5, asr #3
     b98:	0003ba12 	andeq	fp, r3, r2, lsl sl
     b9c:	10123800 	andsne	r3, r2, r0, lsl #16
     ba0:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     ba4:	0003cd12 	andeq	ip, r3, r2, lsl sp
     ba8:	9d120100 	ldflss	f0, [r2, #-0]
     bac:	06000004 	streq	r0, [r0], -r4
     bb0:	00049212 	andeq	r9, r4, r2, lsl r2
     bb4:	13008000 	movwne	r8, #0
     bb8:	000004c7 	andeq	r0, r0, r7, asr #9
     bbc:	0a547e01 	beq	15203c8 <startup-0x1eadfc38>
     bc0:	003a2000 	eorseq	r2, sl, r0
     bc4:	9c010000 	stcls	0, cr0, [r1], {-0}
     bc8:	0003e114 	andeq	lr, r3, r4, lsl r1
     bcc:	06750100 	ldrbteq	r0, [r5], -r0, lsl #2
     bd0:	4e20000a 	cdpmi	0, 2, cr0, cr0, cr10, {0}
     bd4:	01000000 	mrseq	r0, (UNDEF: 0)
     bd8:	0002169c 	muleq	r2, ip, r6
     bdc:	6f721500 	svcvs	0x00721500
     be0:	75010077 	strvc	r0, [r1, #-119]	; 0xffffff89
     be4:	00000025 	andeq	r0, r0, r5, lsr #32
     be8:	156f9102 	strbne	r9, [pc, #-258]!	; aee <startup-0x1ffff512>
     bec:	006c6f63 	rsbeq	r6, ip, r3, ror #30
     bf0:	00257501 	eoreq	r7, r5, r1, lsl #10
     bf4:	91020000 	mrsls	r0, (UNDEF: 2)
     bf8:	0479166e 	ldrbteq	r1, [r9], #-1646	; 0xfffff992
     bfc:	77010000 	strvc	r0, [r1, -r0]
     c00:	00000025 	andeq	r0, r0, r5, lsr #32
     c04:	00779102 	rsbseq	r9, r7, r2, lsl #2
     c08:	00050d14 	andeq	r0, r5, r4, lsl sp
     c0c:	ca6b0100 	bgt	1ac1014 <startup-0x1e53efec>
     c10:	3c200009 	stccc	0, cr0, [r0], #-36	; 0xffffffdc
     c14:	01000000 	mrseq	r0, (UNDEF: 0)
     c18:	0002389c 	muleq	r2, ip, r8
     c1c:	00631500 	rsbeq	r1, r3, r0, lsl #10
     c20:	00256b01 	eoreq	r6, r5, r1, lsl #22
     c24:	91020000 	mrsls	r0, (UNDEF: 2)
     c28:	d8170077 	ldmdale	r7, {r0, r1, r2, r4, r5, r6}
     c2c:	01000004 	tsteq	r0, r4
     c30:	00099462 	andeq	r9, r9, r2, ror #8
     c34:	00003620 	andeq	r3, r0, r0, lsr #12
     c38:	5a9c0100 	bpl	fe701040 <STK+0xde700278>
     c3c:	15000002 	strne	r0, [r0, #-2]
     c40:	62010063 	andvs	r0, r1, #99	; 0x63
     c44:	00000025 	andeq	r0, r0, r5, lsr #32
     c48:	00779102 	rsbseq	r9, r7, r2, lsl #2
     c4c:	00048117 	andeq	r8, r4, r7, lsl r1
     c50:	6a5b0100 	bvs	16c1058 <startup-0x1e93efa8>
     c54:	2a200009 	bcs	800c80 <startup-0x1f7ff380>
     c58:	01000000 	mrseq	r0, (UNDEF: 0)
     c5c:	00027c9c 	muleq	r2, ip, ip
     c60:	00631500 	rsbeq	r1, r3, r0, lsl #10
     c64:	00255b01 	eoreq	r5, r5, r1, lsl #22
     c68:	91020000 	mrsls	r0, (UNDEF: 2)
     c6c:	ee170077 	mrc	0, 0, r0, cr7, cr7, {3}
     c70:	01000003 	tsteq	r0, r3
     c74:	00094054 	andeq	r4, r9, r4, asr r0
     c78:	00002a20 	andeq	r2, r0, r0, lsr #20
     c7c:	9e9c0100 	fmllse	f0, f4, f0
     c80:	15000002 	strne	r0, [r0, #-2]
     c84:	54010063 	strpl	r0, [r1], #-99	; 0xffffff9d
     c88:	00000025 	andeq	r0, r0, r5, lsr #32
     c8c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     c90:	0004fd18 	andeq	pc, r4, r8, lsl sp	; <UNPREDICTABLE>
     c94:	254a0100 	strbcs	r0, [sl, #-256]	; 0xffffff00
     c98:	fc000000 	stc2	0, cr0, [r0], {-0}
     c9c:	44200008 	strtmi	r0, [r0], #-8
     ca0:	01000000 	mrseq	r0, (UNDEF: 0)
     ca4:	0002c49c 	muleq	r2, ip, r4
     ca8:	00631900 	rsbeq	r1, r3, r0, lsl #18
     cac:	00254f01 	eoreq	r4, r5, r1, lsl #30
     cb0:	91020000 	mrsls	r0, (UNDEF: 2)
     cb4:	fe18006f 	cdp2	0, 1, cr0, cr8, cr15, {3}
     cb8:	01000003 	tsteq	r0, r3
     cbc:	00002540 	andeq	r2, r0, r0, asr #10
     cc0:	0008b800 	andeq	fp, r8, r0, lsl #16
     cc4:	00004420 	andeq	r4, r0, r0, lsr #8
     cc8:	ea9c0100 	b	fe7010d0 <STK+0xde700308>
     ccc:	19000002 	stmdbne	r0, {r1}
     cd0:	45010063 	strmi	r0, [r1, #-99]	; 0xffffff9d
     cd4:	00000025 	andeq	r0, r0, r5, lsr #32
     cd8:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     cdc:	00042318 	andeq	r2, r4, r8, lsl r3
     ce0:	25360100 	ldrcs	r0, [r6, #-256]!	; 0xffffff00
     ce4:	84000000 	strhi	r0, [r0], #-0
     ce8:	34200008 	strtcc	r0, [r0], #-8
     cec:	01000000 	mrseq	r0, (UNDEF: 0)
     cf0:	0003109c 	muleq	r3, ip, r0
     cf4:	00631900 	rsbeq	r1, r3, r0, lsl #18
     cf8:	00253b01 	eoreq	r3, r5, r1, lsl #22
     cfc:	91020000 	mrsls	r0, (UNDEF: 2)
     d00:	e6170077 			; <UNDEFINED> instruction: 0xe6170077
     d04:	01000004 	tsteq	r0, r4
     d08:	0008502e 	andeq	r5, r8, lr, lsr #32
     d0c:	00003420 	andeq	r3, r0, r0, lsr #8
     d10:	329c0100 	addscc	r0, ip, #0, 2
     d14:	15000003 	strne	r0, [r0, #-3]
     d18:	2e010063 	cdpcs	0, 0, cr0, cr1, cr3, {3}
     d1c:	00000025 	andeq	r0, r0, r5, lsr #32
     d20:	00779102 	rsbseq	r9, r7, r2, lsl #2
     d24:	0004b21a 	andeq	fp, r4, sl, lsl r2
     d28:	04270100 	strteq	r0, [r7], #-256	; 0xffffff00
     d2c:	4c200008 	stcmi	0, cr0, [r0], #-32	; 0xffffffe0
     d30:	01000000 	mrseq	r0, (UNDEF: 0)
     d34:	0003609c 	muleq	r3, ip, r0
     d38:	00781500 	rsbseq	r1, r8, r0, lsl #10
     d3c:	00252701 	eoreq	r2, r5, r1, lsl #14
     d40:	91020000 	mrsls	r0, (UNDEF: 2)
     d44:	0063196f 	rsbeq	r1, r3, pc, ror #18
     d48:	00252901 	eoreq	r2, r5, r1, lsl #18
     d4c:	91020000 	mrsls	r0, (UNDEF: 2)
     d50:	391b0077 	ldmdbcc	fp, {r0, r1, r2, r4, r5, r6}
     d54:	01000004 	tsteq	r0, r4
     d58:	0007c01f 	andeq	ip, r7, pc, lsl r0
     d5c:	00004420 	andeq	r4, r0, r0, lsr #8
     d60:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
     d64:	1f010078 	svcne	0x00010078
     d68:	00000025 	andeq	r0, r0, r5, lsr #32
     d6c:	196f9102 	stmdbne	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
     d70:	21010063 	tstcs	r1, r3, rrx
     d74:	00000025 	andeq	r0, r0, r5, lsr #32
     d78:	00779102 	rsbseq	r9, r7, r2, lsl #2
     d7c:	00021f00 	andeq	r1, r2, r0, lsl #30
     d80:	ca000400 	bgt	1d88 <startup-0x1fffe278>
     d84:	04000005 	streq	r0, [r0], #-5
     d88:	00017c01 	andeq	r7, r1, r1, lsl #24
     d8c:	05230c00 	streq	r0, [r3, #-3072]!	; 0xfffff400
     d90:	01560000 	cmpeq	r6, r0
     d94:	0a900000 	beq	fe400d9c <STK+0xde3fffd4>
     d98:	01282000 			; <UNDEFINED> instruction: 0x01282000
     d9c:	03620000 	cmneq	r2, #0
     da0:	74020000 	strvc	r0, [r2], #-0
     da4:	02000001 	andeq	r0, r0, #1
     da8:	0000350b 	andeq	r3, r0, fp, lsl #10
     dac:	00250300 	eoreq	r0, r5, r0, lsl #6
     db0:	01040000 	mrseq	r0, (UNDEF: 4)
     db4:	00008408 	andeq	r8, r0, r8, lsl #8
     db8:	07020400 	streq	r0, [r2, -r0, lsl #8]
     dbc:	000000b2 	strheq	r0, [r0], -r2
     dc0:	00026e02 	andeq	r6, r2, r2, lsl #28
     dc4:	4e0d0200 	cdpmi	2, 0, cr0, cr13, cr0, {0}
     dc8:	04000000 	streq	r0, [r0], #-0
     dcc:	00a50704 	adceq	r0, r5, r4, lsl #14
     dd0:	04040000 	streq	r0, [r4], #-0
     dd4:	0000a007 	andeq	sl, r0, r7
     dd8:	06010400 	streq	r0, [r1], -r0, lsl #8
     ddc:	00000086 	andeq	r0, r0, r6, lsl #1
     de0:	13050204 	movwne	r0, #20996	; 0x5204
     de4:	05000002 	streq	r0, [r0, #-2]
     de8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     dec:	04040074 	streq	r0, [r4], #-116	; 0xffffff8c
     df0:	00027705 	andeq	r7, r2, r5, lsl #14
     df4:	03020600 	movweq	r0, #9728	; 0x2600
     df8:	00009916 	andeq	r9, r0, r6, lsl r9
     dfc:	002e0700 	eoreq	r0, lr, r0, lsl #14
     e00:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
     e04:	00000025 	andeq	r0, r0, r5, lsr #32
     e08:	00fa0700 	rscseq	r0, sl, r0, lsl #14
     e0c:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
     e10:	00000025 	andeq	r0, r0, r5, lsr #32
     e14:	04080001 	streq	r0, [r8], #-1
     e18:	00b21303 	adcseq	r1, r2, r3, lsl #6
     e1c:	49090000 	stmdbmi	r9, {}	; <UNPREDICTABLE>
     e20:	03005244 	movweq	r5, #580	; 0x244
     e24:	00004315 	andeq	r4, r0, r5, lsl r3
     e28:	00780a00 	rsbseq	r0, r8, r0, lsl #20
     e2c:	06000000 	streq	r0, [r0], -r0
     e30:	d3200302 			; <UNDEFINED> instruction: 0xd3200302
     e34:	07000000 	streq	r0, [r0, -r0]
     e38:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
     e3c:	00252203 	eoreq	r2, r5, r3, lsl #4
     e40:	07000000 	streq	r0, [r0, -r0]
     e44:	00000097 	muleq	r0, r7, r0
     e48:	00252303 	eoreq	r2, r5, r3, lsl #6
     e4c:	00010000 	andeq	r0, r1, r0
     e50:	1d030408 	cfstrsne	mvf0, [r3, #-32]	; 0xffffffe0
     e54:	000000ec 	andeq	r0, r0, ip, ror #1
     e58:	52444f09 	subpl	r4, r4, #9, 30	; 0x24
     e5c:	431f0300 	tstmi	pc, #0, 6
     e60:	0a000000 	beq	e68 <startup-0x1ffff198>
     e64:	000000b2 	strheq	r0, [r0], -r2
     e68:	00000b00 	andeq	r0, r0, r0, lsl #22
     e6c:	03180000 	tsteq	r8, #0
     e70:	0001350d 	andeq	r3, r1, sp, lsl #10
     e74:	00430700 	subeq	r0, r3, r0, lsl #14
     e78:	0f030000 	svceq	0x00030000
     e7c:	00000043 	andeq	r0, r0, r3, asr #32
     e80:	00700700 	rsbseq	r0, r0, r0, lsl #14
     e84:	10030000 	andne	r0, r3, r0
     e88:	00000043 	andeq	r0, r0, r3, asr #32
     e8c:	001a0704 	andseq	r0, sl, r4, lsl #14
     e90:	11030000 	mrsne	r0, (UNDEF: 3)
     e94:	00000043 	andeq	r0, r0, r3, asr #32
     e98:	01c80708 	biceq	r0, r8, r8, lsl #14
     e9c:	12030000 	andne	r0, r3, #0
     ea0:	00000043 	andeq	r0, r0, r3, asr #32
     ea4:	00990c0c 	addseq	r0, r9, ip, lsl #24
     ea8:	0c100000 	ldceq	0, cr0, [r0], {-0}
     eac:	000000d3 	ldrdeq	r0, [r0], -r3
     eb0:	01020014 	tsteq	r2, r4, lsl r0
     eb4:	03000000 	movweq	r0, #0
     eb8:	0000ec28 	andeq	lr, r0, r8, lsr #24
     ebc:	01350d00 	teqeq	r5, r0, lsl #26
     ec0:	c10e0000 	mrsgt	r0, (UNDEF: 14)
     ec4:	03000001 	movweq	r0, #1
     ec8:	0001562a 	andeq	r5, r1, sl, lsr #12
     ecc:	40040f00 	andmi	r0, r4, r0, lsl #30
     ed0:	03000001 	movweq	r0, #1
     ed4:	00000150 	andeq	r0, r0, r0, asr r1
     ed8:	0002800e 	andeq	r8, r2, lr
     edc:	562b0300 	strtpl	r0, [fp], -r0, lsl #6
     ee0:	10000001 	andne	r0, r0, r1
     ee4:	00350107 	eorseq	r0, r5, r7, lsl #2
     ee8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     eec:	00000180 	andeq	r0, r0, r0, lsl #3
     ef0:	00055111 	andeq	r5, r5, r1, lsl r1
     ef4:	4c110400 	cfldrsmi	mvf0, [r1], {-0}
     ef8:	04000005 	streq	r0, [r0], #-5
     efc:	00301200 	eorseq	r1, r0, r0, lsl #4
     f00:	01900000 	orrseq	r0, r0, r0
     f04:	4e130000 	cdpmi	0, 1, cr0, cr3, cr0, {0}
     f08:	0f000000 	svceq	0x00000000
     f0c:	01800300 	orreq	r0, r0, r0, lsl #6
     f10:	6b140000 	blvs	500f18 <startup-0x1faff0e8>
     f14:	01007965 	tsteq	r0, r5, ror #18
     f18:	0001900f 	andeq	r9, r1, pc
     f1c:	90030500 	andls	r0, r3, r0, lsl #10
     f20:	1520000d 	strne	r0, [r0, #-13]!
     f24:	0000051e 	andeq	r0, r0, lr, lsl r5
     f28:	00253e01 	eoreq	r3, r5, r1, lsl #28
     f2c:	0b4c0000 	bleq	1300f34 <startup-0x1ecff0cc>
     f30:	006c2000 	rsbeq	r2, ip, r0
     f34:	9c010000 	stcls	0, cr0, [r1], {-0}
     f38:	000001dc 	ldrdeq	r0, [r0], -ip
     f3c:	776f7214 			; <UNDEFINED> instruction: 0x776f7214
     f40:	25400100 	strbcs	r0, [r0, #-256]	; 0xffffff00
     f44:	02000000 	andeq	r0, r0, #0
     f48:	63146f91 	tstvs	r4, #580	; 0x244
     f4c:	01006c6f 	tsteq	r0, pc, ror #24
     f50:	00002540 	andeq	r2, r0, r0, asr #10
     f54:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     f58:	05561600 	ldrbeq	r1, [r6, #-1536]	; 0xfffffa00
     f5c:	30010000 	andcc	r0, r1, r0
     f60:	00000025 	andeq	r0, r0, r5, lsr #32
     f64:	20000af4 	strdcs	r0, [r0], -r4
     f68:	00000058 	andeq	r0, r0, r8, asr r0
     f6c:	02029c01 	andeq	r9, r2, #256	; 0x100
     f70:	63140000 	tstvs	r4, #0
     f74:	25320100 	ldrcs	r0, [r2, #-256]!	; 0xffffff00
     f78:	02000000 	andeq	r0, r0, #0
     f7c:	17007791 			; <UNDEFINED> instruction: 0x17007791
     f80:	00000567 	andeq	r0, r0, r7, ror #10
     f84:	0a901701 	beq	fe406b90 <STK+0xde405dc8>
     f88:	00642000 	rsbeq	r2, r4, r0
     f8c:	9c010000 	stcls	0, cr0, [r1], {-0}
     f90:	776f7218 			; <UNDEFINED> instruction: 0x776f7218
     f94:	25170100 	ldrcs	r0, [r7, #-256]	; 0xffffff00
     f98:	02000000 	andeq	r0, r0, #0
     f9c:	00007791 	muleq	r0, r1, r7
     fa0:	00000312 	andeq	r0, r0, r2, lsl r3
     fa4:	07100004 	ldreq	r0, [r0, -r4]
     fa8:	01040000 	mrseq	r0, (UNDEF: 4)
     fac:	0000017c 	andeq	r0, r0, ip, ror r1
     fb0:	0005810c 	andeq	r8, r5, ip, lsl #2
     fb4:	00015600 	andeq	r5, r1, r0, lsl #12
	...
     fc0:	00040900 	andeq	r0, r4, r0, lsl #18
     fc4:	01740200 	cmneq	r4, r0, lsl #4
     fc8:	0b020000 	bleq	80fd0 <startup-0x1ff7f030>
     fcc:	00000035 	andeq	r0, r0, r5, lsr r0
     fd0:	00002503 	andeq	r2, r0, r3, lsl #10
     fd4:	08010400 	stmdaeq	r1, {sl}
     fd8:	00000084 	andeq	r0, r0, r4, lsl #1
     fdc:	b2070204 	andlt	r0, r7, #4, 4	; 0x40000000
     fe0:	02000000 	andeq	r0, r0, #0
     fe4:	0000026e 	andeq	r0, r0, lr, ror #4
     fe8:	004e0d02 	subeq	r0, lr, r2, lsl #26
     fec:	04040000 	streq	r0, [r4], #-0
     ff0:	0000a507 	andeq	sl, r0, r7, lsl #10
     ff4:	07040400 	streq	r0, [r4, -r0, lsl #8]
     ff8:	000000a0 	andeq	r0, r0, r0, lsr #1
     ffc:	00017502 	andeq	r7, r1, r2, lsl #10
    1000:	67100200 	ldrvs	r0, [r0, -r0, lsl #4]
    1004:	04000000 	streq	r0, [r0], #-0
    1008:	00860601 	addeq	r0, r6, r1, lsl #12
    100c:	02040000 	andeq	r0, r4, #0
    1010:	00021305 	andeq	r1, r2, r5, lsl #6
    1014:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
    1018:	00746e69 	rsbseq	r6, r4, r9, ror #28
    101c:	77050404 	strvc	r0, [r5, -r4, lsl #8]
    1020:	06000002 	streq	r0, [r0], -r2
    1024:	a4160302 	ldrge	r0, [r6], #-770	; 0xfffffcfe
    1028:	07000000 	streq	r0, [r0, -r0]
    102c:	0000002e 	andeq	r0, r0, lr, lsr #32
    1030:	00251803 	eoreq	r1, r5, r3, lsl #16
    1034:	07000000 	streq	r0, [r0, -r0]
    1038:	000000fa 	strdeq	r0, [r0], -sl
    103c:	00251903 	eoreq	r1, r5, r3, lsl #18
    1040:	00010000 	andeq	r0, r1, r0
    1044:	13030408 	movwne	r0, #13320	; 0x3408
    1048:	000000bd 	strheq	r0, [r0], -sp
    104c:	52444909 	subpl	r4, r4, #147456	; 0x24000
    1050:	43150300 	tstmi	r5, #0, 6
    1054:	0a000000 	beq	105c <startup-0x1fffefa4>
    1058:	00000083 	andeq	r0, r0, r3, lsl #1
    105c:	03020600 	movweq	r0, #9728	; 0x2600
    1060:	0000de20 	andeq	sp, r0, r0, lsr #28
    1064:	01b90700 			; <UNDEFINED> instruction: 0x01b90700
    1068:	22030000 	andcs	r0, r3, #0
    106c:	00000025 	andeq	r0, r0, r5, lsr #32
    1070:	00970700 	addseq	r0, r7, r0, lsl #14
    1074:	23030000 	movwcs	r0, #12288	; 0x3000
    1078:	00000025 	andeq	r0, r0, r5, lsr #32
    107c:	04080001 	streq	r0, [r8], #-1
    1080:	00f71d03 	rscseq	r1, r7, r3, lsl #26
    1084:	4f090000 	svcmi	0x00090000
    1088:	03005244 	movweq	r5, #580	; 0x244
    108c:	0000431f 	andeq	r4, r0, pc, lsl r3
    1090:	00bd0a00 	adcseq	r0, sp, r0, lsl #20
    1094:	0b000000 	bleq	109c <startup-0x1fffef64>
    1098:	00000000 	andeq	r0, r0, r0
    109c:	400d0318 	andmi	r0, sp, r8, lsl r3
    10a0:	07000001 	streq	r0, [r0, -r1]
    10a4:	00000043 	andeq	r0, r0, r3, asr #32
    10a8:	00430f03 	subeq	r0, r3, r3, lsl #30
    10ac:	07000000 	streq	r0, [r0, -r0]
    10b0:	00000070 	andeq	r0, r0, r0, ror r0
    10b4:	00431003 	subeq	r1, r3, r3
    10b8:	07040000 	streq	r0, [r4, -r0]
    10bc:	0000001a 	andeq	r0, r0, sl, lsl r0
    10c0:	00431103 	subeq	r1, r3, r3, lsl #2
    10c4:	07080000 	streq	r0, [r8, -r0]
    10c8:	000001c8 	andeq	r0, r0, r8, asr #3
    10cc:	00431203 	subeq	r1, r3, r3, lsl #4
    10d0:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    10d4:	000000a4 	andeq	r0, r0, r4, lsr #1
    10d8:	00de0c10 	sbcseq	r0, lr, r0, lsl ip
    10dc:	00140000 	andseq	r0, r4, r0
    10e0:	00000102 	andeq	r0, r0, r2, lsl #2
    10e4:	f7280300 			; <UNDEFINED> instruction: 0xf7280300
    10e8:	0d000000 	stceq	0, cr0, [r0, #-0]
    10ec:	00000140 	andeq	r0, r0, r0, asr #2
    10f0:	0001c10e 	andeq	ip, r1, lr, lsl #2
    10f4:	612a0300 			; <UNDEFINED> instruction: 0x612a0300
    10f8:	0f000001 	svceq	0x00000001
    10fc:	00014b04 	andeq	r4, r1, r4, lsl #22
    1100:	015b0300 	cmpeq	fp, r0, lsl #6
    1104:	800e0000 	andhi	r0, lr, r0
    1108:	03000002 	movweq	r0, #2
    110c:	0001612b 	andeq	r6, r1, fp, lsr #2
    1110:	01ed0e00 	mvneq	r0, r0, lsl #28
    1114:	0d040000 	stceq	0, cr0, [r4, #-0]
    1118:	00000030 	andeq	r0, r0, r0, lsr r0
    111c:	0002510e 	andeq	r5, r2, lr, lsl #2
    1120:	300e0400 	andcc	r0, lr, r0, lsl #8
    1124:	06000000 	streq	r0, [r0], -r0
    1128:	a40d0502 	strge	r0, [sp], #-1282	; 0xfffffafe
    112c:	10000001 	andne	r0, r0, r1
    1130:	0f050078 	svceq	0x00050078
    1134:	00000025 	andeq	r0, r0, r5, lsr #32
    1138:	00791000 	rsbseq	r1, r9, r0
    113c:	00251005 	eoreq	r1, r5, r5
    1140:	00010000 	andeq	r0, r1, r0
    1144:	0002e602 	andeq	lr, r2, r2, lsl #12
    1148:	87120500 	ldrhi	r0, [r2, -r0, lsl #10]
    114c:	06000001 	streq	r0, [r0], -r1
    1150:	e814052b 	ldmda	r4, {r0, r1, r3, r5, r8, sl}
    1154:	07000001 	streq	r0, [r0, -r1]
    1158:	000002d3 	ldrdeq	r0, [r0], -r3
    115c:	00251605 	eoreq	r1, r5, r5, lsl #12
    1160:	07000000 	streq	r0, [r0, -r0]
    1164:	00000377 	andeq	r0, r0, r7, ror r3
    1168:	00251705 	eoreq	r1, r5, r5, lsl #14
    116c:	07010000 	streq	r0, [r1, -r0]
    1170:	000002ec 	andeq	r0, r0, ip, ror #5
    1174:	00251805 	eoreq	r1, r5, r5, lsl #16
    1178:	07020000 	streq	r0, [r2, -r0]
    117c:	000002d7 	ldrdeq	r0, [r0], -r7
    1180:	01e81905 	mvneq	r1, r5, lsl #18
    1184:	00030000 	andeq	r0, r3, r0
    1188:	0001a411 	andeq	sl, r1, r1, lsl r4
    118c:	0001f800 	andeq	pc, r1, r0, lsl #16
    1190:	004e1200 	subeq	r1, lr, r0, lsl #4
    1194:	00130000 	andseq	r0, r3, r0
    1198:	0002f302 	andeq	pc, r2, r2, lsl #6
    119c:	af1b0500 	svcge	0x001b0500
    11a0:	0b000001 	bleq	11ac <startup-0x1fffee54>
    11a4:	00000335 	andeq	r0, r0, r5, lsr r3
    11a8:	7c1d0518 	cfldr32vc	mvfx0, [sp], {24}
    11ac:	07000002 	streq	r0, [r0, -r2]
    11b0:	000002c4 	andeq	r0, r0, r4, asr #5
    11b4:	027c1f05 	rsbseq	r1, ip, #5, 30
    11b8:	07000000 	streq	r0, [r0, -r0]
    11bc:	000002cd 	andeq	r0, r0, sp, asr #5
    11c0:	005c2005 	subseq	r2, ip, r5
    11c4:	07040000 	streq	r0, [r4, -r0]
    11c8:	00000363 	andeq	r0, r0, r3, ror #6
    11cc:	005c2105 	subseq	r2, ip, r5, lsl #2
    11d0:	07050000 	streq	r0, [r5, -r0]
    11d4:	0000030b 	andeq	r0, r0, fp, lsl #6
    11d8:	005c2205 	subseq	r2, ip, r5, lsl #4
    11dc:	07060000 	streq	r0, [r6, -r0]
    11e0:	00000311 	andeq	r0, r0, r1, lsl r3
    11e4:	005c2305 	subseq	r2, ip, r5, lsl #6
    11e8:	07070000 	streq	r0, [r7, -r0]
    11ec:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    11f0:	02932405 	addseq	r2, r3, #83886080	; 0x5000000
    11f4:	07080000 	streq	r0, [r8, -r0]
    11f8:	00000133 	andeq	r0, r0, r3, lsr r1
    11fc:	02932505 	addseq	r2, r3, #20971520	; 0x1400000
    1200:	070c0000 	streq	r0, [ip, -r0]
    1204:	00000317 	andeq	r0, r0, r7, lsl r3
    1208:	02932605 	addseq	r2, r3, #5242880	; 0x500000
    120c:	07100000 	ldreq	r0, [r0, -r0]
    1210:	000002de 	ldrdeq	r0, [r0], -lr
    1214:	02ae2705 	adceq	r2, lr, #1310720	; 0x140000
    1218:	00140000 	andseq	r0, r4, r0
    121c:	01f8040f 	mvnseq	r0, pc, lsl #8
    1220:	8d130000 	ldchi	0, cr0, [r3, #-0]
    1224:	14000002 	strne	r0, [r0], #-2
    1228:	0000028d 	andeq	r0, r0, sp, lsl #5
    122c:	03040f00 	movweq	r0, #20224	; 0x4f00
    1230:	0f000002 	svceq	0x00000002
    1234:	00028204 	andeq	r8, r2, r4, lsl #4
    1238:	02ae1300 	adceq	r1, lr, #0, 6
    123c:	8d140000 	ldchi	0, cr0, [r4, #-0]
    1240:	14000002 	strne	r0, [r0], #-2
    1244:	0000005c 	andeq	r0, r0, ip, asr r0
    1248:	00005c14 	andeq	r5, r0, r4, lsl ip
    124c:	040f0000 	streq	r0, [pc], #-0	; 1254 <startup-0x1fffedac>
    1250:	00000299 	muleq	r0, r9, r2
    1254:	00033502 	andeq	r3, r3, r2, lsl #10
    1258:	03290500 			; <UNDEFINED> instruction: 0x03290500
    125c:	15000002 	strne	r0, [r0, #-2]
    1260:	000005a9 	andeq	r0, r0, r9, lsr #11
    1264:	00752001 	rsbseq	r2, r5, r1
    1268:	0be40000 	bleq	ff901270 <STK+0xdf9004a8>
    126c:	00f02000 	rscseq	r2, r0, r0
    1270:	9c010000 	stcls	0, cr0, [r1], {-0}
    1274:	000002f3 	strdeq	r0, [r0], -r3
    1278:	00033016 	andeq	r3, r3, r6, lsl r0
    127c:	b4290100 	strtlt	r0, [r9], #-256	; 0xffffff00
    1280:	02000002 	andeq	r0, r0, #2
    1284:	6b175491 	blvs	5d64d0 <startup-0x1fa29b30>
    1288:	252a0100 	strcs	r0, [sl, #-256]!	; 0xffffff00
    128c:	02000000 	andeq	r0, r0, #0
    1290:	18006f91 	stmdane	r0, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    1294:	000005ae 	andeq	r0, r0, lr, lsr #11
    1298:	0bb81a01 	bleq	fee07aa4 <STK+0xdee06cdc>
    129c:	002c2000 	eoreq	r2, ip, r0
    12a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    12a4:	00057919 	andeq	r7, r5, r9, lsl r9
    12a8:	00100100 	andseq	r0, r0, r0, lsl #2
    12ac:	0c200000 	stceq	0, cr0, [r0], #-0
    12b0:	01000000 	mrseq	r0, (UNDEF: 0)
    12b4:	0218009c 	andseq	r0, r8, #156	; 0x9c
    12b8:	00040000 	andeq	r0, r4, r0
    12bc:	0000085d 	andeq	r0, r0, sp, asr r8
    12c0:	017c0104 	cmneq	ip, r4, lsl #2
    12c4:	f10c0000 	cpsid	
    12c8:	56000005 	strpl	r0, [r0], -r5
    12cc:	d4000001 	strle	r0, [r0], #-1
    12d0:	8420000c 	strthi	r0, [r0], #-12
    12d4:	d1000000 	mrsle	r0, (UNDEF: 0)
    12d8:	02000004 	andeq	r0, r0, #4
    12dc:	00000174 	andeq	r0, r0, r4, ror r1
    12e0:	00300b02 	eorseq	r0, r0, r2, lsl #22
    12e4:	01030000 	mrseq	r0, (UNDEF: 3)
    12e8:	00008408 	andeq	r8, r0, r8, lsl #8
    12ec:	07020300 	streq	r0, [r2, -r0, lsl #6]
    12f0:	000000b2 	strheq	r0, [r0], -r2
    12f4:	00026e02 	andeq	r6, r2, r2, lsl #28
    12f8:	490d0200 	stmdbmi	sp, {r9}
    12fc:	03000000 	movweq	r0, #0
    1300:	00a50704 	adceq	r0, r5, r4, lsl #14
    1304:	04030000 	streq	r0, [r3], #-0
    1308:	0000a007 	andeq	sl, r0, r7
    130c:	06010300 	streq	r0, [r1], -r0, lsl #6
    1310:	00000086 	andeq	r0, r0, r6, lsl #1
    1314:	13050203 	movwne	r0, #20995	; 0x5203
    1318:	04000002 	streq	r0, [r0], #-2
    131c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1320:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    1324:	00027705 	andeq	r7, r2, r5, lsl #14
    1328:	03020500 	movweq	r0, #9472	; 0x2500
    132c:	00009416 	andeq	r9, r0, r6, lsl r4
    1330:	002e0600 	eoreq	r0, lr, r0, lsl #12
    1334:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1338:	00000025 	andeq	r0, r0, r5, lsr #32
    133c:	00fa0600 	rscseq	r0, sl, r0, lsl #12
    1340:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    1344:	00000025 	andeq	r0, r0, r5, lsr #32
    1348:	04070001 	streq	r0, [r7], #-1
    134c:	00ad1303 	adceq	r1, sp, r3, lsl #6
    1350:	49080000 	stmdbmi	r8, {}	; <UNPREDICTABLE>
    1354:	03005244 	movweq	r5, #580	; 0x244
    1358:	00003e15 	andeq	r3, r0, r5, lsl lr
    135c:	00730900 	rsbseq	r0, r3, r0, lsl #18
    1360:	05000000 	streq	r0, [r0, #-0]
    1364:	ce200302 	cdpgt	3, 2, cr0, cr0, cr2, {0}
    1368:	06000000 	streq	r0, [r0], -r0
    136c:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    1370:	00252203 	eoreq	r2, r5, r3, lsl #4
    1374:	06000000 	streq	r0, [r0], -r0
    1378:	00000097 	muleq	r0, r7, r0
    137c:	00252303 	eoreq	r2, r5, r3, lsl #6
    1380:	00010000 	andeq	r0, r1, r0
    1384:	1d030407 	cfstrsne	mvf0, [r3, #-28]	; 0xffffffe4
    1388:	000000e7 	andeq	r0, r0, r7, ror #1
    138c:	52444f08 	subpl	r4, r4, #8, 30
    1390:	3e1f0300 	cdpcc	3, 1, cr0, cr15, cr0, {0}
    1394:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1398:	000000ad 	andeq	r0, r0, sp, lsr #1
    139c:	00000a00 	andeq	r0, r0, r0, lsl #20
    13a0:	03180000 	tsteq	r8, #0
    13a4:	0001300d 	andeq	r3, r1, sp
    13a8:	00430600 	subeq	r0, r3, r0, lsl #12
    13ac:	0f030000 	svceq	0x00030000
    13b0:	0000003e 	andeq	r0, r0, lr, lsr r0
    13b4:	00700600 	rsbseq	r0, r0, r0, lsl #12
    13b8:	10030000 	andne	r0, r3, r0
    13bc:	0000003e 	andeq	r0, r0, lr, lsr r0
    13c0:	001a0604 	andseq	r0, sl, r4, lsl #12
    13c4:	11030000 	mrsne	r0, (UNDEF: 3)
    13c8:	0000003e 	andeq	r0, r0, lr, lsr r0
    13cc:	01c80608 	biceq	r0, r8, r8, lsl #12
    13d0:	12030000 	andne	r0, r3, #0
    13d4:	0000003e 	andeq	r0, r0, lr, lsr r0
    13d8:	00940b0c 	addseq	r0, r4, ip, lsl #22
    13dc:	0b100000 	bleq	4013e4 <startup-0x1fbfec1c>
    13e0:	000000ce 	andeq	r0, r0, lr, asr #1
    13e4:	01020014 	tsteq	r2, r4, lsl r0
    13e8:	03000000 	movweq	r0, #0
    13ec:	0000e728 	andeq	lr, r0, r8, lsr #14
    13f0:	01300c00 	teqeq	r0, r0, lsl #24
    13f4:	c10d0000 	mrsgt	r0, (UNDEF: 13)
    13f8:	03000001 	movweq	r0, #1
    13fc:	0001512a 	andeq	r5, r1, sl, lsr #2
    1400:	3b040e00 	blcc	104c08 <startup-0x1fefb3f8>
    1404:	0f000001 	svceq	0x00000001
    1408:	0000014b 	andeq	r0, r0, fp, asr #2
    140c:	0002800d 	andeq	r8, r2, sp
    1410:	512b0300 			; <UNDEFINED> instruction: 0x512b0300
    1414:	0a000001 	beq	1420 <startup-0x1fffebe0>
    1418:	000005c3 	andeq	r0, r0, r3, asr #11
    141c:	9208010c 	andls	r0, r8, #12, 2
    1420:	06000001 	streq	r0, [r0], -r1
    1424:	0000041e 	andeq	r0, r0, lr, lsl r4
    1428:	003e0a01 	eorseq	r0, lr, r1, lsl #20
    142c:	06000000 	streq	r0, [r0], -r0
    1430:	000005ec 	andeq	r0, r0, ip, ror #11
    1434:	003e0b01 	eorseq	r0, lr, r1, lsl #22
    1438:	10040000 	andne	r0, r4, r0
    143c:	004c4156 	subeq	r4, ip, r6, asr r1
    1440:	003e0c01 	eorseq	r0, lr, r1, lsl #24
    1444:	00080000 	andeq	r0, r8, r0
    1448:	0001610c 	andeq	r6, r1, ip, lsl #2
    144c:	54531100 	ldrbpl	r1, [r3], #-256	; 0xffffff00
    1450:	1001004b 	andne	r0, r1, fp, asr #32
    1454:	000001ae 	andeq	r0, r0, lr, lsr #3
    1458:	0dc80305 	stcleq	3, cr0, [r8, #20]
    145c:	040e2000 	streq	r2, [lr], #-0
    1460:	00000192 	muleq	r0, r2, r1
    1464:	0001a80f 	andeq	sl, r1, pc, lsl #16
    1468:	05b71200 	ldreq	r1, [r7, #512]!	; 0x200
    146c:	30010000 	andcc	r0, r1, r0
    1470:	20000d40 	andcs	r0, r0, r0, asr #26
    1474:	00000018 	andeq	r0, r0, r8, lsl r0
    1478:	01d69c01 	bicseq	r9, r6, r1, lsl #24
    147c:	6d130000 	ldcvs	0, cr0, [r3, #-0]
    1480:	30010073 	andcc	r0, r1, r3, ror r0
    1484:	0000003e 	andeq	r0, r0, lr, lsr r0
    1488:	00749102 	rsbseq	r9, r4, r2, lsl #2
    148c:	0005c812 	andeq	ip, r5, r2, lsl r8
    1490:	1a270100 	bne	9c1898 <startup-0x1f63e768>
    1494:	2620000d 	strtcs	r0, [r0], -sp
    1498:	01000000 	mrseq	r0, (UNDEF: 0)
    149c:	0001f99c 	muleq	r1, ip, r9
    14a0:	73751300 	cmnvc	r5, #0, 6
    14a4:	3e270100 	sufccs	f0, f7, f0
    14a8:	02000000 	andeq	r0, r0, #0
    14ac:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    14b0:	000005d4 	ldrdeq	r0, [r0], -r4
    14b4:	0d101f01 	ldceq	15, cr1, [r0, #-4]
    14b8:	000a2000 	andeq	r2, sl, r0
    14bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    14c0:	0005e014 	andeq	lr, r5, r4, lsl r0
    14c4:	d4120100 	ldrle	r0, [r2], #-256	; 0xffffff00
    14c8:	3c20000c 	stccc	0, cr0, [r0], #-48	; 0xffffffd0
    14cc:	01000000 	mrseq	r0, (UNDEF: 0)
    14d0:	Address 0x00000000000014d0 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001349 	andeq	r1, r0, r9, asr #6
  20:	49002603 	stmdbmi	r0, {r0, r1, r9, sl, sp}
  24:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  28:	0b0b0024 	bleq	2c00c0 <startup-0x1fd3ff40>
  2c:	0e030b3e 	vmoveq.16	d3[0], r0
  30:	24050000 	strcs	r0, [r5], #-0
  34:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  38:	0008030b 	andeq	r0, r8, fp, lsl #6
  3c:	01130600 	tsteq	r3, r0, lsl #12
  40:	0b3a0b0b 	bleq	e82c74 <startup-0x1f17d38c>
  44:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  48:	0d070000 	stceq	0, cr0, [r7, #-0]
  4c:	3a0e0300 	bcc	380c54 <startup-0x1fc7f3ac>
  50:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  54:	000b3813 	andeq	r3, fp, r3, lsl r8
  58:	01170800 	tsteq	r7, r0, lsl #16
  5c:	0b3a0b0b 	bleq	e82c90 <startup-0x1f17d370>
  60:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  64:	0d090000 	stceq	0, cr0, [r9, #-0]
  68:	3a080300 	bcc	200c70 <startup-0x1fdff390>
  6c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  70:	0a000013 	beq	c4 <startup-0x1fffff3c>
  74:	1349000d 	movtne	r0, #36877	; 0x900d
  78:	130b0000 	movwne	r0, #45056	; 0xb000
  7c:	0b0e0301 	bleq	380c88 <startup-0x1fc7f378>
  80:	3b0b3a0b 	blcc	2ce8b4 <startup-0x1fd3174c>
  84:	0013010b 	andseq	r0, r3, fp, lsl #2
  88:	000d0c00 	andeq	r0, sp, r0, lsl #24
  8c:	0b381349 	bleq	e04db8 <startup-0x1f1fb248>
  90:	350d0000 	strcc	r0, [sp, #-0]
  94:	00134900 	andseq	r4, r3, r0, lsl #18
  98:	00340e00 	eorseq	r0, r4, r0, lsl #28
  9c:	0b3a0e03 	bleq	e838b0 <startup-0x1f17c750>
  a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  a8:	0f0f0000 	svceq	0x000f0000
  ac:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  b0:	10000013 	andne	r0, r0, r3, lsl r0
  b4:	0b3e0104 	bleq	f804cc <startup-0x1f07fb34>
  b8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	00001301 	andeq	r1, r0, r1, lsl #6
  c4:	03002811 	movweq	r2, #2065	; 0x811
  c8:	000b1c08 	andeq	r1, fp, r8, lsl #24
  cc:	00281200 	eoreq	r1, r8, r0, lsl #4
  d0:	0b1c0e03 	bleq	7038e4 <startup-0x1f8fc71c>
  d4:	34130000 	ldrcc	r0, [r3], #-0
  d8:	3a0e0300 	bcc	380ce0 <startup-0x1fc7f320>
  dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e0:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  e4:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
  e8:	13470034 	movtne	r0, #28724	; 0x7034
  ec:	0b3b0b3a 	bleq	ec2ddc <startup-0x1f13d224>
  f0:	00001802 	andeq	r1, r0, r2, lsl #16
  f4:	3f012e15 	svccc	0x00012e15
  f8:	3a0e0319 	bcc	380d64 <startup-0x1fc7f29c>
  fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 100:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 104:	96184006 	ldrls	r4, [r8], -r6
 108:	13011942 	movwne	r1, #6466	; 0x1942
 10c:	05160000 	ldreq	r0, [r6, #-0]
 110:	3a080300 	bcc	200d18 <startup-0x1fdff2e8>
 114:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 118:	00180213 	andseq	r0, r8, r3, lsl r2
 11c:	00341700 	eorseq	r1, r4, r0, lsl #14
 120:	0b3a0e03 	bleq	e83934 <startup-0x1f17c6cc>
 124:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 128:	00001802 	andeq	r1, r0, r2, lsl #16
 12c:	3f002e18 	svccc	0x00002e18
 130:	3a0e0319 	bcc	380d9c <startup-0x1fc7f264>
 134:	110b3b0b 	tstne	fp, fp, lsl #22
 138:	40061201 	andmi	r1, r6, r1, lsl #4
 13c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 140:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 144:	03193f01 	tsteq	r9, #1, 30
 148:	3b0b3a0e 	blcc	2ce988 <startup-0x1fd31678>
 14c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 150:	96184006 	ldrls	r4, [r8], -r6
 154:	13011942 	movwne	r1, #6466	; 0x1942
 158:	0b1a0000 	bleq	680160 <startup-0x1f97fea0>
 15c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 160:	1b000006 	blne	180 <startup-0x1ffffe80>
 164:	08030034 	stmdaeq	r3, {r2, r4, r5}
 168:	0b3b0b3a 	bleq	ec2e58 <startup-0x1f13d1a8>
 16c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 170:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 174:	3a0e0301 	bcc	380d80 <startup-0x1fc7f280>
 178:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 17c:	11134919 	tstne	r3, r9, lsl r9
 180:	40061201 	andmi	r1, r6, r1, lsl #4
 184:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 188:	00001301 	andeq	r1, r0, r1, lsl #6
 18c:	0300051d 	movweq	r0, #1309	; 0x51d
 190:	3b0b3a0e 	blcc	2ce9d0 <startup-0x1fd31630>
 194:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 198:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
 19c:	0e03012e 	adfeqsp	f0, f3, #0.5
 1a0:	0b3b0b3a 	bleq	ec2e90 <startup-0x1f13d170>
 1a4:	01111927 	tsteq	r1, r7, lsr #18
 1a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1b0:	1f000013 	svcne	0x00000013
 1b4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
 1b8:	0b3b0b3a 	bleq	ec2ea8 <startup-0x1f13d158>
 1bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1c0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1c4:	20000019 	andcs	r0, r0, r9, lsl r0
 1c8:	0e03012e 	adfeqsp	f0, f3, #0.5
 1cc:	0b3b0b3a 	bleq	ec2ebc <startup-0x1f13d144>
 1d0:	01111927 	tsteq	r1, r7, lsr #18
 1d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1d8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1dc:	21000013 	tstcs	r0, r3, lsl r0
 1e0:	0e03012e 	adfeqsp	f0, f3, #0.5
 1e4:	0b3b0b3a 	bleq	ec2ed4 <startup-0x1f13d12c>
 1e8:	01111927 	tsteq	r1, r7, lsr #18
 1ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f0:	00194297 	mulseq	r9, r7, r2
 1f4:	11010000 	mrsne	r0, (UNDEF: 1)
 1f8:	130e2501 	movwne	r2, #58625	; 0xe501
 1fc:	1b0e030b 	blne	380e30 <startup-0x1fc7f1d0>
 200:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 204:	00171006 	andseq	r1, r7, r6
 208:	00160200 	andseq	r0, r6, r0, lsl #4
 20c:	0b3a0e03 	bleq	e83a20 <startup-0x1f17c5e0>
 210:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 214:	26030000 	strcs	r0, [r3], -r0
 218:	00134900 	andseq	r4, r3, r0, lsl #18
 21c:	00240400 	eoreq	r0, r4, r0, lsl #8
 220:	0b3e0b0b 	bleq	f82e54 <startup-0x1f07d1ac>
 224:	00000e03 	andeq	r0, r0, r3, lsl #28
 228:	0b002405 	bleq	9244 <startup-0x1fff6dbc>
 22c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 230:	06000008 	streq	r0, [r0], -r8
 234:	0b0b0113 	bleq	2c0688 <startup-0x1fd3f978>
 238:	0b3b0b3a 	bleq	ec2f28 <startup-0x1f13d0d8>
 23c:	00001301 	andeq	r1, r0, r1, lsl #6
 240:	03000d07 	movweq	r0, #3335	; 0xd07
 244:	3b0b3a08 	blcc	2cea6c <startup-0x1fd31594>
 248:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 24c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 250:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 254:	0b3b0b3a 	bleq	ec2f44 <startup-0x1f13d0bc>
 258:	0b381349 	bleq	e04f84 <startup-0x1f1fb07c>
 25c:	01090000 	mrseq	r0, (UNDEF: 9)
 260:	01134901 	tsteq	r3, r1, lsl #18
 264:	0a000013 	beq	2b8 <startup-0x1ffffd48>
 268:	13490021 	movtne	r0, #36897	; 0x9021
 26c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 270:	0301130b 	movweq	r1, #4875	; 0x130b
 274:	3a0b0b0e 	bcc	2c2eb4 <startup-0x1fd3d14c>
 278:	010b3b0b 	tsteq	fp, fp, lsl #22
 27c:	0c000013 	stceq	0, cr0, [r0], {19}
 280:	0b0b000f 	bleq	2c02c4 <startup-0x1fd3fd3c>
 284:	00001349 	andeq	r1, r0, r9, asr #6
 288:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
 28c:	00130119 	andseq	r0, r3, r9, lsl r1
 290:	00050e00 	andeq	r0, r5, r0, lsl #28
 294:	00001349 	andeq	r1, r0, r9, asr #6
 298:	0b01170f 	bleq	45edc <startup-0x1ffba124>
 29c:	3b0b3a0b 	blcc	2cead0 <startup-0x1fd31530>
 2a0:	0013010b 	andseq	r0, r3, fp, lsl #2
 2a4:	000d1000 	andeq	r1, sp, r0
 2a8:	0b3a0803 	bleq	e822bc <startup-0x1f17dd44>
 2ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2b0:	0d110000 	ldceq	0, cr0, [r1, #-0]
 2b4:	00134900 	andseq	r4, r3, r0, lsl #18
 2b8:	000d1200 	andeq	r1, sp, r0, lsl #4
 2bc:	0b381349 	bleq	e04fe8 <startup-0x1f1fb018>
 2c0:	35130000 	ldrcc	r0, [r3, #-0]
 2c4:	00134900 	andseq	r4, r3, r0, lsl #18
 2c8:	00341400 	eorseq	r1, r4, r0, lsl #8
 2cc:	0b3a0e03 	bleq	e83ae0 <startup-0x1f17c520>
 2d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2d4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 2d8:	34150000 	ldrcc	r0, [r5], #-0
 2dc:	3a0e0300 	bcc	380ee4 <startup-0x1fc7f11c>
 2e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2e4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 2e8:	16000018 			; <UNDEFINED> instruction: 0x16000018
 2ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2f0:	0b3a0e03 	bleq	e83b04 <startup-0x1f17c4fc>
 2f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2f8:	01111349 	tsteq	r1, r9, asr #6
 2fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 300:	01194297 			; <UNDEFINED> instruction: 0x01194297
 304:	17000013 	smladne	r0, r3, r0, r0
 308:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 30c:	0b3b0b3a 	bleq	ec2ffc <startup-0x1f13d004>
 310:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 314:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 318:	03193f01 	tsteq	r9, #1, 30
 31c:	3b0b3a0e 	blcc	2ceb5c <startup-0x1fd314a4>
 320:	1119270b 	tstne	r9, fp, lsl #14
 324:	40061201 	andmi	r1, r6, r1, lsl #4
 328:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 32c:	00001301 	andeq	r1, r0, r1, lsl #6
 330:	3f012e19 	svccc	0x00012e19
 334:	3a0e0319 	bcc	380fa0 <startup-0x1fc7f060>
 338:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 33c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 340:	96184006 	ldrls	r4, [r8], -r6
 344:	13011942 	movwne	r1, #6466	; 0x1942
 348:	0b1a0000 	bleq	680350 <startup-0x1f97fcb0>
 34c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 350:	1b000006 	blne	370 <startup-0x1ffffc90>
 354:	08030034 	stmdaeq	r3, {r2, r4, r5}
 358:	0b3b0b3a 	bleq	ec3048 <startup-0x1f13cfb8>
 35c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 360:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 364:	03193f01 	tsteq	r9, #1, 30
 368:	3b0b3a0e 	blcc	2ceba8 <startup-0x1fd31458>
 36c:	1119270b 	tstne	r9, fp, lsl #14
 370:	40061201 	andmi	r1, r6, r1, lsl #4
 374:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 378:	01000000 	mrseq	r0, (UNDEF: 0)
 37c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 380:	0e030b13 	vmoveq.32	d3[0], r0
 384:	17100e1b 			; <UNDEFINED> instruction: 0x17100e1b
 388:	16020000 	strne	r0, [r2], -r0
 38c:	3a0e0300 	bcc	380f94 <startup-0x1fc7f06c>
 390:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 394:	03000013 	movweq	r0, #19
 398:	0b0b0024 	bleq	2c0430 <startup-0x1fd3fbd0>
 39c:	0e030b3e 	vmoveq.16	d3[0], r0
 3a0:	24040000 	strcs	r0, [r4], #-0
 3a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3a8:	0008030b 	andeq	r0, r8, fp, lsl #6
 3ac:	01130500 	tsteq	r3, r0, lsl #10
 3b0:	0b3a0b0b 	bleq	e82fe4 <startup-0x1f17d01c>
 3b4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3b8:	0d060000 	stceq	0, cr0, [r6, #-0]
 3bc:	3a0e0300 	bcc	380fc4 <startup-0x1fc7f03c>
 3c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3c4:	000b3813 	andeq	r3, fp, r3, lsl r8
 3c8:	01170700 	tsteq	r7, r0, lsl #14
 3cc:	0b3a0b0b 	bleq	e83000 <startup-0x1f17d000>
 3d0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3d4:	0d080000 	stceq	0, cr0, [r8, #-0]
 3d8:	3a080300 	bcc	200fe0 <startup-0x1fdff020>
 3dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3e0:	09000013 	stmdbeq	r0, {r0, r1, r4}
 3e4:	1349000d 	movtne	r0, #36877	; 0x900d
 3e8:	130a0000 	movwne	r0, #40960	; 0xa000
 3ec:	0b0e0301 	bleq	380ff8 <startup-0x1fc7f008>
 3f0:	3b0b3a0b 	blcc	2cec24 <startup-0x1fd313dc>
 3f4:	0013010b 	andseq	r0, r3, fp, lsl #2
 3f8:	000d0b00 	andeq	r0, sp, r0, lsl #22
 3fc:	0b381349 	bleq	e05128 <startup-0x1f1faed8>
 400:	350c0000 	strcc	r0, [ip, #-0]
 404:	00134900 	andseq	r4, r3, r0, lsl #18
 408:	00340d00 	eorseq	r0, r4, r0, lsl #26
 40c:	0b3a0e03 	bleq	e83c20 <startup-0x1f17c3e0>
 410:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 414:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 418:	0f0e0000 	svceq	0x000e0000
 41c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 420:	0f000013 	svceq	0x00000013
 424:	13490026 	movtne	r0, #36902	; 0x9026
 428:	34100000 	ldrcc	r0, [r0], #-0
 42c:	3a134700 	bcc	4d2034 <startup-0x1fb2dfcc>
 430:	020b3b0b 	andeq	r3, fp, #11264	; 0x2c00
 434:	00000018 	andeq	r0, r0, r8, lsl r0
 438:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 43c:	030b130e 	movweq	r1, #45838	; 0xb30e
 440:	110e1b0e 	tstne	lr, lr, lsl #22
 444:	10061201 	andne	r1, r6, r1, lsl #4
 448:	02000017 	andeq	r0, r0, #23
 44c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 450:	0b3b0b3a 	bleq	ec3140 <startup-0x1f13cec0>
 454:	00001349 	andeq	r1, r0, r9, asr #6
 458:	0b002403 	bleq	946c <startup-0x1fff6b94>
 45c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 460:	0400000e 	streq	r0, [r0], #-14
 464:	0b0b0024 	bleq	2c04fc <startup-0x1fd3fb04>
 468:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 46c:	13050000 	movwne	r0, #20480	; 0x5000
 470:	3a0b0b01 	bcc	2c307c <startup-0x1fd3cf84>
 474:	010b3b0b 	tsteq	fp, fp, lsl #22
 478:	06000013 			; <UNDEFINED> instruction: 0x06000013
 47c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 480:	0b3b0b3a 	bleq	ec3170 <startup-0x1f13ce90>
 484:	0b381349 	bleq	e051b0 <startup-0x1f1fae50>
 488:	17070000 	strne	r0, [r7, -r0]
 48c:	3a0b0b01 	bcc	2c3098 <startup-0x1fd3cf68>
 490:	010b3b0b 	tsteq	fp, fp, lsl #22
 494:	08000013 	stmdaeq	r0, {r0, r1, r4}
 498:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 49c:	0b3b0b3a 	bleq	ec318c <startup-0x1f13ce74>
 4a0:	00001349 	andeq	r1, r0, r9, asr #6
 4a4:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
 4a8:	0a000013 	beq	4fc <startup-0x1ffffb04>
 4ac:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 4b0:	0b3a0b0b 	bleq	e830e4 <startup-0x1f17cf1c>
 4b4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 4b8:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 4bc:	38134900 	ldmdacc	r3, {r8, fp, lr}
 4c0:	0c00000b 	stceq	0, cr0, [r0], {11}
 4c4:	13490035 	movtne	r0, #36917	; 0x9035
 4c8:	340d0000 	strcc	r0, [sp], #-0
 4cc:	3a0e0300 	bcc	3810d4 <startup-0x1fc7ef2c>
 4d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4d4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 4d8:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 4dc:	0b0b000f 	bleq	2c0520 <startup-0x1fd3fae0>
 4e0:	00001349 	andeq	r1, r0, r9, asr #6
 4e4:	4900260f 	stmdbmi	r0, {r0, r1, r2, r3, r9, sl, sp}
 4e8:	10000013 	andne	r0, r0, r3, lsl r0
 4ec:	0b3e0104 	bleq	f80904 <startup-0x1f07f6fc>
 4f0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 4f4:	0b3b0b3a 	bleq	ec31e4 <startup-0x1f13ce1c>
 4f8:	00001301 	andeq	r1, r0, r1, lsl #6
 4fc:	03002811 	movweq	r2, #2065	; 0x811
 500:	000b1c08 	andeq	r1, fp, r8, lsl #24
 504:	00281200 	eoreq	r1, r8, r0, lsl #4
 508:	0b1c0e03 	bleq	703d1c <startup-0x1f8fc2e4>
 50c:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 510:	03193f00 	tsteq	r9, #0, 30
 514:	3b0b3a0e 	blcc	2ced54 <startup-0x1fd312ac>
 518:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 51c:	96184006 	ldrls	r4, [r8], -r6
 520:	00001942 	andeq	r1, r0, r2, asr #18
 524:	3f012e14 	svccc	0x00012e14
 528:	3a0e0319 	bcc	381194 <startup-0x1fc7ee6c>
 52c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 530:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 534:	96184006 	ldrls	r4, [r8], -r6
 538:	13011942 	movwne	r1, #6466	; 0x1942
 53c:	05150000 	ldreq	r0, [r5, #-0]
 540:	3a080300 	bcc	201148 <startup-0x1fdfeeb8>
 544:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 548:	00180213 	andseq	r0, r8, r3, lsl r2
 54c:	00341600 	eorseq	r1, r4, r0, lsl #12
 550:	0b3a0e03 	bleq	e83d64 <startup-0x1f17c29c>
 554:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 558:	00001802 	andeq	r1, r0, r2, lsl #16
 55c:	03012e17 	movweq	r2, #7703	; 0x1e17
 560:	3b0b3a0e 	blcc	2ceda0 <startup-0x1fd31260>
 564:	1119270b 	tstne	r9, fp, lsl #14
 568:	40061201 	andmi	r1, r6, r1, lsl #4
 56c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 570:	00001301 	andeq	r1, r0, r1, lsl #6
 574:	03012e18 	movweq	r2, #7704	; 0x1e18
 578:	3b0b3a0e 	blcc	2cedb8 <startup-0x1fd31248>
 57c:	1113490b 	tstne	r3, fp, lsl #18
 580:	40061201 	andmi	r1, r6, r1, lsl #4
 584:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 588:	00001301 	andeq	r1, r0, r1, lsl #6
 58c:	03003419 	movweq	r3, #1049	; 0x419
 590:	3b0b3a08 	blcc	2cedb8 <startup-0x1fd31248>
 594:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 598:	1a000018 	bne	600 <startup-0x1ffffa00>
 59c:	0e03012e 	adfeqsp	f0, f3, #0.5
 5a0:	0b3b0b3a 	bleq	ec3290 <startup-0x1f13cd70>
 5a4:	01111927 	tsteq	r1, r7, lsr #18
 5a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5ac:	01194297 			; <UNDEFINED> instruction: 0x01194297
 5b0:	1b000013 	blne	604 <startup-0x1ffff9fc>
 5b4:	0e03012e 	adfeqsp	f0, f3, #0.5
 5b8:	0b3b0b3a 	bleq	ec32a8 <startup-0x1f13cd58>
 5bc:	01111927 	tsteq	r1, r7, lsr #18
 5c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5c4:	00194297 	mulseq	r9, r7, r2
 5c8:	11010000 	mrsne	r0, (UNDEF: 1)
 5cc:	130e2501 	movwne	r2, #58625	; 0xe501
 5d0:	1b0e030b 	blne	381204 <startup-0x1fc7edfc>
 5d4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 5d8:	00171006 	andseq	r1, r7, r6
 5dc:	00160200 	andseq	r0, r6, r0, lsl #4
 5e0:	0b3a0e03 	bleq	e83df4 <startup-0x1f17c20c>
 5e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5e8:	26030000 	strcs	r0, [r3], -r0
 5ec:	00134900 	andseq	r4, r3, r0, lsl #18
 5f0:	00240400 	eoreq	r0, r4, r0, lsl #8
 5f4:	0b3e0b0b 	bleq	f83228 <startup-0x1f07cdd8>
 5f8:	00000e03 	andeq	r0, r0, r3, lsl #28
 5fc:	0b002405 	bleq	9618 <startup-0x1fff69e8>
 600:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 604:	06000008 	streq	r0, [r0], -r8
 608:	0b0b0113 	bleq	2c0a5c <startup-0x1fd3f5a4>
 60c:	0b3b0b3a 	bleq	ec32fc <startup-0x1f13cd04>
 610:	00001301 	andeq	r1, r0, r1, lsl #6
 614:	03000d07 	movweq	r0, #3335	; 0xd07
 618:	3b0b3a0e 	blcc	2cee58 <startup-0x1fd311a8>
 61c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 620:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 624:	0b0b0117 	bleq	2c0a88 <startup-0x1fd3f578>
 628:	0b3b0b3a 	bleq	ec3318 <startup-0x1f13cce8>
 62c:	00001301 	andeq	r1, r0, r1, lsl #6
 630:	03000d09 	movweq	r0, #3337	; 0xd09
 634:	3b0b3a08 	blcc	2cee5c <startup-0x1fd311a4>
 638:	0013490b 	andseq	r4, r3, fp, lsl #18
 63c:	000d0a00 	andeq	r0, sp, r0, lsl #20
 640:	00001349 	andeq	r1, r0, r9, asr #6
 644:	0301130b 	movweq	r1, #4875	; 0x130b
 648:	3a0b0b0e 	bcc	2c3288 <startup-0x1fd3cd78>
 64c:	010b3b0b 	tsteq	fp, fp, lsl #22
 650:	0c000013 	stceq	0, cr0, [r0], {19}
 654:	1349000d 	movtne	r0, #36877	; 0x900d
 658:	00000b38 	andeq	r0, r0, r8, lsr fp
 65c:	4900350d 	stmdbmi	r0, {r0, r2, r3, r8, sl, ip, sp}
 660:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 664:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 668:	0b3b0b3a 	bleq	ec3358 <startup-0x1f13cca8>
 66c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 670:	0000193c 	andeq	r1, r0, ip, lsr r9
 674:	0b000f0f 	bleq	42b8 <startup-0x1fffbd48>
 678:	0013490b 	andseq	r4, r3, fp, lsl #18
 67c:	01041000 	mrseq	r1, (UNDEF: 4)
 680:	0b0b0b3e 	bleq	2c3380 <startup-0x1fd3cc80>
 684:	0b3a1349 	bleq	e853b0 <startup-0x1f17ac50>
 688:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 68c:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
 690:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 694:	1200000b 	andne	r0, r0, #11
 698:	13490101 	movtne	r0, #37121	; 0x9101
 69c:	00001301 	andeq	r1, r0, r1, lsl #6
 6a0:	49002113 	stmdbmi	r0, {r0, r1, r4, r8, sp}
 6a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
 6a8:	00341400 	eorseq	r1, r4, r0, lsl #8
 6ac:	0b3a0803 	bleq	e826c0 <startup-0x1f17d940>
 6b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6b4:	00001802 	andeq	r1, r0, r2, lsl #16
 6b8:	3f012e15 	svccc	0x00012e15
 6bc:	3a0e0319 	bcc	381328 <startup-0x1fc7ecd8>
 6c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6c4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 6c8:	96184006 	ldrls	r4, [r8], -r6
 6cc:	13011942 	movwne	r1, #6466	; 0x1942
 6d0:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 6d4:	3a0e0301 	bcc	3812e0 <startup-0x1fc7ed20>
 6d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6dc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 6e0:	97184006 	ldrls	r4, [r8, -r6]
 6e4:	13011942 	movwne	r1, #6466	; 0x1942
 6e8:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 6ec:	3a0e0301 	bcc	3812f8 <startup-0x1fc7ed08>
 6f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6f4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6f8:	97184006 	ldrls	r4, [r8, -r6]
 6fc:	00001942 	andeq	r1, r0, r2, asr #18
 700:	03000518 	movweq	r0, #1304	; 0x518
 704:	3b0b3a08 	blcc	2cef2c <startup-0x1fd310d4>
 708:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 70c:	00000018 	andeq	r0, r0, r8, lsl r0
 710:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 714:	030b130e 	movweq	r1, #45838	; 0xb30e
 718:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 71c:	10011117 	andne	r1, r1, r7, lsl r1
 720:	02000017 	andeq	r0, r0, #23
 724:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 728:	0b3b0b3a 	bleq	ec3418 <startup-0x1f13cbe8>
 72c:	00001349 	andeq	r1, r0, r9, asr #6
 730:	49002603 	stmdbmi	r0, {r0, r1, r9, sl, sp}
 734:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 738:	0b0b0024 	bleq	2c07d0 <startup-0x1fd3f830>
 73c:	0e030b3e 	vmoveq.16	d3[0], r0
 740:	24050000 	strcs	r0, [r5], #-0
 744:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 748:	0008030b 	andeq	r0, r8, fp, lsl #6
 74c:	01130600 	tsteq	r3, r0, lsl #12
 750:	0b3a0b0b 	bleq	e83384 <startup-0x1f17cc7c>
 754:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 758:	0d070000 	stceq	0, cr0, [r7, #-0]
 75c:	3a0e0300 	bcc	381364 <startup-0x1fc7ec9c>
 760:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 764:	000b3813 	andeq	r3, fp, r3, lsl r8
 768:	01170800 	tsteq	r7, r0, lsl #16
 76c:	0b3a0b0b 	bleq	e833a0 <startup-0x1f17cc60>
 770:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 774:	0d090000 	stceq	0, cr0, [r9, #-0]
 778:	3a080300 	bcc	201380 <startup-0x1fdfec80>
 77c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 780:	0a000013 	beq	7d4 <startup-0x1ffff82c>
 784:	1349000d 	movtne	r0, #36877	; 0x900d
 788:	130b0000 	movwne	r0, #45056	; 0xb000
 78c:	0b0e0301 	bleq	381398 <startup-0x1fc7ec68>
 790:	3b0b3a0b 	blcc	2cefc4 <startup-0x1fd3103c>
 794:	0013010b 	andseq	r0, r3, fp, lsl #2
 798:	000d0c00 	andeq	r0, sp, r0, lsl #24
 79c:	0b381349 	bleq	e054c8 <startup-0x1f1fab38>
 7a0:	350d0000 	strcc	r0, [sp, #-0]
 7a4:	00134900 	andseq	r4, r3, r0, lsl #18
 7a8:	00340e00 	eorseq	r0, r4, r0, lsl #28
 7ac:	0b3a0e03 	bleq	e83fc0 <startup-0x1f17c040>
 7b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7b4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 7b8:	0f0f0000 	svceq	0x000f0000
 7bc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 7c0:	10000013 	andne	r0, r0, r3, lsl r0
 7c4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 7c8:	0b3b0b3a 	bleq	ec34b8 <startup-0x1f13cb48>
 7cc:	0b381349 	bleq	e054f8 <startup-0x1f1fab08>
 7d0:	01110000 	tsteq	r1, r0
 7d4:	01134901 	tsteq	r3, r1, lsl #18
 7d8:	12000013 	andne	r0, r0, #19
 7dc:	13490021 	movtne	r0, #36897	; 0x9021
 7e0:	00000b2f 	andeq	r0, r0, pc, lsr #22
 7e4:	27011513 	smladcs	r1, r3, r5, r1
 7e8:	00130119 	andseq	r0, r3, r9, lsl r1
 7ec:	00051400 	andeq	r1, r5, r0, lsl #8
 7f0:	00001349 	andeq	r1, r0, r9, asr #6
 7f4:	3f012e15 	svccc	0x00012e15
 7f8:	3a0e0319 	bcc	381464 <startup-0x1fc7eb9c>
 7fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 800:	11134919 	tstne	r3, r9, lsl r9
 804:	40061201 	andmi	r1, r6, r1, lsl #4
 808:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 80c:	00001301 	andeq	r1, r0, r1, lsl #6
 810:	03003416 	movweq	r3, #1046	; 0x416
 814:	3b0b3a0e 	blcc	2cf054 <startup-0x1fd30fac>
 818:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 81c:	17000018 	smladne	r0, r8, r0, r0
 820:	08030034 	stmdaeq	r3, {r2, r4, r5}
 824:	0b3b0b3a 	bleq	ec3514 <startup-0x1f13caec>
 828:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 82c:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 830:	03193f00 	tsteq	r9, #0, 30
 834:	3b0b3a0e 	blcc	2cf074 <startup-0x1fd30f8c>
 838:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 83c:	97184006 	ldrls	r4, [r8, -r6]
 840:	00001942 	andeq	r1, r0, r2, asr #18
 844:	3f002e19 	svccc	0x00002e19
 848:	3a0e0319 	bcc	3814b4 <startup-0x1fc7eb4c>
 84c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 850:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 854:	97184006 	ldrls	r4, [r8, -r6]
 858:	00001942 	andeq	r1, r0, r2, asr #18
 85c:	01110100 	tsteq	r1, r0, lsl #2
 860:	0b130e25 	bleq	4c40fc <startup-0x1fb3bf04>
 864:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 868:	06120111 			; <UNDEFINED> instruction: 0x06120111
 86c:	00001710 	andeq	r1, r0, r0, lsl r7
 870:	03001602 	movweq	r1, #1538	; 0x602
 874:	3b0b3a0e 	blcc	2cf0b4 <startup-0x1fd30f4c>
 878:	0013490b 	andseq	r4, r3, fp, lsl #18
 87c:	00240300 	eoreq	r0, r4, r0, lsl #6
 880:	0b3e0b0b 	bleq	f834b4 <startup-0x1f07cb4c>
 884:	00000e03 	andeq	r0, r0, r3, lsl #28
 888:	0b002404 	bleq	98a0 <startup-0x1fff6760>
 88c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 890:	05000008 	streq	r0, [r0, #-8]
 894:	0b0b0113 	bleq	2c0ce8 <startup-0x1fd3f318>
 898:	0b3b0b3a 	bleq	ec3588 <startup-0x1f13ca78>
 89c:	00001301 	andeq	r1, r0, r1, lsl #6
 8a0:	03000d06 	movweq	r0, #3334	; 0xd06
 8a4:	3b0b3a0e 	blcc	2cf0e4 <startup-0x1fd30f1c>
 8a8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 8ac:	0700000b 	streq	r0, [r0, -fp]
 8b0:	0b0b0117 	bleq	2c0d14 <startup-0x1fd3f2ec>
 8b4:	0b3b0b3a 	bleq	ec35a4 <startup-0x1f13ca5c>
 8b8:	00001301 	andeq	r1, r0, r1, lsl #6
 8bc:	03000d08 	movweq	r0, #3336	; 0xd08
 8c0:	3b0b3a08 	blcc	2cf0e8 <startup-0x1fd30f18>
 8c4:	0013490b 	andseq	r4, r3, fp, lsl #18
 8c8:	000d0900 	andeq	r0, sp, r0, lsl #18
 8cc:	00001349 	andeq	r1, r0, r9, asr #6
 8d0:	0301130a 	movweq	r1, #4874	; 0x130a
 8d4:	3a0b0b0e 	bcc	2c3514 <startup-0x1fd3caec>
 8d8:	010b3b0b 	tsteq	fp, fp, lsl #22
 8dc:	0b000013 	bleq	930 <startup-0x1ffff6d0>
 8e0:	1349000d 	movtne	r0, #36877	; 0x900d
 8e4:	00000b38 	andeq	r0, r0, r8, lsr fp
 8e8:	4900350c 	stmdbmi	r0, {r2, r3, r8, sl, ip, sp}
 8ec:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 8f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 8f4:	0b3b0b3a 	bleq	ec35e4 <startup-0x1f13ca1c>
 8f8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 8fc:	0000193c 	andeq	r1, r0, ip, lsr r9
 900:	0b000f0e 	bleq	4540 <startup-0x1fffbac0>
 904:	0013490b 	andseq	r4, r3, fp, lsl #18
 908:	00260f00 	eoreq	r0, r6, r0, lsl #30
 90c:	00001349 	andeq	r1, r0, r9, asr #6
 910:	03000d10 	movweq	r0, #3344	; 0xd10
 914:	3b0b3a08 	blcc	2cf13c <startup-0x1fd30ec4>
 918:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 91c:	1100000b 	tstne	r0, fp
 920:	08030034 	stmdaeq	r3, {r2, r4, r5}
 924:	0b3b0b3a 	bleq	ec3614 <startup-0x1f13c9ec>
 928:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 92c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 930:	03193f01 	tsteq	r9, #1, 30
 934:	3b0b3a0e 	blcc	2cf174 <startup-0x1fd30e8c>
 938:	1119270b 	tstne	r9, fp, lsl #14
 93c:	40061201 	andmi	r1, r6, r1, lsl #4
 940:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 944:	00001301 	andeq	r1, r0, r1, lsl #6
 948:	03000513 	movweq	r0, #1299	; 0x513
 94c:	3b0b3a08 	blcc	2cf174 <startup-0x1fd30e8c>
 950:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 954:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 958:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 95c:	0b3a0e03 	bleq	e84170 <startup-0x1f17be90>
 960:	01110b3b 	tsteq	r1, fp, lsr fp
 964:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 968:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000054a 	andeq	r0, r0, sl, asr #10
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	047c0002 	ldrbteq	r0, [ip], #-2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	2000055c 	andcs	r0, r0, ip, asr r5
  34:	00000264 	andeq	r0, r0, r4, ror #4
	...
  40:	00000014 	andeq	r0, r0, r4, lsl r0
  44:	087e0002 	ldmdaeq	lr!, {r1}^
  48:	00040000 	andeq	r0, r4, r0
	...
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	09f20002 	ldmibeq	r2!, {r1}^
  60:	00040000 	andeq	r0, r4, r0
  64:	00000000 	andeq	r0, r0, r0
  68:	200007c0 	andcs	r0, r0, r0, asr #15
  6c:	000002ce 	andeq	r0, r0, lr, asr #5
	...
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	0d7d0002 	ldcleq	0, cr0, [sp, #-8]!
  80:	00040000 	andeq	r0, r4, r0
  84:	00000000 	andeq	r0, r0, r0
  88:	20000a90 	mulcs	r0, r0, sl
  8c:	00000128 	andeq	r0, r0, r8, lsr #2
	...
  98:	00000024 	andeq	r0, r0, r4, lsr #32
  9c:	0fa00002 	svceq	0x00a00002
  a0:	00040000 	andeq	r0, r4, r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	20000bb8 			; <UNDEFINED> instruction: 0x20000bb8
  ac:	0000011c 	andeq	r0, r0, ip, lsl r1
  b0:	20000000 	andcs	r0, r0, r0
  b4:	0000000c 	andeq	r0, r0, ip
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	12b60002 	adcsne	r0, r6, #2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	20000cd4 	ldrdcs	r0, [r0], -r4
  d4:	00000084 	andeq	r0, r0, r4, lsl #1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000148 	andeq	r0, r0, r8, asr #2
   4:	00770002 	rsbseq	r0, r7, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  20:	63736f2f 	cmnvs	r3, #47, 30	; 0xbc
  24:	442f7261 	strtmi	r7, [pc], #-609	; 2c <startup-0x1fffffd4>
  28:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
  2c:	2f746e65 	svccs	0x00746e65
  30:	2f504f4d 	svccs	0x00504f4d
  34:	676e6f50 			; <UNDEFINED> instruction: 0x676e6f50
  38:	636e6900 	cmnvs	lr, #0, 18
  3c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  40:	72670000 	rsbvc	r0, r7, #0
  44:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  48:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
  4c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  50:	0100632e 	tsteq	r0, lr, lsr #6
  54:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
  58:	66656474 			; <UNDEFINED> instruction: 0x66656474
  5c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
  60:	50470000 	subpl	r0, r7, r0
  64:	682e4f49 	stmdavs	lr!, {r0, r3, r6, r8, r9, sl, fp, lr}
  68:	00000200 	andeq	r0, r0, r0, lsl #4
  6c:	70617267 	rsbvc	r7, r1, r7, ror #4
  70:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
  74:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  78:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
  7c:	00000200 	andeq	r0, r0, r0, lsl #4
  80:	02050000 	andeq	r0, r5, #0
  84:	20000010 	andcs	r0, r0, r0, lsl r0
  88:	67012503 	strvs	r2, [r1, -r3, lsl #10]
  8c:	6a59c967 	bvs	1672630 <startup-0x1e98d9d0>
  90:	75bb6767 	ldrvc	r6, [fp, #1895]!	; 0x767
  94:	03676959 	cmneq	r7, #1458176	; 0x164000
  98:	6c037414 	cfstrsvs	mvf7, [r3], {20}
  9c:	4a140320 	bmi	500d24 <startup-0x1faff2dc>
  a0:	3d206f03 	stccc	15, cr6, [r0, #-12]!
  a4:	233d3d23 	teqcs	sp, #2240	; 0x8c0
  a8:	3d233d3d 	stccc	13, cr3, [r3, #-244]!	; 0xffffff0c
  ac:	3d2f4d22 	stccc	13, cr4, [pc, #-136]!	; 2c <startup-0x1fffffd4>
  b0:	313d3d4b 	teqcc	sp, fp, asr #26
  b4:	2f3d2f3d 	svccs	0x003d2f3d
  b8:	3d24258c 	cfstr32cc	mvfx2, [r4, #-560]!	; 0xfffffdd0
  bc:	3d67a14b 	stfccp	f2, [r7, #-300]!	; 0xfffffed4
  c0:	2f593d4b 	svccs	0x00593d4b
  c4:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
  c8:	303d4b4c 	eorscc	r4, sp, ip, asr #22
  cc:	3d313d4b 	ldccc	13, cr3, [r1, #-300]!	; 0xfffffed4
  d0:	595991a1 	ldmdbpl	r9, {r0, r5, r7, r8, ip, pc}^
  d4:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
  d8:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
  dc:	3d4b313d 	stfcce	f3, [fp, #-244]	; 0xffffff0c
  e0:	3d91773d 	ldccc	7, cr7, [r1, #244]	; 0xf4
  e4:	4d833d59 	stcmi	13, cr3, [r3, #356]	; 0x164
  e8:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
  ec:	684d833d 	stmdavs	sp, {r0, r2, r3, r4, r5, r8, r9, pc}^
  f0:	3d4d6759 	stclcc	7, cr6, [sp, #-356]	; 0xfffffe9c
  f4:	004c9f4c 	subeq	r9, ip, ip, asr #30
  f8:	50030402 	andpl	r0, r3, r2, lsl #8
  fc:	03040200 	movweq	r0, #16896	; 0x4200
 100:	004a7a03 	subeq	r7, sl, r3, lsl #20
 104:	06010402 	streq	r0, [r1], -r2, lsl #8
 108:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 10c:	00530602 	subseq	r0, r3, r2, lsl #12
 110:	06010402 	streq	r0, [r1], -r2, lsl #8
 114:	0f030658 	svceq	0x00030658
 118:	3d2f4d58 	stccc	13, cr4, [pc, #-352]!	; ffffffc0 <STK+0xdffff1f8>
 11c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 120:	4b4b4b3d 	blmi	12d2e1c <startup-0x1ed2d1e4>
 124:	3f3d4c4b 	svccc	0x003d4c4b
 128:	040200e5 	streq	r0, [r2], #-229	; 0xffffff1b
 12c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 130:	4b9fad6a 	blmi	fe7eb6e0 <STK+0xde7ea918>
 134:	774b756c 	strbvc	r7, [fp, -ip, ror #10]
 138:	c9c9af4b 	stmibgt	r9, {r0, r1, r3, r6, r8, r9, sl, fp, sp, pc}^
 13c:	a14bae91 			; <UNDEFINED> instruction: 0xa14bae91
 140:	ac5f0393 	mrrcge	3, 9, r0, pc, cr3	; <UNPREDICTABLE>
 144:	02202303 	eoreq	r2, r0, #201326592	; 0xc000000
 148:	01010003 	tsteq	r1, r3
 14c:	000000db 	ldrdeq	r0, [r0], -fp
 150:	007b0002 	rsbseq	r0, fp, r2
 154:	01020000 	mrseq	r0, (UNDEF: 2)
 158:	000d0efb 	strdeq	r0, [sp], -fp
 15c:	01010101 	tsteq	r1, r1, lsl #2
 160:	01000000 	mrseq	r0, (UNDEF: 0)
 164:	2f010000 	svccs	0x00010000
 168:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 16c:	63736f2f 	cmnvs	r3, #47, 30	; 0xbc
 170:	442f7261 	strtmi	r7, [pc], #-609	; 178 <startup-0x1ffffe88>
 174:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
 178:	2f746e65 	svccs	0x00746e65
 17c:	2f504f4d 	svccs	0x00504f4d
 180:	676e6f50 			; <UNDEFINED> instruction: 0x676e6f50
 184:	636e6900 	cmnvs	lr, #0, 18
 188:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 18c:	626f0000 	rsbvs	r0, pc, #0
 190:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 194:	0100632e 	tsteq	r0, lr, lsr #6
 198:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
 19c:	66656474 			; <UNDEFINED> instruction: 0x66656474
 1a0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 1a4:	626f0000 	rsbvs	r0, pc, #0
 1a8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 1ac:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 1b0:	50470000 	subpl	r0, r7, r0
 1b4:	682e4f49 	stmdavs	lr!, {r0, r3, r6, r8, r9, sl, fp, lr}
 1b8:	00000200 	andeq	r0, r0, r0, lsl #4
 1bc:	70617267 	rsbvc	r7, r1, r7, ror #4
 1c0:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 1c4:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 1c8:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 1cc:	00000200 	andeq	r0, r0, r0, lsl #4
 1d0:	02050000 	andeq	r0, r5, #0
 1d4:	2000055c 	andcs	r0, r0, ip, asr r5
 1d8:	4b011303 	blmi	44dec <startup-0x1ffbb214>
 1dc:	03040200 	movweq	r0, #16896	; 0x4200
 1e0:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 1e4:	00ff0803 	rscseq	r0, pc, r3, lsl #16
 1e8:	06010402 	streq	r0, [r1], -r2, lsl #8
 1ec:	4d850666 	stcmi	6, cr0, [r5, #408]	; 0x198
 1f0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 1f4:	02005903 	andeq	r5, r0, #49152	; 0xc000
 1f8:	ff080304 			; <UNDEFINED> instruction: 0xff080304
 1fc:	01040200 	mrseq	r0, R12_usr
 200:	85066606 	strhi	r6, [r6, #-1542]	; 0xfffff9fa
 204:	c94c4c4c 	stmdbgt	ip, {r2, r3, r6, sl, fp, lr}^
 208:	040200cb 	streq	r0, [r2], #-203	; 0xffffff35
 20c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 210:	020093bb 	andeq	r9, r0, #-335544318	; 0xec000002
 214:	58060104 	stmdapl	r6, {r2, r8}
 218:	4c93bb06 	vldmiami	r3, {d11-d13}
 21c:	4b4bbb85 	blmi	12ef038 <startup-0x1ed10fc8>
 220:	0903f34c 	stmdbeq	r3, {r2, r3, r6, r8, r9, ip, sp, lr, pc}
 224:	0e02e408 	cdpeq	4, 0, cr14, cr2, cr8, {0}
 228:	5f010100 	svcpl	0x00010100
 22c:	02000000 	andeq	r0, r0, #0
 230:	00005900 	andeq	r5, r0, r0, lsl #18
 234:	fb010200 	blx	40a3e <startup-0x1ffbf5c2>
 238:	01000d0e 	tsteq	r0, lr, lsl #26
 23c:	00010101 	andeq	r0, r1, r1, lsl #2
 240:	00010000 	andeq	r0, r1, r0
 244:	6e690100 	powvse	f0, f1, f0
 248:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 24c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
 250:	2f656d6f 	svccs	0x00656d6f
 254:	6163736f 	cmnvs	r3, pc, ror #6
 258:	6f442f72 	svcvs	0x00442f72
 25c:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
 260:	4d2f746e 	cfstrsmi	mvf7, [pc, #-440]!	; b0 <startup-0x1fffff50>
 264:	502f504f 	eorpl	r5, pc, pc, asr #32
 268:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 26c:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
 270:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
 274:	00010068 	andeq	r0, r1, r8, rrx
 278:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 27c:	00682e4f 	rsbeq	r2, r8, pc, asr #28
 280:	47000001 	strmi	r0, [r0, -r1]
 284:	2e4f4950 			; <UNDEFINED> instruction: 0x2e4f4950
 288:	00020063 	andeq	r0, r2, r3, rrx
 28c:	00d00000 	sbcseq	r0, r0, r0
 290:	00020000 	andeq	r0, r2, r0
 294:	00000061 	andeq	r0, r0, r1, rrx
 298:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 29c:	0101000d 	tsteq	r1, sp
 2a0:	00000101 	andeq	r0, r0, r1, lsl #2
 2a4:	00000100 	andeq	r0, r0, r0, lsl #2
 2a8:	6f682f01 	svcvs	0x00682f01
 2ac:	6f2f656d 	svcvs	0x002f656d
 2b0:	72616373 	rsbvc	r6, r1, #-872415231	; 0xcc000001
 2b4:	6b6f442f 	blvs	1bd1378 <startup-0x1e42ec88>
 2b8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 2bc:	4f4d2f74 	svcmi	0x004d2f74
 2c0:	6f502f50 	svcvs	0x00502f50
 2c4:	6900676e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 2c8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 2cc:	00006564 	andeq	r6, r0, r4, ror #10
 2d0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 2d4:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
 2d8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 2dc:	0100632e 	tsteq	r0, lr, lsr #6
 2e0:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
 2e4:	66656474 			; <UNDEFINED> instruction: 0x66656474
 2e8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 2ec:	50470000 	subpl	r0, r7, r0
 2f0:	682e4f49 	stmdavs	lr!, {r0, r3, r6, r8, r9, sl, fp, lr}
 2f4:	00000200 	andeq	r0, r0, r0, lsl #4
 2f8:	02050000 	andeq	r0, r5, #0
 2fc:	200007c0 	andcs	r0, r0, r0, asr #15
 300:	67011f03 	strvs	r1, [r1, -r3, lsl #30]
 304:	78599f67 	ldmdavc	r9, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, pc}^
 308:	59e56767 	stmibpl	r5!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
 30c:	593d6769 	ldmdbpl	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
 310:	3d773d2f 	ldclcc	13, cr3, [r7, #-188]!	; 0xffffff44
 314:	592f2f3d 	stmdbpl	pc!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
 318:	3d692f3d 	stclcc	15, cr2, [r9, #-244]!	; 0xffffff0c
 31c:	593d3d4b 	ldmdbpl	sp!, {r0, r1, r3, r6, r8, sl, fp, ip, sp}
 320:	3da12f4b 	stccc	15, cr2, [r1, #300]!	; 0x12c
 324:	593d3d4b 	ldmdbpl	sp!, {r0, r1, r3, r6, r8, sl, fp, ip, sp}
 328:	67a12f4b 	strvs	r2, [r1, fp, asr #30]!
 32c:	4d593d3d 	ldclmi	13, cr3, [r9, #-244]	; 0xffffff0c
 330:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 334:	0200674d 	andeq	r6, r0, #20185088	; 0x1340000
 338:	20060104 	andcs	r0, r6, r4, lsl #2
 33c:	593d8506 	ldmdbpl	sp!, {r1, r2, r8, sl, pc}
 340:	0200674d 	andeq	r6, r0, #20185088	; 0x1340000
 344:	20060104 	andcs	r0, r6, r4, lsl #2
 348:	593d8506 	ldmdbpl	sp!, {r1, r2, r8, sl, pc}
 34c:	67914d3d 			; <UNDEFINED> instruction: 0x67914d3d
 350:	4d9f684b 	ldcmi	8, cr6, [pc, #300]	; 484 <startup-0x1ffffb7c>
 354:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 358:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 35c:	0003023d 	andeq	r0, r3, sp, lsr r2
 360:	00a30101 	adceq	r0, r3, r1, lsl #2
 364:	00020000 	andeq	r0, r2, r0
 368:	0000005d 	andeq	r0, r0, sp, asr r0
 36c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 370:	0101000d 	tsteq	r1, sp
 374:	00000101 	andeq	r0, r0, r1, lsl #2
 378:	00000100 	andeq	r0, r0, r0, lsl #2
 37c:	6f682f01 	svcvs	0x00682f01
 380:	6f2f656d 	svcvs	0x002f656d
 384:	72616373 	rsbvc	r6, r1, #-872415231	; 0xcc000001
 388:	6b6f442f 	blvs	1bd144c <startup-0x1e42ebb4>
 38c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 390:	4f4d2f74 	svcmi	0x004d2f74
 394:	6f502f50 	svcvs	0x00502f50
 398:	6900676e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 39c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 3a0:	00006564 	andeq	r6, r0, r4, ror #10
 3a4:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 3a8:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
 3ac:	0100632e 	tsteq	r0, lr, lsr #6
 3b0:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
 3b4:	66656474 			; <UNDEFINED> instruction: 0x66656474
 3b8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 3bc:	50470000 	subpl	r0, r7, r0
 3c0:	682e4f49 	stmdavs	lr!, {r0, r3, r6, r8, r9, sl, fp, lr}
 3c4:	00000200 	andeq	r0, r0, r0, lsl #4
 3c8:	02050000 	andeq	r0, r5, #0
 3cc:	20000a90 	mulcs	r0, r0, sl
 3d0:	67011703 	strvs	r1, [r1, -r3, lsl #14]
 3d4:	4b234bcb 	blmi	8d3308 <startup-0x1f72ccf8>
 3d8:	4b234b23 	blmi	8d306c <startup-0x1f72cf94>
 3dc:	3d774c23 	ldclcc	12, cr4, [r7, #-140]!	; 0xffffff74
 3e0:	592f5959 	stmdbpl	pc!, {r0, r3, r4, r6, r8, fp, ip, lr}	; <UNPREDICTABLE>
 3e4:	592f592f 	stmdbpl	pc!, {r0, r1, r2, r3, r5, r8, fp, ip, lr}	; <UNPREDICTABLE>
 3e8:	3e77212f 	rpwccsp	f2, f7, #10.0
 3ec:	4b59594c 	blmi	1656924 <startup-0x1e9a96dc>
 3f0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 3f4:	ac7a0302 	ldclge	3, cr0, [sl], #-8
 3f8:	01040200 	mrseq	r0, R12_usr
 3fc:	03065806 	movweq	r5, #26630	; 0x6806
 400:	213d4a09 	teqcs	sp, r9, lsl #20
 404:	01000602 	tsteq	r0, r2, lsl #12
 408:	0000c401 	andeq	ip, r0, r1, lsl #8
 40c:	7c000200 	sfmvc	f0, 4, [r0], {-0}
 410:	02000000 	andeq	r0, r0, #0
 414:	0d0efb01 	vstreq	d15, [lr, #-4]
 418:	01010100 	mrseq	r0, (UNDEF: 17)
 41c:	00000001 	andeq	r0, r0, r1
 420:	01000001 	tsteq	r0, r1
 424:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 370 <startup-0x1ffffc90>
 428:	736f2f65 	cmnvc	pc, #404	; 0x194
 42c:	2f726163 	svccs	0x00726163
 430:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 434:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 438:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 43c:	6e6f502f 	cdpvs	0, 6, cr5, cr15, cr15, {1}
 440:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
 444:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 448:	73000065 	movwvc	r0, #101	; 0x65
 44c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 450:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 454:	00000100 	andeq	r0, r0, r0, lsl #2
 458:	64746e69 	ldrbtvs	r6, [r4], #-3689	; 0xfffff197
 45c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 460:	00000200 	andeq	r0, r0, r0, lsl #4
 464:	4f495047 	svcmi	0x00495047
 468:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 46c:	72670000 	rsbvc	r0, r7, #0
 470:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 474:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 478:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 47c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 480:	626f0000 	rsbvs	r0, pc, #0
 484:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 488:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 48c:	00000000 	andeq	r0, r0, r0
 490:	00000205 	andeq	r0, r0, r5, lsl #4
 494:	10032000 	andne	r2, r3, r0
 498:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
 49c:	01010003 	tsteq	r1, r3
 4a0:	b8020500 	stmdalt	r2, {r8, sl}
 4a4:	0320000b 			; <UNDEFINED> instruction: 0x0320000b
 4a8:	4b2f011a 	blmi	bc0918 <startup-0x1f43f6e8>
 4ac:	2f3dbd4b 	svccs	0x003dbd4b
 4b0:	5985332f 	stmibpl	r5, {r0, r1, r2, r3, r5, r8, r9, ip, sp}
 4b4:	9193673d 	orrsls	r6, r3, sp, lsr r7
 4b8:	75237523 	strvc	r7, [r3, #-1315]!	; 0xfffffadd
 4bc:	67237523 	strvs	r7, [r3, -r3, lsr #10]!
 4c0:	75236723 	strvc	r6, [r3, #-1827]!	; 0xfffff8dd
 4c4:	67236723 	strvs	r6, [r3, -r3, lsr #14]!
 4c8:	66550324 	ldrbvs	r0, [r5], -r4, lsr #6
 4cc:	01000402 	tsteq	r0, r2, lsl #8
 4d0:	00008901 	andeq	r8, r0, r1, lsl #18
 4d4:	5a000200 	bpl	cdc <startup-0x1ffff324>
 4d8:	02000000 	andeq	r0, r0, #0
 4dc:	0d0efb01 	vstreq	d15, [lr, #-4]
 4e0:	01010100 	mrseq	r0, (UNDEF: 17)
 4e4:	00000001 	andeq	r0, r0, r1
 4e8:	01000001 	tsteq	r0, r1
 4ec:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 438 <startup-0x1ffffbc8>
 4f0:	736f2f65 	cmnvc	pc, #404	; 0x194
 4f4:	2f726163 	svccs	0x00726163
 4f8:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 4fc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 500:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 504:	6e6f502f 	cdpvs	0, 6, cr5, cr15, cr15, {1}
 508:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
 50c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 510:	64000065 	strvs	r0, [r0], #-101	; 0xffffff9b
 514:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 518:	0100632e 	tsteq	r0, lr, lsr #6
 51c:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
 520:	66656474 			; <UNDEFINED> instruction: 0x66656474
 524:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 528:	50470000 	subpl	r0, r7, r0
 52c:	682e4f49 	stmdavs	lr!, {r0, r3, r6, r8, r9, sl, fp, lr}
 530:	00000200 	andeq	r0, r0, r0, lsl #4
 534:	02050000 	andeq	r0, r5, #0
 538:	20000cd4 	ldrdcs	r0, [r0], -r4
 53c:	2f011203 	svccs	0x00011203
 540:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
 544:	01040200 	mrseq	r0, R12_usr
 548:	69062006 	stmdbvs	r6, {r1, r2, sp}
 54c:	3f33693d 	svccc	0x0033693d
 550:	2f2f214b 	svccs	0x002f214b
 554:	4d4d4139 	stfmie	f4, [sp, #-228]	; 0xffffff1c
 558:	0004024e 	andeq	r0, r4, lr, asr #4
 55c:	Address 0x000000000000055c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
   4:	5f78004f 	svcpl	0x0078004f
   8:	69737966 	ldmdbvs	r3!, {r1, r2, r5, r6, r8, fp, ip, sp, lr}^
   c:	42006b73 	andmi	r6, r0, #117760	; 0x1cc00
  10:	3153435f 	cmpcc	r3, pc, asr r3
  14:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
  18:	534f0070 	movtpl	r0, #61552	; 0xf070
  1c:	44454550 	strbmi	r4, [r5], #-1360	; 0xfffffab0
  20:	434c0052 	movtmi	r0, #49234	; 0xc052
  24:	45535f44 	ldrbmi	r5, [r3, #-3908]	; 0xfffff0bc
  28:	44415f54 	strbmi	r5, [r1], #-3924	; 0xfffff0ac
  2c:	44490044 	strbmi	r0, [r9], #-68	; 0xffffffbc
  30:	4f4c5f52 	svcmi	0x004c5f52
  34:	61760057 	cmnvs	r6, r7, asr r0
  38:	0065756c 	rsbeq	r7, r5, ip, ror #10
  3c:	5f44434c 	svcpl	0x0044434c
  40:	4d004e4f 	stcmi	14, cr4, [r0, #-316]	; 0xfffffec4
  44:	5245444f 	subpl	r4, r5, #1325400064	; 0x4f000000
  48:	44434c00 	strbmi	r4, [r3], #-3072	; 0xfffff400
  4c:	4741505f 	smlsldmi	r5, r1, pc, r0	; <UNPREDICTABLE>
  50:	67005345 	strvs	r5, [r0, -r5, asr #6]
  54:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  58:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
  5c:	5f646165 	svcpl	0x00646165
  60:	61746164 	cmnvs	r4, r4, ror #2
  64:	67617000 	strbvs	r7, [r1, -r0]!
  68:	69700065 	ldmdbvs	r0!, {r0, r2, r5, r6}^
  6c:	006c6578 	rsbeq	r6, ip, r8, ror r5
  70:	5059544f 	subspl	r5, r9, pc, asr #8
  74:	4c005245 	sfmmi	f5, 4, [r0], {69}	; 0x45
  78:	535f4443 	cmppl	pc, #1124073472	; 0x43000000
  7c:	505f5445 	subspl	r5, pc, r5, asr #8
  80:	00454741 	subeq	r4, r5, r1, asr #14
  84:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  88:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  8c:	61686320 	cmnvs	r8, r0, lsr #6
  90:	5f420072 	svcpl	0x00420072
  94:	4f005752 	svcmi	0x00005752
  98:	485f5244 	ldmdami	pc, {r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
  9c:	00484749 	subeq	r4, r8, r9, asr #14
  a0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  a4:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  a8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  ac:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  b0:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
  b4:	2074726f 	rsbscs	r7, r4, pc, ror #4
  b8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  bc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  c0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  c4:	6f682f00 	svcvs	0x00682f00
  c8:	6f2f656d 	svcvs	0x002f656d
  cc:	72616373 	rsbvc	r6, r1, #-872415231	; 0xcc000001
  d0:	6b6f442f 	blvs	1bd1194 <startup-0x1e42ee6c>
  d4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  d8:	4f4d2f74 	svcmi	0x004d2f74
  dc:	6f502f50 	svcvs	0x00502f50
  e0:	672f676e 	strvs	r6, [pc, -lr, ror #14]!
  e4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  e8:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  ec:	616c7073 	smcvs	50947	; 0xc703
  f0:	00632e79 	rsbeq	r2, r3, r9, ror lr
  f4:	53435f42 	movtpl	r5, #16194	; 0x3f42
  f8:	44490032 	strbmi	r0, [r9], #-50	; 0xffffffce
  fc:	49485f52 	stmdbmi	r8, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
 100:	42004847 	andmi	r4, r0, #4653056	; 0x470000
 104:	0053525f 	subseq	r5, r3, pc, asr r2
 108:	70617267 	rsbvc	r7, r1, r7, ror #4
 10c:	5f636968 	svcpl	0x00636968
 110:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 114:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 118:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 11c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 120:	72670072 	rsbvc	r0, r7, #114	; 0x72
 124:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 128:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 12c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 130:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 134:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 138:	61726700 	cmnvs	r2, r0, lsl #14
 13c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 140:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 144:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 148:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 14c:	5f420074 	svcpl	0x00420074
 150:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 154:	682f0054 	stmdavs	pc!, {r2, r4, r6}	; <UNPREDICTABLE>
 158:	2f656d6f 	svccs	0x00656d6f
 15c:	6163736f 	cmnvs	r3, pc, ror #6
 160:	6f442f72 	svcvs	0x00442f72
 164:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
 168:	4d2f746e 	cfstrsmi	mvf7, [pc, #-440]!	; ffffffb8 <STK+0xdffff1f0>
 16c:	502f504f 	eorpl	r5, pc, pc, asr #32
 170:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 174:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 178:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 17c:	20554e47 	subscs	r4, r5, r7, asr #28
 180:	20313143 	eorscs	r3, r1, r3, asr #2
 184:	2e312e37 	mrccs	14, 1, r2, cr1, cr7, {1}
 188:	6d2d2030 	stcvs	0, cr2, [sp, #-192]!	; 0xffffff40
 18c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 190:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 194:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 198:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 19c:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 1a0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 1a4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 1a8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 1ac:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 1b0:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
 1b4:	304f2d20 	subcc	r2, pc, r0, lsr #26
 1b8:	52444f00 	subpl	r4, r4, #0, 30
 1bc:	574f4c5f 	smlsldpl	r4, pc, pc, ip	; <UNPREDICTABLE>
 1c0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 1c4:	00445f4f 	subeq	r5, r4, pc, asr #30
 1c8:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
 1cc:	5f420052 	svcpl	0x00420052
 1d0:	454c4553 	strbmi	r4, [ip, #-1363]	; 0xfffffaad
 1d4:	4c005443 	cfstrsmi	mvf5, [r0], {67}	; 0x43
 1d8:	415f4443 	cmpmi	pc, r3, asr #8
 1dc:	00534444 	subseq	r4, r3, r4, asr #8
 1e0:	5f44434c 	svcpl	0x0044434c
 1e4:	0046464f 	subeq	r4, r6, pc, asr #12
 1e8:	6b73616d 	blvs	1cd87a4 <startup-0x1e32785c>
 1ec:	44434c00 	strbmi	r4, [r3], #-3072	; 0xfffff400
 1f0:	4449575f 	strbmi	r5, [r9], #-1887	; 0xfffff8a1
 1f4:	67004854 	smlsdvs	r0, r4, r8, r4
 1f8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1fc:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 200:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 204:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 208:	434c0061 	movtmi	r0, #49249	; 0xc061
 20c:	55425f44 	strbpl	r5, [r2, #-3908]	; 0xfffff0bc
 210:	73005953 	movwvc	r5, #2387	; 0x953
 214:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 218:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 21c:	61726700 	cmnvs	r2, r0, lsl #14
 220:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 224:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 228:	67006574 	smlsdxvs	r0, r4, r5, r6
 22c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 230:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 234:	5f746961 	svcpl	0x00746961
 238:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 23c:	72670079 	rsbvc	r0, r7, #121	; 0x79
 240:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 244:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 248:	61697469 	cmnvs	r9, r9, ror #8
 24c:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
 250:	44434c00 	strbmi	r4, [r3], #-3072	; 0xfffff400
 254:	4945485f 	stmdbmi	r5, {r0, r1, r2, r3, r4, r6, fp, lr}^
 258:	00544847 	subseq	r4, r4, r7, asr #16
 25c:	5f44434c 	svcpl	0x0044434c
 260:	50534944 	subspl	r4, r3, r4, asr #18
 264:	5f59414c 	svcpl	0x0059414c
 268:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
 26c:	69750054 	ldmdbvs	r5!, {r2, r4, r6}^
 270:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
 274:	6c00745f 	cfstrsvs	mvf7, [r0], {95}	; 0x5f
 278:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 27c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 280:	4f495047 	svcmi	0x00495047
 284:	6700455f 	smlsdvs	r0, pc, r5, r4	; <UNPREDICTABLE>
 288:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 28c:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 290:	00646165 	rsbeq	r6, r4, r5, ror #2
 294:	70617267 	rsbvc	r7, r1, r7, ror #4
 298:	5f636968 	svcpl	0x00636968
 29c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2a0:	6f635f65 	svcvs	0x00635f65
 2a4:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 2a8:	72670064 	rsbvc	r0, r7, #100	; 0x64
 2ac:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2b0:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 2b4:	5f726165 	svcpl	0x00726165
 2b8:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 2bc:	64006e65 	strvs	r6, [r0], #-3685	; 0xfffff19b
 2c0:	00776172 	rsbseq	r6, r7, r2, ror r1
 2c4:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 130 <startup-0x1ffffed0>
 2c8:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 2cc:	736f7000 	cmnvc	pc, #0
 2d0:	6e00785f 	mcrvs	8, 0, r7, cr0, cr15, {2}
 2d4:	705f6d75 	subsvc	r6, pc, r5, ror sp	; <UNPREDICTABLE>
 2d8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 2dc:	65730073 	ldrbvs	r0, [r3, #-115]!	; 0xffffff8d
 2e0:	65765f74 	ldrbvs	r5, [r6, #-3956]!	; 0xfffff08c
 2e4:	6f50006c 	svcvs	0x0050006c
 2e8:	00746e69 	rsbseq	r6, r4, r9, ror #28
 2ec:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
 2f0:	47007468 	strmi	r7, [r0, -r8, ror #8]
 2f4:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 2f8:	00797274 	rsbseq	r7, r9, r4, ror r2
 2fc:	5f746573 	svcpl	0x00746573
 300:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 304:	765f7463 	ldrbvc	r7, [pc], -r3, ror #8
 308:	76006c65 	strvc	r6, [r0], -r5, ror #24
 30c:	785f6c65 	ldmdavc	pc, {r0, r2, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 310:	6c657600 	stclvs	6, cr7, [r5], #-0
 314:	6d00795f 	vstrvs.16	s14, [r0, #-190]	; 0xffffff42	; <UNPREDICTABLE>
 318:	0065766f 	rsbeq	r7, r5, pc, ror #12
 31c:	61656c63 	cmnvs	r5, r3, ror #24
 320:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 324:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 328:	65726300 	ldrbvs	r6, [r2, #-768]!	; 0xfffffd00
 32c:	5f657461 	svcpl	0x00657461
 330:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 334:	6a624f00 	bvs	1893f3c <startup-0x1e76c0c4>
 338:	00746365 	rsbseq	r6, r4, r5, ror #6
 33c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 288 <startup-0x1ffffd78>
 340:	736f2f65 	cmnvc	pc, #404	; 0x194
 344:	2f726163 	svccs	0x00726163
 348:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 34c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 350:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 354:	6e6f502f 	cdpvs	0, 6, cr5, cr15, cr15, {1}
 358:	626f2f67 	rsbvs	r2, pc, #412	; 0x19c
 35c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 360:	7000632e 	andvc	r6, r0, lr, lsr #6
 364:	795f736f 	ldmdbvc	pc, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 368:	6f656700 	svcvs	0x00656700
 36c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 370:	61625f79 	smcvs	9721	; 0x25f9
 374:	77006c6c 	strvc	r6, [r0, -ip, ror #24]
 378:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 37c:	61726400 	cmnvs	r2, r0, lsl #8
 380:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 384:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 388:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 38c:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 390:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 394:	6f682f00 	svcvs	0x00682f00
 398:	6f2f656d 	svcvs	0x002f656d
 39c:	72616373 	rsbvc	r6, r1, #-872415231	; 0xcc000001
 3a0:	6b6f442f 	blvs	1bd1464 <startup-0x1e42eb9c>
 3a4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 3a8:	4f4d2f74 	svcmi	0x004d2f74
 3ac:	6f502f50 	svcvs	0x00502f50
 3b0:	472f676e 	strmi	r6, [pc, -lr, ror #14]!
 3b4:	2e4f4950 			; <UNDEFINED> instruction: 0x2e4f4950
 3b8:	53410063 	movtpl	r0, #4195	; 0x1063
 3bc:	5f494943 	svcpl	0x00494943
 3c0:	434e5546 	movtmi	r5, #58694	; 0xe546
 3c4:	4e4f4954 			; <UNDEFINED> instruction: 0x4e4f4954
 3c8:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
 3cc:	43534100 	cmpmi	r3, #0, 2
 3d0:	435f4949 	cmpmi	pc, #1196032	; 0x124000
 3d4:	5241454c 	subpl	r4, r1, #76, 10	; 0x13000000
 3d8:	5349445f 	movtpl	r4, #37983	; 0x945f
 3dc:	59414c50 	stmdbpl	r1, {r4, r6, sl, fp, lr}^
 3e0:	63736100 	cmnvs	r3, #0, 2
 3e4:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
 3e8:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 3ec:	73610079 	cmnvc	r1, #121	; 0x79
 3f0:	5f696963 	svcpl	0x00696963
 3f4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 3f8:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 3fc:	73610064 	cmnvc	r1, #100	; 0x64
 400:	5f696963 	svcpl	0x00696963
 404:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 408:	6174735f 	cmnvs	r4, pc, asr r3
 40c:	00737574 	rsbseq	r7, r3, r4, ror r5
 410:	49435341 	stmdbmi	r3, {r0, r6, r8, r9, ip, lr}^
 414:	49445f49 	stmdbmi	r4, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
 418:	414c5053 	qdaddmi	r5, r3, ip
 41c:	54435f59 	strbpl	r5, [r3], #-3929	; 0xfffff0a7
 420:	61004c52 	tstvs	r0, r2, asr ip
 424:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 428:	6165725f 	cmnvs	r5, pc, asr r2
 42c:	6f635f64 	svcvs	0x00635f64
 430:	6f72746e 	svcvs	0x0072746e
 434:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 438:	63736100 	cmnvs	r3, #0, 2
 43c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 440:	5f6c7274 	svcpl	0x006c7274
 444:	5f746962 	svcpl	0x00746962
 448:	00746573 	rsbseq	r6, r4, r3, ror r5
 44c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 398 <startup-0x1ffffc68>
 450:	736f2f65 	cmnvc	pc, #404	; 0x194
 454:	2f726163 	svccs	0x00726163
 458:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 45c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 460:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 464:	6e6f502f 	cdpvs	0, 6, cr5, cr15, cr15, {1}
 468:	73612f67 	cmnvc	r1, #412	; 0x19c
 46c:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
 470:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 474:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 478:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 47c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 480:	63736100 	cmnvs	r3, #0, 2
 484:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 488:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 48c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 490:	53410061 	movtpl	r0, #4193	; 0x1061
 494:	5f494943 	svcpl	0x00494943
 498:	59535542 	ldmdbpl	r3, {r1, r6, r8, sl, ip, lr}^
 49c:	43534100 	cmpmi	r3, #0, 2
 4a0:	455f4949 	ldrbmi	r4, [pc, #-2377]	; fffffb5f <STK+0xdfffed97>
 4a4:	5952544e 	ldmdbpl	r2, {r1, r2, r3, r6, sl, ip, lr}^
 4a8:	444f4d5f 	strbmi	r4, [pc], #-3423	; 4b0 <startup-0x1ffffb50>
 4ac:	45535f45 	ldrbmi	r5, [r3, #-3909]	; 0xfffff0bb
 4b0:	73610054 	cmnvc	r1, #84	; 0x54
 4b4:	5f696963 	svcpl	0x00696963
 4b8:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 4bc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 4c0:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 4c4:	61007261 	tstvs	r0, r1, ror #4
 4c8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4cc:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 4d0:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 4d4:	00657369 	rsbeq	r7, r5, r9, ror #6
 4d8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4dc:	6f635f69 	svcvs	0x00635f69
 4e0:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 4e4:	73610064 	cmnvc	r1, #100	; 0x64
 4e8:	5f696963 	svcpl	0x00696963
 4ec:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 4f0:	6f635f65 	svcvs	0x00635f65
 4f4:	6f72746e 	svcvs	0x0072746e
 4f8:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 4fc:	63736100 	cmnvs	r3, #0, 2
 500:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 504:	5f646165 	svcpl	0x00646165
 508:	61746164 	cmnvs	r4, r4, ror #2
 50c:	63736100 	cmnvs	r3, #0, 2
 510:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 514:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 518:	6168635f 	cmnvs	r8, pc, asr r3
 51c:	656b0072 	strbvs	r0, [fp, #-114]!	; 0xffffff8e
 520:	2f006279 	svccs	0x00006279
 524:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 528:	63736f2f 	cmnvs	r3, #47, 30	; 0xbc
 52c:	442f7261 	strtmi	r7, [pc], #-609	; 534 <startup-0x1ffffacc>
 530:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
 534:	2f746e65 	svccs	0x00746e65
 538:	2f504f4d 	svccs	0x00504f4d
 53c:	676e6f50 			; <UNDEFINED> instruction: 0x676e6f50
 540:	79656b2f 	stmdbvc	r5!, {r0, r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 544:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 548:	00632e64 	rsbeq	r2, r3, r4, ror #28
 54c:	534c4f43 	movtpl	r4, #53059	; 0xcf43
 550:	574f5200 	strbpl	r5, [pc, -r0, lsl #4]
 554:	656b0053 	strbvs	r0, [fp, #-83]!	; 0xffffffad
 558:	616f6279 	smcvs	63017	; 0xf629
 55c:	675f6472 			; <UNDEFINED> instruction: 0x675f6472
 560:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
 564:	6b006c6f 	blvs	1b728 <startup-0x1ffe48d8>
 568:	6f627965 	svcvs	0x00627965
 56c:	5f647261 	svcpl	0x00647261
 570:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 574:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 578:	61747300 	cmnvs	r4, r0, lsl #6
 57c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 580:	6f682f00 	svcvs	0x00682f00
 584:	6f2f656d 	svcvs	0x002f656d
 588:	72616373 	rsbvc	r6, r1, #-872415231	; 0xcc000001
 58c:	6b6f442f 	blvs	1bd1650 <startup-0x1e42e9b0>
 590:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 594:	4f4d2f74 	svcmi	0x004d2f74
 598:	6f502f50 	svcvs	0x00502f50
 59c:	732f676e 			; <UNDEFINED> instruction: 0x732f676e
 5a0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 5a4:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 5a8:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 5ac:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 5b0:	615f7469 	cmpvs	pc, r9, ror #8
 5b4:	64007070 	strvs	r7, [r0], #-112	; 0xffffff90
 5b8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 5bc:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 5c0:	5f00696c 	svcpl	0x0000696c
 5c4:	004b5453 	subeq	r5, fp, r3, asr r4
 5c8:	616c6564 	cmnvs	ip, r4, ror #10
 5cc:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 5d0:	006f726b 	rsbeq	r7, pc, fp, ror #4
 5d4:	616c6564 	cmnvs	ip, r4, ror #10
 5d8:	30355f79 	eorscc	r5, r5, r9, ror pc
 5dc:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 5e0:	616c6564 	cmnvs	ip, r4, ror #10
 5e4:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 5e8:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 5ec:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xfffff0b4
 5f0:	6f682f00 	svcvs	0x00682f00
 5f4:	6f2f656d 	svcvs	0x002f656d
 5f8:	72616373 	rsbvc	r6, r1, #-872415231	; 0xcc000001
 5fc:	6b6f442f 	blvs	1bd16c0 <startup-0x1e42e940>
 600:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 604:	4f4d2f74 	svcmi	0x004d2f74
 608:	6f502f50 	svcvs	0x00502f50
 60c:	642f676e 	strtvs	r6, [pc], #-1902	; 614 <startup-0x1ffff9ec>
 610:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 614:	Address 0x0000000000000614 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	65462820 	strbvs	r2, [r6, #-2080]	; 0xfffff7e0
   8:	61726f64 	cmnvs	r2, r4, ror #30
   c:	312e3720 			; <UNDEFINED> instruction: 0x312e3720
  10:	352d302e 	strcc	r3, [sp, #-46]!	; 0xffffffd2
  14:	3263662e 	rsbcc	r6, r3, #48234496	; 0x2e00000
  18:	37202937 			; <UNDEFINED> instruction: 0x37202937
  1c:	302e312e 	eorcc	r3, lr, lr, lsr #2
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000048 	andeq	r0, r0, r8, asr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	180e4101 	stmdane	lr, {r0, r8, lr}
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000058 	andcs	r0, r0, r8, asr r0
  3c:	00000054 	andeq	r0, r0, r4, asr r0
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	180e4101 	stmdane	lr, {r0, r8, lr}
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000ac 	andcs	r0, r0, ip, lsr #1
  5c:	0000005a 	andeq	r0, r0, sl, asr r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	100e4101 	andne	r4, lr, r1, lsl #2
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000106 	andcs	r0, r0, r6, lsl #2
  7c:	0000006e 	andeq	r0, r0, lr, rrx
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000000 	andeq	r0, r0, r0
  94:	20000174 	andcs	r0, r0, r4, ror r1
  98:	00000090 	muleq	r0, r0, r0
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	180e4101 	stmdane	lr, {r0, r8, lr}
  a8:	00070d41 	andeq	r0, r7, r1, asr #26
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000000 	andeq	r0, r0, r0
  b4:	20000204 	andcs	r0, r0, r4, lsl #4
  b8:	00000084 	andeq	r0, r0, r4, lsl #1
  bc:	40080e41 	andmi	r0, r8, r1, asr #28
  c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c4:	100e4101 	andne	r4, lr, r1, lsl #2
  c8:	00070d41 	andeq	r0, r7, r1, asr #26
  cc:	0000001c 	andeq	r0, r0, ip, lsl r0
  d0:	00000000 	andeq	r0, r0, r0
  d4:	20000288 	andcs	r0, r0, r8, lsl #5
  d8:	00000040 	andeq	r0, r0, r0, asr #32
  dc:	40080e41 	andmi	r0, r8, r1, asr #28
  e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e4:	100e4101 	andne	r4, lr, r1, lsl #2
  e8:	00070d41 	andeq	r0, r7, r1, asr #26
  ec:	0000001c 	andeq	r0, r0, ip, lsl r0
  f0:	00000000 	andeq	r0, r0, r0
  f4:	200002c8 	andcs	r0, r0, r8, asr #5
  f8:	00000046 	andeq	r0, r0, r6, asr #32
  fc:	40080e41 	andmi	r0, r8, r1, asr #28
 100:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 104:	100e4101 	andne	r4, lr, r1, lsl #2
 108:	00070d41 	andeq	r0, r7, r1, asr #26
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	00000000 	andeq	r0, r0, r0
 114:	2000030e 	andcs	r0, r0, lr, lsl #6
 118:	0000002a 	andeq	r0, r0, sl, lsr #32
 11c:	40080e41 	andmi	r0, r8, r1, asr #28
 120:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 124:	100e4101 	andne	r4, lr, r1, lsl #2
 128:	00070d41 	andeq	r0, r7, r1, asr #26
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	00000000 	andeq	r0, r0, r0
 134:	20000338 	andcs	r0, r0, r8, lsr r3
 138:	0000006a 	andeq	r0, r0, sl, rrx
 13c:	40080e41 	andmi	r0, r8, r1, asr #28
 140:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 144:	100e4101 	andne	r4, lr, r1, lsl #2
 148:	00070d41 	andeq	r0, r7, r1, asr #26
 14c:	00000018 	andeq	r0, r0, r8, lsl r0
 150:	00000000 	andeq	r0, r0, r0
 154:	200003a2 	andcs	r0, r0, r2, lsr #7
 158:	0000005c 	andeq	r0, r0, ip, asr r0
 15c:	40080e41 	andmi	r0, r8, r1, asr #28
 160:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 164:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 168:	00000024 	andeq	r0, r0, r4, lsr #32
 16c:	00000000 	andeq	r0, r0, r0
 170:	200003fe 	strdcs	r0, [r0], -lr
 174:	0000015c 	andeq	r0, r0, ip, asr r1
 178:	40140e41 	andsmi	r0, r4, r1, asr #28
 17c:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 180:	03864004 	orreq	r4, r6, #4
 184:	40028740 	andmi	r8, r2, r0, asr #14
 188:	0e41018e 	dvfeqd	f0, f1, #0.5
 18c:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 190:	0000000c 	andeq	r0, r0, ip
 194:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 198:	7c020001 	stcvc	0, cr0, [r2], {1}
 19c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a0:	00000020 	andeq	r0, r0, r0, lsr #32
 1a4:	00000190 	muleq	r0, r0, r1
 1a8:	2000055c 	andcs	r0, r0, ip, asr r5
 1ac:	0000007a 	andeq	r0, r0, sl, ror r0
 1b0:	400c0e41 	andmi	r0, ip, r1, asr #28
 1b4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1b8:	018e4002 	orreq	r4, lr, r2
 1bc:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 1c0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1c4:	00000020 	andeq	r0, r0, r0, lsr #32
 1c8:	00000190 	muleq	r0, r0, r1
 1cc:	200005d6 	ldrdcs	r0, [r0], -r6
 1d0:	0000007a 	andeq	r0, r0, sl, ror r0
 1d4:	400c0e41 	andmi	r0, ip, r1, asr #28
 1d8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1dc:	018e4002 	orreq	r4, lr, r2
 1e0:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 1e4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	00000190 	muleq	r0, r0, r1
 1f0:	20000650 	andcs	r0, r0, r0, asr r6
 1f4:	000000c4 	andeq	r0, r0, r4, asr #1
 1f8:	40080e41 	andmi	r0, r8, r1, asr #28
 1fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 200:	100e4101 	andne	r4, lr, r1, lsl #2
 204:	00070d41 	andeq	r0, r7, r1, asr #26
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	00000190 	muleq	r0, r0, r1
 210:	20000714 	andcs	r0, r0, r4, lsl r7
 214:	00000030 	andeq	r0, r0, r0, lsr r0
 218:	40080e41 	andmi	r0, r8, r1, asr #28
 21c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 220:	100e4101 	andne	r4, lr, r1, lsl #2
 224:	00070d41 	andeq	r0, r7, r1, asr #26
 228:	00000020 	andeq	r0, r0, r0, lsr #32
 22c:	00000190 	muleq	r0, r0, r1
 230:	20000744 	andcs	r0, r0, r4, asr #14
 234:	0000007c 	andeq	r0, r0, ip, ror r0
 238:	400c0e41 	andmi	r0, ip, r1, asr #28
 23c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 240:	018e4002 	orreq	r4, lr, r2
 244:	41180e41 	tstmi	r8, r1, asr #28
 248:	0000070d 	andeq	r0, r0, sp, lsl #14
 24c:	0000000c 	andeq	r0, r0, ip
 250:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 254:	7c020001 	stcvc	0, cr0, [r2], {1}
 258:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	0000024c 	andeq	r0, r0, ip, asr #4
 264:	200007c0 	andcs	r0, r0, r0, asr #15
 268:	00000044 	andeq	r0, r0, r4, asr #32
 26c:	40080e41 	andmi	r0, r8, r1, asr #28
 270:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 274:	180e4101 	stmdane	lr, {r0, r8, lr}
 278:	00070d41 	andeq	r0, r7, r1, asr #26
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	0000024c 	andeq	r0, r0, ip, asr #4
 284:	20000804 	andcs	r0, r0, r4, lsl #16
 288:	0000004c 	andeq	r0, r0, ip, asr #32
 28c:	40080e41 	andmi	r0, r8, r1, asr #28
 290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 294:	180e4101 	stmdane	lr, {r0, r8, lr}
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	0000024c 	andeq	r0, r0, ip, asr #4
 2a4:	20000850 	andcs	r0, r0, r0, asr r8
 2a8:	00000034 	andeq	r0, r0, r4, lsr r0
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	100e4101 	andne	r4, lr, r1, lsl #2
 2b8:	00070d41 	andeq	r0, r7, r1, asr #26
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	0000024c 	andeq	r0, r0, ip, asr #4
 2c4:	20000884 	andcs	r0, r0, r4, lsl #17
 2c8:	00000034 	andeq	r0, r0, r4, lsr r0
 2cc:	40080e41 	andmi	r0, r8, r1, asr #28
 2d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d4:	100e4101 	andne	r4, lr, r1, lsl #2
 2d8:	00070d41 	andeq	r0, r7, r1, asr #26
 2dc:	00000020 	andeq	r0, r0, r0, lsr #32
 2e0:	0000024c 	andeq	r0, r0, ip, asr #4
 2e4:	200008b8 			; <UNDEFINED> instruction: 0x200008b8
 2e8:	00000044 	andeq	r0, r0, r4, asr #32
 2ec:	400c0e41 	andmi	r0, ip, r1, asr #28
 2f0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 2f4:	018e4002 	orreq	r4, lr, r2
 2f8:	41180e41 	tstmi	r8, r1, asr #28
 2fc:	0000070d 	andeq	r0, r0, sp, lsl #14
 300:	00000020 	andeq	r0, r0, r0, lsr #32
 304:	0000024c 	andeq	r0, r0, ip, asr #4
 308:	200008fc 	strdcs	r0, [r0], -ip
 30c:	00000044 	andeq	r0, r0, r4, asr #32
 310:	400c0e41 	andmi	r0, ip, r1, asr #28
 314:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 318:	018e4002 	orreq	r4, lr, r2
 31c:	41180e41 	tstmi	r8, r1, asr #28
 320:	0000070d 	andeq	r0, r0, sp, lsl #14
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	0000024c 	andeq	r0, r0, ip, asr #4
 32c:	20000940 	andcs	r0, r0, r0, asr #18
 330:	0000002a 	andeq	r0, r0, sl, lsr #32
 334:	40080e41 	andmi	r0, r8, r1, asr #28
 338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 33c:	100e4101 	andne	r4, lr, r1, lsl #2
 340:	00070d41 	andeq	r0, r7, r1, asr #26
 344:	0000001c 	andeq	r0, r0, ip, lsl r0
 348:	0000024c 	andeq	r0, r0, ip, asr #4
 34c:	2000096a 	andcs	r0, r0, sl, ror #18
 350:	0000002a 	andeq	r0, r0, sl, lsr #32
 354:	40080e41 	andmi	r0, r8, r1, asr #28
 358:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 35c:	100e4101 	andne	r4, lr, r1, lsl #2
 360:	00070d41 	andeq	r0, r7, r1, asr #26
 364:	0000001c 	andeq	r0, r0, ip, lsl r0
 368:	0000024c 	andeq	r0, r0, ip, asr #4
 36c:	20000994 	mulcs	r0, r4, r9
 370:	00000036 	andeq	r0, r0, r6, lsr r0
 374:	40080e41 	andmi	r0, r8, r1, asr #28
 378:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 37c:	100e4101 	andne	r4, lr, r1, lsl #2
 380:	00070d41 	andeq	r0, r7, r1, asr #26
 384:	0000001c 	andeq	r0, r0, ip, lsl r0
 388:	0000024c 	andeq	r0, r0, ip, asr #4
 38c:	200009ca 	andcs	r0, r0, sl, asr #19
 390:	0000003c 	andeq	r0, r0, ip, lsr r0
 394:	40080e41 	andmi	r0, r8, r1, asr #28
 398:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 39c:	100e4101 	andne	r4, lr, r1, lsl #2
 3a0:	00070d41 	andeq	r0, r7, r1, asr #26
 3a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a8:	0000024c 	andeq	r0, r0, ip, asr #4
 3ac:	20000a06 	andcs	r0, r0, r6, lsl #20
 3b0:	0000004e 	andeq	r0, r0, lr, asr #32
 3b4:	40080e41 	andmi	r0, r8, r1, asr #28
 3b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3bc:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c0:	00070d41 	andeq	r0, r7, r1, asr #26
 3c4:	00000018 	andeq	r0, r0, r8, lsl r0
 3c8:	0000024c 	andeq	r0, r0, ip, asr #4
 3cc:	20000a54 	andcs	r0, r0, r4, asr sl
 3d0:	0000003a 	andeq	r0, r0, sl, lsr r0
 3d4:	40080e41 	andmi	r0, r8, r1, asr #28
 3d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3dc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3e0:	0000000c 	andeq	r0, r0, ip
 3e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3e8:	7c020001 	stcvc	0, cr0, [r2], {1}
 3ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f4:	000003e0 	andeq	r0, r0, r0, ror #7
 3f8:	20000a90 	mulcs	r0, r0, sl
 3fc:	00000064 	andeq	r0, r0, r4, rrx
 400:	40080e41 	andmi	r0, r8, r1, asr #28
 404:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 408:	100e4101 	andne	r4, lr, r1, lsl #2
 40c:	00070d41 	andeq	r0, r7, r1, asr #26
 410:	0000001c 	andeq	r0, r0, ip, lsl r0
 414:	000003e0 	andeq	r0, r0, r0, ror #7
 418:	20000af4 	strdcs	r0, [r0], -r4
 41c:	00000058 	andeq	r0, r0, r8, asr r0
 420:	40080e41 	andmi	r0, r8, r1, asr #28
 424:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 428:	100e4101 	andne	r4, lr, r1, lsl #2
 42c:	00070d41 	andeq	r0, r7, r1, asr #26
 430:	00000020 	andeq	r0, r0, r0, lsr #32
 434:	000003e0 	andeq	r0, r0, r0, ror #7
 438:	20000b4c 	andcs	r0, r0, ip, asr #22
 43c:	0000006c 	andeq	r0, r0, ip, rrx
 440:	400c0e41 	andmi	r0, ip, r1, asr #28
 444:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 448:	018e4002 	orreq	r4, lr, r2
 44c:	41180e41 	tstmi	r8, r1, asr #28
 450:	0000070d 	andeq	r0, r0, sp, lsl #14
 454:	0000000c 	andeq	r0, r0, ip
 458:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 45c:	7c020001 	stcvc	0, cr0, [r2], {1}
 460:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 464:	0000000c 	andeq	r0, r0, ip
 468:	00000454 	andeq	r0, r0, r4, asr r4
 46c:	20000000 	andcs	r0, r0, r0
 470:	0000000c 	andeq	r0, r0, ip
 474:	00000018 	andeq	r0, r0, r8, lsl r0
 478:	00000454 	andeq	r0, r0, r4, asr r4
 47c:	20000bb8 			; <UNDEFINED> instruction: 0x20000bb8
 480:	0000002c 	andeq	r0, r0, ip, lsr #32
 484:	40080e41 	andmi	r0, r8, r1, asr #28
 488:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 48c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 490:	00000024 	andeq	r0, r0, r4, lsr #32
 494:	00000454 	andeq	r0, r0, r4, asr r4
 498:	20000be4 	andcs	r0, r0, r4, ror #23
 49c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 4a0:	40100e41 	andsmi	r0, r0, r1, asr #28
 4a4:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 4a8:	02874003 	addeq	r4, r7, #3
 4ac:	41018e40 	tstmi	r1, r0, asr #28
 4b0:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 4b4:	00003007 	andeq	r3, r0, r7
 4b8:	0000000c 	andeq	r0, r0, ip
 4bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 4c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4c8:	00000018 	andeq	r0, r0, r8, lsl r0
 4cc:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 4d0:	20000cd4 	ldrdcs	r0, [r0], -r4
 4d4:	0000003c 	andeq	r0, r0, ip, lsr r0
 4d8:	40080e41 	andmi	r0, r8, r1, asr #28
 4dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4e4:	00000018 	andeq	r0, r0, r8, lsl r0
 4e8:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 4ec:	20000d10 	andcs	r0, r0, r0, lsl sp
 4f0:	0000000a 	andeq	r0, r0, sl
 4f4:	40080e41 	andmi	r0, r8, r1, asr #28
 4f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4fc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 500:	0000001c 	andeq	r0, r0, ip, lsl r0
 504:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 508:	20000d1a 	andcs	r0, r0, sl, lsl sp
 50c:	00000026 	andeq	r0, r0, r6, lsr #32
 510:	40080e41 	andmi	r0, r8, r1, asr #28
 514:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 518:	100e4101 	andne	r4, lr, r1, lsl #2
 51c:	00070d41 	andeq	r0, r7, r1, asr #26
 520:	0000001c 	andeq	r0, r0, ip, lsl r0
 524:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 528:	20000d40 	andcs	r0, r0, r0, asr #26
 52c:	00000018 	andeq	r0, r0, r8, lsl r0
 530:	40080e41 	andmi	r0, r8, r1, asr #28
 534:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 538:	100e4101 	andne	r4, lr, r1, lsl #2
 53c:	00070d41 	andeq	r0, r7, r1, asr #26

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000bb8 			; <UNDEFINED> instruction: 0x20000bb8
   4:	20000cd4 	ldrdcs	r0, [r0], -r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
